// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: namespace.proto

package tools_sdk_native_namespace_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NativeNamespaceServiceClient is the client API for NativeNamespaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NativeNamespaceServiceClient interface {
	// Creates namespace if it doesnt exist. If namespace exist does nothing.
	// Requires "native.namespace.create" action on "native.namespace" resource for global namespace to be presented in the actor policies.
	Ensure(ctx context.Context, in *EnsureNamespaceRequest, opts ...grpc.CallOption) (*EnsureNamespaceResponse, error)
	// Creates new namespace. If namespace already exist, will return error.
	// Requires "native.namespace.create" action on "native.namespace" resource for global namespace to be presented in the actor policies.
	Create(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error)
	// Updates namespace information. If namespace doesnt exist, will return error.
	// Requires "native.namespace.update" action on "native.namespace" resource for requested namespace to be presented in the actor policies.
	Update(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*UpdateNamespaceResponse, error)
	// Gets namespace information. If namespace doesnt exist, will return error.
	// Requires "native.namespace.get" action on "native.namespace" resource for requested namespace to be presented in the actor policies.
	Get(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error)
	// Gets all the namespaces.
	// Requires "native.namespace.list" action on "native.namespace" resource for global namespace to be presented in the actor policies.
	GetAll(ctx context.Context, in *GetAllNamespacesRequest, opts ...grpc.CallOption) (NativeNamespaceService_GetAllClient, error)
	// Deletes namespace. If namespace doesnt exists sets "existed" flag in the response to "false"
	// Requires "native.namespace.delete" action on "native.namespace" resource for global namespace to be presented in the actor policies.
	Delete(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error)
	// Checks if namespace exists or not.
	// Requires "native.namespace.get" action on "native.namespace" resource for global namespace to be presented in the actor policies.
	Exists(ctx context.Context, in *IsNamespaceExistRequest, opts ...grpc.CallOption) (*IsNamespaceExistResponse, error)
	// Gets namespace statistics. If namespace doesnt exist, will return error.
	// Requires "native.namespace.stats" action on "native.namespace" resource for requested namespace to be presented in the actor policies.
	Stat(ctx context.Context, in *GetNamespaceStatisticsRequest, opts ...grpc.CallOption) (*GetNamespaceStatisticsResponse, error)
}

type nativeNamespaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNativeNamespaceServiceClient(cc grpc.ClientConnInterface) NativeNamespaceServiceClient {
	return &nativeNamespaceServiceClient{cc}
}

func (c *nativeNamespaceServiceClient) Ensure(ctx context.Context, in *EnsureNamespaceRequest, opts ...grpc.CallOption) (*EnsureNamespaceResponse, error) {
	out := new(EnsureNamespaceResponse)
	err := c.cc.Invoke(ctx, "/tools_sdk_native_namespace.NativeNamespaceService/Ensure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nativeNamespaceServiceClient) Create(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error) {
	out := new(CreateNamespaceResponse)
	err := c.cc.Invoke(ctx, "/tools_sdk_native_namespace.NativeNamespaceService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nativeNamespaceServiceClient) Update(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*UpdateNamespaceResponse, error) {
	out := new(UpdateNamespaceResponse)
	err := c.cc.Invoke(ctx, "/tools_sdk_native_namespace.NativeNamespaceService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nativeNamespaceServiceClient) Get(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error) {
	out := new(GetNamespaceResponse)
	err := c.cc.Invoke(ctx, "/tools_sdk_native_namespace.NativeNamespaceService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nativeNamespaceServiceClient) GetAll(ctx context.Context, in *GetAllNamespacesRequest, opts ...grpc.CallOption) (NativeNamespaceService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &NativeNamespaceService_ServiceDesc.Streams[0], "/tools_sdk_native_namespace.NativeNamespaceService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &nativeNamespaceServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NativeNamespaceService_GetAllClient interface {
	Recv() (*GetAllNamespacesResponse, error)
	grpc.ClientStream
}

type nativeNamespaceServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *nativeNamespaceServiceGetAllClient) Recv() (*GetAllNamespacesResponse, error) {
	m := new(GetAllNamespacesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nativeNamespaceServiceClient) Delete(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error) {
	out := new(DeleteNamespaceResponse)
	err := c.cc.Invoke(ctx, "/tools_sdk_native_namespace.NativeNamespaceService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nativeNamespaceServiceClient) Exists(ctx context.Context, in *IsNamespaceExistRequest, opts ...grpc.CallOption) (*IsNamespaceExistResponse, error) {
	out := new(IsNamespaceExistResponse)
	err := c.cc.Invoke(ctx, "/tools_sdk_native_namespace.NativeNamespaceService/Exists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nativeNamespaceServiceClient) Stat(ctx context.Context, in *GetNamespaceStatisticsRequest, opts ...grpc.CallOption) (*GetNamespaceStatisticsResponse, error) {
	out := new(GetNamespaceStatisticsResponse)
	err := c.cc.Invoke(ctx, "/tools_sdk_native_namespace.NativeNamespaceService/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NativeNamespaceServiceServer is the server API for NativeNamespaceService service.
// All implementations must embed UnimplementedNativeNamespaceServiceServer
// for forward compatibility
type NativeNamespaceServiceServer interface {
	// Creates namespace if it doesnt exist. If namespace exist does nothing.
	// Requires "native.namespace.create" action on "native.namespace" resource for global namespace to be presented in the actor policies.
	Ensure(context.Context, *EnsureNamespaceRequest) (*EnsureNamespaceResponse, error)
	// Creates new namespace. If namespace already exist, will return error.
	// Requires "native.namespace.create" action on "native.namespace" resource for global namespace to be presented in the actor policies.
	Create(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error)
	// Updates namespace information. If namespace doesnt exist, will return error.
	// Requires "native.namespace.update" action on "native.namespace" resource for requested namespace to be presented in the actor policies.
	Update(context.Context, *UpdateNamespaceRequest) (*UpdateNamespaceResponse, error)
	// Gets namespace information. If namespace doesnt exist, will return error.
	// Requires "native.namespace.get" action on "native.namespace" resource for requested namespace to be presented in the actor policies.
	Get(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error)
	// Gets all the namespaces.
	// Requires "native.namespace.list" action on "native.namespace" resource for global namespace to be presented in the actor policies.
	GetAll(*GetAllNamespacesRequest, NativeNamespaceService_GetAllServer) error
	// Deletes namespace. If namespace doesnt exists sets "existed" flag in the response to "false"
	// Requires "native.namespace.delete" action on "native.namespace" resource for global namespace to be presented in the actor policies.
	Delete(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error)
	// Checks if namespace exists or not.
	// Requires "native.namespace.get" action on "native.namespace" resource for global namespace to be presented in the actor policies.
	Exists(context.Context, *IsNamespaceExistRequest) (*IsNamespaceExistResponse, error)
	// Gets namespace statistics. If namespace doesnt exist, will return error.
	// Requires "native.namespace.stats" action on "native.namespace" resource for requested namespace to be presented in the actor policies.
	Stat(context.Context, *GetNamespaceStatisticsRequest) (*GetNamespaceStatisticsResponse, error)
	mustEmbedUnimplementedNativeNamespaceServiceServer()
}

// UnimplementedNativeNamespaceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNativeNamespaceServiceServer struct {
}

func (UnimplementedNativeNamespaceServiceServer) Ensure(context.Context, *EnsureNamespaceRequest) (*EnsureNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ensure not implemented")
}
func (UnimplementedNativeNamespaceServiceServer) Create(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedNativeNamespaceServiceServer) Update(context.Context, *UpdateNamespaceRequest) (*UpdateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedNativeNamespaceServiceServer) Get(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedNativeNamespaceServiceServer) GetAll(*GetAllNamespacesRequest, NativeNamespaceService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedNativeNamespaceServiceServer) Delete(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedNativeNamespaceServiceServer) Exists(context.Context, *IsNamespaceExistRequest) (*IsNamespaceExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedNativeNamespaceServiceServer) Stat(context.Context, *GetNamespaceStatisticsRequest) (*GetNamespaceStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedNativeNamespaceServiceServer) mustEmbedUnimplementedNativeNamespaceServiceServer() {
}

// UnsafeNativeNamespaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NativeNamespaceServiceServer will
// result in compilation errors.
type UnsafeNativeNamespaceServiceServer interface {
	mustEmbedUnimplementedNativeNamespaceServiceServer()
}

func RegisterNativeNamespaceServiceServer(s grpc.ServiceRegistrar, srv NativeNamespaceServiceServer) {
	s.RegisterService(&NativeNamespaceService_ServiceDesc, srv)
}

func _NativeNamespaceService_Ensure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnsureNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NativeNamespaceServiceServer).Ensure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tools_sdk_native_namespace.NativeNamespaceService/Ensure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NativeNamespaceServiceServer).Ensure(ctx, req.(*EnsureNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NativeNamespaceService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NativeNamespaceServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tools_sdk_native_namespace.NativeNamespaceService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NativeNamespaceServiceServer).Create(ctx, req.(*CreateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NativeNamespaceService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NativeNamespaceServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tools_sdk_native_namespace.NativeNamespaceService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NativeNamespaceServiceServer).Update(ctx, req.(*UpdateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NativeNamespaceService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NativeNamespaceServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tools_sdk_native_namespace.NativeNamespaceService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NativeNamespaceServiceServer).Get(ctx, req.(*GetNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NativeNamespaceService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllNamespacesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NativeNamespaceServiceServer).GetAll(m, &nativeNamespaceServiceGetAllServer{stream})
}

type NativeNamespaceService_GetAllServer interface {
	Send(*GetAllNamespacesResponse) error
	grpc.ServerStream
}

type nativeNamespaceServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *nativeNamespaceServiceGetAllServer) Send(m *GetAllNamespacesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NativeNamespaceService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NativeNamespaceServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tools_sdk_native_namespace.NativeNamespaceService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NativeNamespaceServiceServer).Delete(ctx, req.(*DeleteNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NativeNamespaceService_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsNamespaceExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NativeNamespaceServiceServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tools_sdk_native_namespace.NativeNamespaceService/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NativeNamespaceServiceServer).Exists(ctx, req.(*IsNamespaceExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NativeNamespaceService_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NativeNamespaceServiceServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tools_sdk_native_namespace.NativeNamespaceService/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NativeNamespaceServiceServer).Stat(ctx, req.(*GetNamespaceStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NativeNamespaceService_ServiceDesc is the grpc.ServiceDesc for NativeNamespaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NativeNamespaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tools_sdk_native_namespace.NativeNamespaceService",
	HandlerType: (*NativeNamespaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ensure",
			Handler:    _NativeNamespaceService_Ensure_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _NativeNamespaceService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _NativeNamespaceService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _NativeNamespaceService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NativeNamespaceService_Delete_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _NativeNamespaceService_Exists_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _NativeNamespaceService_Stat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _NativeNamespaceService_GetAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "namespace.proto",
}
