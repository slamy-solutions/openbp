// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: onecsync.proto

package crm_onec_sync_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OneCSyncServiceClient is the client API for OneCSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OneCSyncServiceClient interface {
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
	GetLog(ctx context.Context, in *GetLogRequest, opts ...grpc.CallOption) (*GetLogResponse, error)
}

type oneCSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOneCSyncServiceClient(cc grpc.ClientConnInterface) OneCSyncServiceClient {
	return &oneCSyncServiceClient{cc}
}

func (c *oneCSyncServiceClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/crm_onec_sync.OneCSyncService/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCSyncServiceClient) GetLog(ctx context.Context, in *GetLogRequest, opts ...grpc.CallOption) (*GetLogResponse, error) {
	out := new(GetLogResponse)
	err := c.cc.Invoke(ctx, "/crm_onec_sync.OneCSyncService/GetLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OneCSyncServiceServer is the server API for OneCSyncService service.
// All implementations must embed UnimplementedOneCSyncServiceServer
// for forward compatibility
type OneCSyncServiceServer interface {
	Sync(context.Context, *SyncRequest) (*SyncResponse, error)
	GetLog(context.Context, *GetLogRequest) (*GetLogResponse, error)
	mustEmbedUnimplementedOneCSyncServiceServer()
}

// UnimplementedOneCSyncServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOneCSyncServiceServer struct {
}

func (UnimplementedOneCSyncServiceServer) Sync(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedOneCSyncServiceServer) GetLog(context.Context, *GetLogRequest) (*GetLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLog not implemented")
}
func (UnimplementedOneCSyncServiceServer) mustEmbedUnimplementedOneCSyncServiceServer() {}

// UnsafeOneCSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OneCSyncServiceServer will
// result in compilation errors.
type UnsafeOneCSyncServiceServer interface {
	mustEmbedUnimplementedOneCSyncServiceServer()
}

func RegisterOneCSyncServiceServer(s grpc.ServiceRegistrar, srv OneCSyncServiceServer) {
	s.RegisterService(&OneCSyncService_ServiceDesc, srv)
}

func _OneCSyncService_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCSyncServiceServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crm_onec_sync.OneCSyncService/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCSyncServiceServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCSyncService_GetLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCSyncServiceServer).GetLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crm_onec_sync.OneCSyncService/GetLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCSyncServiceServer).GetLog(ctx, req.(*GetLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OneCSyncService_ServiceDesc is the grpc.ServiceDesc for OneCSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OneCSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crm_onec_sync.OneCSyncService",
	HandlerType: (*OneCSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _OneCSyncService_Sync_Handler,
		},
		{
			MethodName: "GetLog",
			Handler:    _OneCSyncService_GetLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "onecsync.proto",
}
