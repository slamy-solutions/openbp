// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: kanban.proto

package kanban

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KanbanServiceClient is the client API for KanbanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KanbanServiceClient interface {
	CreateStage(ctx context.Context, in *CreateStageRequest, opts ...grpc.CallOption) (*CreateStageResponse, error)
	GetStage(ctx context.Context, in *GetStageRequest, opts ...grpc.CallOption) (*GetStageResponse, error)
	GetStages(ctx context.Context, in *GetStagesRequest, opts ...grpc.CallOption) (*GetStagesResponse, error)
	UpdateStage(ctx context.Context, in *UpdateStageRequest, opts ...grpc.CallOption) (*UpdateStageResponse, error)
	DeleteStage(ctx context.Context, in *DeleteStageRequest, opts ...grpc.CallOption) (*DeleteStageResponse, error)
	SwapStagesOrder(ctx context.Context, in *SwapStagesOrderRequest, opts ...grpc.CallOption) (*SwapStagesOrderResponse, error)
	CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*CreateTicketResponse, error)
	GetTicket(ctx context.Context, in *GetTicketRequest, opts ...grpc.CallOption) (*GetTicketResponse, error)
	GetTickets(ctx context.Context, in *GetTicketsRequest, opts ...grpc.CallOption) (*GetTicketsResponse, error)
	UpdateTicketBasicInfo(ctx context.Context, in *UpdateTicketBasicInfoRequest, opts ...grpc.CallOption) (*UpdateTicketBasicInfoResponse, error)
	DeleteTicket(ctx context.Context, in *DeleteTicketRequest, opts ...grpc.CallOption) (*DeleteTicketResponse, error)
	UpdateTicketStage(ctx context.Context, in *UpdateTicketStageRequest, opts ...grpc.CallOption) (*UpdateTicketStageResponse, error)
	UpdateTicketPriority(ctx context.Context, in *UpdateTicketPriorityRequest, opts ...grpc.CallOption) (*UpdateTicketPriorityResponse, error)
	CloseTicket(ctx context.Context, in *CloseTicketRequest, opts ...grpc.CallOption) (*CloseTicketResponse, error)
}

type kanbanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKanbanServiceClient(cc grpc.ClientConnInterface) KanbanServiceClient {
	return &kanbanServiceClient{cc}
}

func (c *kanbanServiceClient) CreateStage(ctx context.Context, in *CreateStageRequest, opts ...grpc.CallOption) (*CreateStageResponse, error) {
	out := new(CreateStageResponse)
	err := c.cc.Invoke(ctx, "/kanban.KanbanService/CreateStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanServiceClient) GetStage(ctx context.Context, in *GetStageRequest, opts ...grpc.CallOption) (*GetStageResponse, error) {
	out := new(GetStageResponse)
	err := c.cc.Invoke(ctx, "/kanban.KanbanService/GetStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanServiceClient) GetStages(ctx context.Context, in *GetStagesRequest, opts ...grpc.CallOption) (*GetStagesResponse, error) {
	out := new(GetStagesResponse)
	err := c.cc.Invoke(ctx, "/kanban.KanbanService/GetStages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanServiceClient) UpdateStage(ctx context.Context, in *UpdateStageRequest, opts ...grpc.CallOption) (*UpdateStageResponse, error) {
	out := new(UpdateStageResponse)
	err := c.cc.Invoke(ctx, "/kanban.KanbanService/UpdateStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanServiceClient) DeleteStage(ctx context.Context, in *DeleteStageRequest, opts ...grpc.CallOption) (*DeleteStageResponse, error) {
	out := new(DeleteStageResponse)
	err := c.cc.Invoke(ctx, "/kanban.KanbanService/DeleteStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanServiceClient) SwapStagesOrder(ctx context.Context, in *SwapStagesOrderRequest, opts ...grpc.CallOption) (*SwapStagesOrderResponse, error) {
	out := new(SwapStagesOrderResponse)
	err := c.cc.Invoke(ctx, "/kanban.KanbanService/SwapStagesOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanServiceClient) CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*CreateTicketResponse, error) {
	out := new(CreateTicketResponse)
	err := c.cc.Invoke(ctx, "/kanban.KanbanService/CreateTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanServiceClient) GetTicket(ctx context.Context, in *GetTicketRequest, opts ...grpc.CallOption) (*GetTicketResponse, error) {
	out := new(GetTicketResponse)
	err := c.cc.Invoke(ctx, "/kanban.KanbanService/GetTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanServiceClient) GetTickets(ctx context.Context, in *GetTicketsRequest, opts ...grpc.CallOption) (*GetTicketsResponse, error) {
	out := new(GetTicketsResponse)
	err := c.cc.Invoke(ctx, "/kanban.KanbanService/GetTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanServiceClient) UpdateTicketBasicInfo(ctx context.Context, in *UpdateTicketBasicInfoRequest, opts ...grpc.CallOption) (*UpdateTicketBasicInfoResponse, error) {
	out := new(UpdateTicketBasicInfoResponse)
	err := c.cc.Invoke(ctx, "/kanban.KanbanService/UpdateTicketBasicInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanServiceClient) DeleteTicket(ctx context.Context, in *DeleteTicketRequest, opts ...grpc.CallOption) (*DeleteTicketResponse, error) {
	out := new(DeleteTicketResponse)
	err := c.cc.Invoke(ctx, "/kanban.KanbanService/DeleteTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanServiceClient) UpdateTicketStage(ctx context.Context, in *UpdateTicketStageRequest, opts ...grpc.CallOption) (*UpdateTicketStageResponse, error) {
	out := new(UpdateTicketStageResponse)
	err := c.cc.Invoke(ctx, "/kanban.KanbanService/UpdateTicketStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanServiceClient) UpdateTicketPriority(ctx context.Context, in *UpdateTicketPriorityRequest, opts ...grpc.CallOption) (*UpdateTicketPriorityResponse, error) {
	out := new(UpdateTicketPriorityResponse)
	err := c.cc.Invoke(ctx, "/kanban.KanbanService/UpdateTicketPriority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanServiceClient) CloseTicket(ctx context.Context, in *CloseTicketRequest, opts ...grpc.CallOption) (*CloseTicketResponse, error) {
	out := new(CloseTicketResponse)
	err := c.cc.Invoke(ctx, "/kanban.KanbanService/CloseTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KanbanServiceServer is the server API for KanbanService service.
// All implementations must embed UnimplementedKanbanServiceServer
// for forward compatibility
type KanbanServiceServer interface {
	CreateStage(context.Context, *CreateStageRequest) (*CreateStageResponse, error)
	GetStage(context.Context, *GetStageRequest) (*GetStageResponse, error)
	GetStages(context.Context, *GetStagesRequest) (*GetStagesResponse, error)
	UpdateStage(context.Context, *UpdateStageRequest) (*UpdateStageResponse, error)
	DeleteStage(context.Context, *DeleteStageRequest) (*DeleteStageResponse, error)
	SwapStagesOrder(context.Context, *SwapStagesOrderRequest) (*SwapStagesOrderResponse, error)
	CreateTicket(context.Context, *CreateTicketRequest) (*CreateTicketResponse, error)
	GetTicket(context.Context, *GetTicketRequest) (*GetTicketResponse, error)
	GetTickets(context.Context, *GetTicketsRequest) (*GetTicketsResponse, error)
	UpdateTicketBasicInfo(context.Context, *UpdateTicketBasicInfoRequest) (*UpdateTicketBasicInfoResponse, error)
	DeleteTicket(context.Context, *DeleteTicketRequest) (*DeleteTicketResponse, error)
	UpdateTicketStage(context.Context, *UpdateTicketStageRequest) (*UpdateTicketStageResponse, error)
	UpdateTicketPriority(context.Context, *UpdateTicketPriorityRequest) (*UpdateTicketPriorityResponse, error)
	CloseTicket(context.Context, *CloseTicketRequest) (*CloseTicketResponse, error)
	mustEmbedUnimplementedKanbanServiceServer()
}

// UnimplementedKanbanServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKanbanServiceServer struct {
}

func (UnimplementedKanbanServiceServer) CreateStage(context.Context, *CreateStageRequest) (*CreateStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStage not implemented")
}
func (UnimplementedKanbanServiceServer) GetStage(context.Context, *GetStageRequest) (*GetStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStage not implemented")
}
func (UnimplementedKanbanServiceServer) GetStages(context.Context, *GetStagesRequest) (*GetStagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStages not implemented")
}
func (UnimplementedKanbanServiceServer) UpdateStage(context.Context, *UpdateStageRequest) (*UpdateStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStage not implemented")
}
func (UnimplementedKanbanServiceServer) DeleteStage(context.Context, *DeleteStageRequest) (*DeleteStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStage not implemented")
}
func (UnimplementedKanbanServiceServer) SwapStagesOrder(context.Context, *SwapStagesOrderRequest) (*SwapStagesOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapStagesOrder not implemented")
}
func (UnimplementedKanbanServiceServer) CreateTicket(context.Context, *CreateTicketRequest) (*CreateTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicket not implemented")
}
func (UnimplementedKanbanServiceServer) GetTicket(context.Context, *GetTicketRequest) (*GetTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicket not implemented")
}
func (UnimplementedKanbanServiceServer) GetTickets(context.Context, *GetTicketsRequest) (*GetTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTickets not implemented")
}
func (UnimplementedKanbanServiceServer) UpdateTicketBasicInfo(context.Context, *UpdateTicketBasicInfoRequest) (*UpdateTicketBasicInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTicketBasicInfo not implemented")
}
func (UnimplementedKanbanServiceServer) DeleteTicket(context.Context, *DeleteTicketRequest) (*DeleteTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicket not implemented")
}
func (UnimplementedKanbanServiceServer) UpdateTicketStage(context.Context, *UpdateTicketStageRequest) (*UpdateTicketStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTicketStage not implemented")
}
func (UnimplementedKanbanServiceServer) UpdateTicketPriority(context.Context, *UpdateTicketPriorityRequest) (*UpdateTicketPriorityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTicketPriority not implemented")
}
func (UnimplementedKanbanServiceServer) CloseTicket(context.Context, *CloseTicketRequest) (*CloseTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTicket not implemented")
}
func (UnimplementedKanbanServiceServer) mustEmbedUnimplementedKanbanServiceServer() {}

// UnsafeKanbanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KanbanServiceServer will
// result in compilation errors.
type UnsafeKanbanServiceServer interface {
	mustEmbedUnimplementedKanbanServiceServer()
}

func RegisterKanbanServiceServer(s grpc.ServiceRegistrar, srv KanbanServiceServer) {
	s.RegisterService(&KanbanService_ServiceDesc, srv)
}

func _KanbanService_CreateStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServiceServer).CreateStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanban.KanbanService/CreateStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServiceServer).CreateStage(ctx, req.(*CreateStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanService_GetStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServiceServer).GetStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanban.KanbanService/GetStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServiceServer).GetStage(ctx, req.(*GetStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanService_GetStages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServiceServer).GetStages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanban.KanbanService/GetStages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServiceServer).GetStages(ctx, req.(*GetStagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanService_UpdateStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServiceServer).UpdateStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanban.KanbanService/UpdateStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServiceServer).UpdateStage(ctx, req.(*UpdateStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanService_DeleteStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServiceServer).DeleteStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanban.KanbanService/DeleteStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServiceServer).DeleteStage(ctx, req.(*DeleteStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanService_SwapStagesOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwapStagesOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServiceServer).SwapStagesOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanban.KanbanService/SwapStagesOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServiceServer).SwapStagesOrder(ctx, req.(*SwapStagesOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanService_CreateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServiceServer).CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanban.KanbanService/CreateTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServiceServer).CreateTicket(ctx, req.(*CreateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanService_GetTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServiceServer).GetTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanban.KanbanService/GetTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServiceServer).GetTicket(ctx, req.(*GetTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanService_GetTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServiceServer).GetTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanban.KanbanService/GetTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServiceServer).GetTickets(ctx, req.(*GetTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanService_UpdateTicketBasicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTicketBasicInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServiceServer).UpdateTicketBasicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanban.KanbanService/UpdateTicketBasicInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServiceServer).UpdateTicketBasicInfo(ctx, req.(*UpdateTicketBasicInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanService_DeleteTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServiceServer).DeleteTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanban.KanbanService/DeleteTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServiceServer).DeleteTicket(ctx, req.(*DeleteTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanService_UpdateTicketStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTicketStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServiceServer).UpdateTicketStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanban.KanbanService/UpdateTicketStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServiceServer).UpdateTicketStage(ctx, req.(*UpdateTicketStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanService_UpdateTicketPriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTicketPriorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServiceServer).UpdateTicketPriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanban.KanbanService/UpdateTicketPriority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServiceServer).UpdateTicketPriority(ctx, req.(*UpdateTicketPriorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanService_CloseTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServiceServer).CloseTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanban.KanbanService/CloseTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServiceServer).CloseTicket(ctx, req.(*CloseTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KanbanService_ServiceDesc is the grpc.ServiceDesc for KanbanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KanbanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kanban.KanbanService",
	HandlerType: (*KanbanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStage",
			Handler:    _KanbanService_CreateStage_Handler,
		},
		{
			MethodName: "GetStage",
			Handler:    _KanbanService_GetStage_Handler,
		},
		{
			MethodName: "GetStages",
			Handler:    _KanbanService_GetStages_Handler,
		},
		{
			MethodName: "UpdateStage",
			Handler:    _KanbanService_UpdateStage_Handler,
		},
		{
			MethodName: "DeleteStage",
			Handler:    _KanbanService_DeleteStage_Handler,
		},
		{
			MethodName: "SwapStagesOrder",
			Handler:    _KanbanService_SwapStagesOrder_Handler,
		},
		{
			MethodName: "CreateTicket",
			Handler:    _KanbanService_CreateTicket_Handler,
		},
		{
			MethodName: "GetTicket",
			Handler:    _KanbanService_GetTicket_Handler,
		},
		{
			MethodName: "GetTickets",
			Handler:    _KanbanService_GetTickets_Handler,
		},
		{
			MethodName: "UpdateTicketBasicInfo",
			Handler:    _KanbanService_UpdateTicketBasicInfo_Handler,
		},
		{
			MethodName: "DeleteTicket",
			Handler:    _KanbanService_DeleteTicket_Handler,
		},
		{
			MethodName: "UpdateTicketStage",
			Handler:    _KanbanService_UpdateTicketStage_Handler,
		},
		{
			MethodName: "UpdateTicketPriority",
			Handler:    _KanbanService_UpdateTicketPriority_Handler,
		},
		{
			MethodName: "CloseTicket",
			Handler:    _KanbanService_CloseTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kanban.proto",
}
