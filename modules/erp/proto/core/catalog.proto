syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

package erp_catalog;

option go_package = "slamy/openBP/erp/catalog;erp_catalog_grpc";

message FieldSchema {
    message IntData{
    }

    message FloatData {
    }
    
    message StringData {
    }
    
    message BooleanData {
    }

    message TableData {
        repeated FieldSchema columns = 1;
    }

    message ObjectData {
        repeated FieldSchema fields = 1;
    }

    message CatalogLinkData {
        string catalogName = 1;
    }

    message CompoundCatalogLinkData {
        repeated string catalogNames = 1;
    }

    string name = 1;
    string publicName = 2;

    oneof schema {
        IntData intData = 10;
        FloatData floatData = 11;
        StringData stringData = 12;
        BooleanData booleanData = 13;
        TableData tableData = 14;
        ObjectData objectData = 15;
        CatalogLinkData catalogLinkData = 16;
    }
}

message Catalog {
    // Namespace where catalog is located
    string namespace = 1;
    // Private short name used only for development. Can not be changed after creation and always stays the same
    string name = 2;
    // Public name. Can be changed at any time and should be used when displaying catalog to the user
    string publicName = 3;
    // Entrty fields schema
    repeated FieldSchema fields = 4;

    // When catalog was creted
    google.protobuf.Timestamp created = 100;
    // When catalog was updated last time
    google.protobuf.Timestamp updated = 101;
    // Version of the catalog. After each update, version increases by 1
    int64 version = 102;
}

message CreateCatalogRequest {
    // Namespace to use
    string namespace = 1;
    // Private short name used only for development. Can not be changed after creation and always stays the same
    string name = 2;
    // Can be changed at any time and should be used when displaying catalog to the user
    string publicName = 3;
    // Entrty fields schema
    repeated FieldSchema fields = 4; 
}
message CreateCatalogResponse {
    Catalog catalog = 1;
}

message DeleteCatalogRequest {
    // Namespace to use
    string namespace = 1;
    // Catalog name
    string name = 2;
}
message DeleteCatalogResponse {
}

message UpdateCatalogRequest {
    // Namespace to use
    string namespace = 1;
    // Catalog name
    string name = 2;
    // Can be changed at any time and should be used when displaying catalog to the user
    string publicName = 3;
    // Entrty fields schema
    repeated FieldSchema fields = 4; 
}
message UpdateCatalogReponse {
    Catalog catalog = 1;
}

message GetCatalogRequest {
    // Namespace to use
    string namespace = 1;
    // Catalog name
    string name = 2;
    // Use cache or not. Greatly speeds up request if catalog is inside cache. Cache invalidates on updates, but still has very low chance to be inconsistent. Inconsistency occures on concurrent write-reads. Cocurrent reads are 100% safe. Incosistent cache will be removed after some period of time.
    bool useCache = 3;
}
message GetCatalogResponse {
    Catalog catalog = 1;
}

message GetCatalogIfChangedRequest {
    // Namespace to use
    string namespace = 1;
    // Catalog name
    string name = 2;
    // Only return catalog if current version is not same
    int64 version = 3;
    // Use cache or not. Greatly speeds up request if catalog is inside cache. Cache invalidates on updates, but still has very low chance to be inconsistent. Inconsistency occures on concurrent write-reads. Cocurrent reads are 100% safe. Incosistent cache will be removed after some period of time.
    bool useCache = 4;
}
message GetCatalogIfChangedResponse {
    oneof message {
        google.protobuf.NullValue null = 1;
        Catalog catalog = 2;
    }
}

message GetAllCatalogsRequest {
    // Namespace to use
    string namespace = 1;
    // Use cache or not. Greately increases speed. Cache invalidates on updates in this namespace, but still has very low chance to be inconsistent. Inconsistency occures on concurrent write-reads. Cocurrent reads are 100% safe. Incosistent cache will be removed after some period of time.
    bool useCache = 4;
}
message GetAllCatalogsResponse {
    repeated Catalog catalogs = 1;
}


service CatalogService {
    // Create new catalog
    rpc Create(CreateCatalogRequest) returns (CreateCatalogResponse) {};
    // Deletes catalog and all its entries
    rpc Delete(DeleteCatalogRequest) returns (DeleteCatalogResponse) {};
    // Updates catalog with new information
    rpc Update(UpdateCatalogRequest) returns (UpdateCatalogReponse) {};
    // Returns catalog by its name
    rpc Get(GetCatalogRequest) returns (GetCatalogResponse) {};
    // Returns catalog by its name only if provided version differs from the actual. In other case returns NULL. More optimized version, than Get
    rpc GetIfChanged(GetCatalogIfChangedRequest) returns (GetCatalogIfChangedResponse) {};
    // Streams list of all catalogs
    rpc GetAll(GetAllCatalogsRequest) returns (GetAllCatalogsResponse) {};
}

message CatalogEntry {
    // Namespace where catalog is located
    string namespace = 1;
    // Name of the entries catalog
    string catalog = 2;
    // Unique identifier of the entry in catalog
    string uuid = 3;

    // JSON encoded entry data
    bytes data = 4;

    // When entry was creted
    google.protobuf.Timestamp created = 100;
    // When entry was updated last time
    google.protobuf.Timestamp updated = 101;
    // Version of the entry. After each update, version increases by 1
    int64 version = 102;
}

message CreateCatalogEntryRequest {
    // Namespace where catalog is located
    string namespace = 1;
    // Name of the catalog where create entry
    string catalog = 2;
    // JSON encoded data, that will be added on entry creation
    bytes data = 3;
}
message CreateCatalogEntryResponse {
    CatalogEntry entry = 1;
}

message DeleteCatalogEntryRequest {
    // Namespace where catalog entry is located
    string namespace = 1;
    // Name of the catalog where delete entry
    string catalog = 2;
    // Unique identifier of the entry in this catalog
    string entry = 3;
}
message DeleteCatalogEntryResponse {

}

message UpdateCatalogEntryRequest {
    CatalogEntry entry = 1;
}
message UpdateCatalogEntryResponse {
    // Updated entry
    CatalogEntry entry = 1;
}

message GetCatalogEntryRequest {
    // Namespace where catalog entry is located
    string namespace = 1;
    // Name of the catalog where entry is located
    string catalog = 2;
    // Unique identifier of the entry in catalog
    string entry = 3;
}
message GetCatalogEntryResponse {
    CatalogEntry entry = 1;
}

message ListCatalogEntriesRequest {
    // Namespace where catalog entries are located
    string namespace = 1;
    // Name of the catalog where entries are located
    string catalog = 2;
    // How many values to skip before return. If you dont want to skip, use 0.
    int64 skip = 3;
    // How many values to return. Use 0 to ignore limit.
    int64 limit = 4;
}
message ListCatalogEntriesResponse {
    CatalogEntry entry = 1;
}

message CountCatalogEntriesRequest {
    // Namespace where catalog entries are located
    string namespace = 1;
    // Name of the catalog where entries are located
    string catalog = 2;
}
message CountCatalogEntriesResponse {
    // Number of entries in catalog
    int64 count = 1;
}

/*
message QueryCatalogEntriesRequest {
    // Name of the catalog to search
    string catalog = 1;

    // MongoDB compatible query in JSON format
    bytes query = 2;

    // How many values to skip before return. If you dont want to skip, use 0.
    google.protobuf.UInt64Value skip = 3;
    // How many values to return. Use 0 to ignore limit.
    google.protobuf.UInt64Value limit = 4;
}
message QueryCatalogEntriesResponse {
    CatalogEntry entry = 1;
}
*/

service CatalogEntryService {
    // Creates new entry in the specified catalog. Entry will receive uuid after successfull creation. Returns newly created entry
    rpc Create(CreateCatalogEntryRequest) returns (CreateCatalogEntryResponse) {};
    // Deletes catalog entry
    rpc Delete(DeleteCatalogEntryRequest) returns (DeleteCatalogEntryResponse) {};
    // Updates catalog entry with new data
    rpc Update(UpdateCatalogEntryRequest) returns (UpdateCatalogEntryResponse) {};
    // Get catalog entry. Uses cache and works much faster than Query operation
    rpc Get(GetCatalogEntryRequest) returns (GetCatalogEntryResponse) {};
    // List catalog entries.
    rpc List (ListCatalogEntriesRequest) returns (stream ListCatalogEntriesResponse) {};
    // Count catalog entries.
    rpc Count (CountCatalogEntriesRequest) returns (CountCatalogEntriesResponse) {};

    // Run custom query on catalog and get all the entries that satisfy parameters
    //rpc Query(QueryCatalogEntriesRequest) returns (QueryCatalogEntriesResponse) {};
}


message CatalogIndex {
    message IndexField {
        enum IndexType {
            HASHED=0;
            ASCENDING=1;
            DESCENDING=2;
        }

        string name = 1;
        IndexType type = 2;
    }

    // Namespace where catalog index is located
    string namespace = 1;
    // Catalog name
    string catalog = 2;
    // Unique name of the index
    string name = 3;
    // Information about field on wich index is applied
    repeated IndexField fields = 4;
    // Is this index unique for this catalog or not. If index unique, there will be no two entries with values that satisfy same position in index. Usefull for making unique values
    bool unique = 5;
}

message ListCatalogIndexesRequest {
    // Namespace to use
    string namespace = 1;
    // Catalog name
    string catalog = 2;
    // Use cache or not. Greately increases speed. Cache invalidates on updates in this catalog, but still has very low chance to be inconsistent. Inconsistency occures on concurrent write-reads. Cocurrent reads are 100% safe. Incosistent cache will be removed after some period of time.
    bool useCache = 4;
}
message ListCatalogIndexesResponse {
    repeated CatalogIndex indexes = 1;
}

message EnsureCatalogIndexRequest {
    // Namespace to use
    string namespace = 1;
    // Catalog on wich to ensure index
    string catalog = 2;
    // Index information
    CatalogIndex index = 3;
}
message EnsureCatalogIndexResponse {}

message RemoveCatalogIndexRequest {
    // Namespace to use
    string namespace = 1;
    // Catalog where to remove index
    string catalog = 2;
    // Index name to remove
    string index = 3;
}
message RemoveCatalogIndexResponse {}

service CatalogIndexService {
    // Lists all indexes in the catalog
    rpc ListIndexes(ListCatalogIndexesRequest) returns (ListCatalogIndexesResponse) {};
    // Creates or updates index in the catalog
    rpc EnsureIndex(EnsureCatalogIndexRequest) returns (EnsureCatalogIndexResponse) {};
    // Removes index from the catalog
    rpc RemoveIndex(RemoveCatalogIndexRequest) returns (RemoveCatalogIndexResponse) {};
}
