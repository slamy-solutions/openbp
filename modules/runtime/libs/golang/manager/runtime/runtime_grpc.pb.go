// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: runtime.proto

package runtime

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RuntimeServiceClient is the client API for RuntimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuntimeServiceClient interface {
	GetRuntimesForNamespace(ctx context.Context, in *GetRuntimesForNamespaceReqeust, opts ...grpc.CallOption) (*GetRuntimesForNamespaceResponse, error)
	GetRuntime(ctx context.Context, in *GetRuntimeRequest, opts ...grpc.CallOption) (*GetRuntimeResponse, error)
	CreateRuntime(ctx context.Context, in *CreateRuntimeRequest, opts ...grpc.CallOption) (*CreateRuntimeResponse, error)
	UpdateRuntime(ctx context.Context, in *UpdateRuntimeRequest, opts ...grpc.CallOption) (*UpdateRuntimeResponse, error)
	DeleteRuntime(ctx context.Context, in *DeleteRuntimeRequest, opts ...grpc.CallOption) (*DeleteRuntimeResponse, error)
	UploadRuntimeBinary(ctx context.Context, opts ...grpc.CallOption) (RuntimeService_UploadRuntimeBinaryClient, error)
	DownloadRuntimeBinary(ctx context.Context, in *DownloadRuntimeBinaryRequest, opts ...grpc.CallOption) (RuntimeService_DownloadRuntimeBinaryClient, error)
}

type runtimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRuntimeServiceClient(cc grpc.ClientConnInterface) RuntimeServiceClient {
	return &runtimeServiceClient{cc}
}

func (c *runtimeServiceClient) GetRuntimesForNamespace(ctx context.Context, in *GetRuntimesForNamespaceReqeust, opts ...grpc.CallOption) (*GetRuntimesForNamespaceResponse, error) {
	out := new(GetRuntimesForNamespaceResponse)
	err := c.cc.Invoke(ctx, "/runtime_manager_runtime.RuntimeService/GetRuntimesForNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetRuntime(ctx context.Context, in *GetRuntimeRequest, opts ...grpc.CallOption) (*GetRuntimeResponse, error) {
	out := new(GetRuntimeResponse)
	err := c.cc.Invoke(ctx, "/runtime_manager_runtime.RuntimeService/GetRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) CreateRuntime(ctx context.Context, in *CreateRuntimeRequest, opts ...grpc.CallOption) (*CreateRuntimeResponse, error) {
	out := new(CreateRuntimeResponse)
	err := c.cc.Invoke(ctx, "/runtime_manager_runtime.RuntimeService/CreateRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) UpdateRuntime(ctx context.Context, in *UpdateRuntimeRequest, opts ...grpc.CallOption) (*UpdateRuntimeResponse, error) {
	out := new(UpdateRuntimeResponse)
	err := c.cc.Invoke(ctx, "/runtime_manager_runtime.RuntimeService/UpdateRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) DeleteRuntime(ctx context.Context, in *DeleteRuntimeRequest, opts ...grpc.CallOption) (*DeleteRuntimeResponse, error) {
	out := new(DeleteRuntimeResponse)
	err := c.cc.Invoke(ctx, "/runtime_manager_runtime.RuntimeService/DeleteRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) UploadRuntimeBinary(ctx context.Context, opts ...grpc.CallOption) (RuntimeService_UploadRuntimeBinaryClient, error) {
	stream, err := c.cc.NewStream(ctx, &RuntimeService_ServiceDesc.Streams[0], "/runtime_manager_runtime.RuntimeService/UploadRuntimeBinary", opts...)
	if err != nil {
		return nil, err
	}
	x := &runtimeServiceUploadRuntimeBinaryClient{stream}
	return x, nil
}

type RuntimeService_UploadRuntimeBinaryClient interface {
	Send(*UploadRuntimeBinaryRequest) error
	CloseAndRecv() (*UploadRuntimeBinaryResponse, error)
	grpc.ClientStream
}

type runtimeServiceUploadRuntimeBinaryClient struct {
	grpc.ClientStream
}

func (x *runtimeServiceUploadRuntimeBinaryClient) Send(m *UploadRuntimeBinaryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *runtimeServiceUploadRuntimeBinaryClient) CloseAndRecv() (*UploadRuntimeBinaryResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadRuntimeBinaryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *runtimeServiceClient) DownloadRuntimeBinary(ctx context.Context, in *DownloadRuntimeBinaryRequest, opts ...grpc.CallOption) (RuntimeService_DownloadRuntimeBinaryClient, error) {
	stream, err := c.cc.NewStream(ctx, &RuntimeService_ServiceDesc.Streams[1], "/runtime_manager_runtime.RuntimeService/DownloadRuntimeBinary", opts...)
	if err != nil {
		return nil, err
	}
	x := &runtimeServiceDownloadRuntimeBinaryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RuntimeService_DownloadRuntimeBinaryClient interface {
	Recv() (*DownloadRuntimeBinaryResponse, error)
	grpc.ClientStream
}

type runtimeServiceDownloadRuntimeBinaryClient struct {
	grpc.ClientStream
}

func (x *runtimeServiceDownloadRuntimeBinaryClient) Recv() (*DownloadRuntimeBinaryResponse, error) {
	m := new(DownloadRuntimeBinaryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RuntimeServiceServer is the server API for RuntimeService service.
// All implementations must embed UnimplementedRuntimeServiceServer
// for forward compatibility
type RuntimeServiceServer interface {
	GetRuntimesForNamespace(context.Context, *GetRuntimesForNamespaceReqeust) (*GetRuntimesForNamespaceResponse, error)
	GetRuntime(context.Context, *GetRuntimeRequest) (*GetRuntimeResponse, error)
	CreateRuntime(context.Context, *CreateRuntimeRequest) (*CreateRuntimeResponse, error)
	UpdateRuntime(context.Context, *UpdateRuntimeRequest) (*UpdateRuntimeResponse, error)
	DeleteRuntime(context.Context, *DeleteRuntimeRequest) (*DeleteRuntimeResponse, error)
	UploadRuntimeBinary(RuntimeService_UploadRuntimeBinaryServer) error
	DownloadRuntimeBinary(*DownloadRuntimeBinaryRequest, RuntimeService_DownloadRuntimeBinaryServer) error
	mustEmbedUnimplementedRuntimeServiceServer()
}

// UnimplementedRuntimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRuntimeServiceServer struct {
}

func (UnimplementedRuntimeServiceServer) GetRuntimesForNamespace(context.Context, *GetRuntimesForNamespaceReqeust) (*GetRuntimesForNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuntimesForNamespace not implemented")
}
func (UnimplementedRuntimeServiceServer) GetRuntime(context.Context, *GetRuntimeRequest) (*GetRuntimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuntime not implemented")
}
func (UnimplementedRuntimeServiceServer) CreateRuntime(context.Context, *CreateRuntimeRequest) (*CreateRuntimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRuntime not implemented")
}
func (UnimplementedRuntimeServiceServer) UpdateRuntime(context.Context, *UpdateRuntimeRequest) (*UpdateRuntimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRuntime not implemented")
}
func (UnimplementedRuntimeServiceServer) DeleteRuntime(context.Context, *DeleteRuntimeRequest) (*DeleteRuntimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRuntime not implemented")
}
func (UnimplementedRuntimeServiceServer) UploadRuntimeBinary(RuntimeService_UploadRuntimeBinaryServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadRuntimeBinary not implemented")
}
func (UnimplementedRuntimeServiceServer) DownloadRuntimeBinary(*DownloadRuntimeBinaryRequest, RuntimeService_DownloadRuntimeBinaryServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadRuntimeBinary not implemented")
}
func (UnimplementedRuntimeServiceServer) mustEmbedUnimplementedRuntimeServiceServer() {}

// UnsafeRuntimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuntimeServiceServer will
// result in compilation errors.
type UnsafeRuntimeServiceServer interface {
	mustEmbedUnimplementedRuntimeServiceServer()
}

func RegisterRuntimeServiceServer(s grpc.ServiceRegistrar, srv RuntimeServiceServer) {
	s.RegisterService(&RuntimeService_ServiceDesc, srv)
}

func _RuntimeService_GetRuntimesForNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuntimesForNamespaceReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetRuntimesForNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runtime_manager_runtime.RuntimeService/GetRuntimesForNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetRuntimesForNamespace(ctx, req.(*GetRuntimesForNamespaceReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runtime_manager_runtime.RuntimeService/GetRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetRuntime(ctx, req.(*GetRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_CreateRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).CreateRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runtime_manager_runtime.RuntimeService/CreateRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).CreateRuntime(ctx, req.(*CreateRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_UpdateRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).UpdateRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runtime_manager_runtime.RuntimeService/UpdateRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).UpdateRuntime(ctx, req.(*UpdateRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_DeleteRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).DeleteRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runtime_manager_runtime.RuntimeService/DeleteRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).DeleteRuntime(ctx, req.(*DeleteRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_UploadRuntimeBinary_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RuntimeServiceServer).UploadRuntimeBinary(&runtimeServiceUploadRuntimeBinaryServer{stream})
}

type RuntimeService_UploadRuntimeBinaryServer interface {
	SendAndClose(*UploadRuntimeBinaryResponse) error
	Recv() (*UploadRuntimeBinaryRequest, error)
	grpc.ServerStream
}

type runtimeServiceUploadRuntimeBinaryServer struct {
	grpc.ServerStream
}

func (x *runtimeServiceUploadRuntimeBinaryServer) SendAndClose(m *UploadRuntimeBinaryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *runtimeServiceUploadRuntimeBinaryServer) Recv() (*UploadRuntimeBinaryRequest, error) {
	m := new(UploadRuntimeBinaryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RuntimeService_DownloadRuntimeBinary_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRuntimeBinaryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RuntimeServiceServer).DownloadRuntimeBinary(m, &runtimeServiceDownloadRuntimeBinaryServer{stream})
}

type RuntimeService_DownloadRuntimeBinaryServer interface {
	Send(*DownloadRuntimeBinaryResponse) error
	grpc.ServerStream
}

type runtimeServiceDownloadRuntimeBinaryServer struct {
	grpc.ServerStream
}

func (x *runtimeServiceDownloadRuntimeBinaryServer) Send(m *DownloadRuntimeBinaryResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RuntimeService_ServiceDesc is the grpc.ServiceDesc for RuntimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuntimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runtime_manager_runtime.RuntimeService",
	HandlerType: (*RuntimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRuntimesForNamespace",
			Handler:    _RuntimeService_GetRuntimesForNamespace_Handler,
		},
		{
			MethodName: "GetRuntime",
			Handler:    _RuntimeService_GetRuntime_Handler,
		},
		{
			MethodName: "CreateRuntime",
			Handler:    _RuntimeService_CreateRuntime_Handler,
		},
		{
			MethodName: "UpdateRuntime",
			Handler:    _RuntimeService_UpdateRuntime_Handler,
		},
		{
			MethodName: "DeleteRuntime",
			Handler:    _RuntimeService_DeleteRuntime_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadRuntimeBinary",
			Handler:       _RuntimeService_UploadRuntimeBinary_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadRuntimeBinary",
			Handler:       _RuntimeService_DownloadRuntimeBinary_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "runtime.proto",
}
