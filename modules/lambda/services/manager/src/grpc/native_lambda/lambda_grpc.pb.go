// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: lambda.proto

package native_lambda_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LambdaManagerServiceClient is the client API for LambdaManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LambdaManagerServiceClient interface {
	// Create new lambda
	Create(ctx context.Context, in *CreateLambdaRequest, opts ...grpc.CallOption) (*CreateLambdaResponse, error)
	// Deletes lambda
	Delete(ctx context.Context, in *DeleteLambdaRequest, opts ...grpc.CallOption) (*DeleteLambdaResponse, error)
	// Checks if lambda exists or not
	Exists(ctx context.Context, in *ExistsLambdaRequest, opts ...grpc.CallOption) (*ExistsLambdaResponse, error)
	// Get lambda information
	Get(ctx context.Context, in *GetLambdaRequest, opts ...grpc.CallOption) (*GetLambdaResponse, error)
	// Gets lambda bundle
	GetBundle(ctx context.Context, in *GetBundleRequest, opts ...grpc.CallOption) (*GetBundleResponse, error)
}

type lambdaManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLambdaManagerServiceClient(cc grpc.ClientConnInterface) LambdaManagerServiceClient {
	return &lambdaManagerServiceClient{cc}
}

func (c *lambdaManagerServiceClient) Create(ctx context.Context, in *CreateLambdaRequest, opts ...grpc.CallOption) (*CreateLambdaResponse, error) {
	out := new(CreateLambdaResponse)
	err := c.cc.Invoke(ctx, "/native_lambda.LambdaManagerService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lambdaManagerServiceClient) Delete(ctx context.Context, in *DeleteLambdaRequest, opts ...grpc.CallOption) (*DeleteLambdaResponse, error) {
	out := new(DeleteLambdaResponse)
	err := c.cc.Invoke(ctx, "/native_lambda.LambdaManagerService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lambdaManagerServiceClient) Exists(ctx context.Context, in *ExistsLambdaRequest, opts ...grpc.CallOption) (*ExistsLambdaResponse, error) {
	out := new(ExistsLambdaResponse)
	err := c.cc.Invoke(ctx, "/native_lambda.LambdaManagerService/Exists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lambdaManagerServiceClient) Get(ctx context.Context, in *GetLambdaRequest, opts ...grpc.CallOption) (*GetLambdaResponse, error) {
	out := new(GetLambdaResponse)
	err := c.cc.Invoke(ctx, "/native_lambda.LambdaManagerService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lambdaManagerServiceClient) GetBundle(ctx context.Context, in *GetBundleRequest, opts ...grpc.CallOption) (*GetBundleResponse, error) {
	out := new(GetBundleResponse)
	err := c.cc.Invoke(ctx, "/native_lambda.LambdaManagerService/GetBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LambdaManagerServiceServer is the server API for LambdaManagerService service.
// All implementations must embed UnimplementedLambdaManagerServiceServer
// for forward compatibility
type LambdaManagerServiceServer interface {
	// Create new lambda
	Create(context.Context, *CreateLambdaRequest) (*CreateLambdaResponse, error)
	// Deletes lambda
	Delete(context.Context, *DeleteLambdaRequest) (*DeleteLambdaResponse, error)
	// Checks if lambda exists or not
	Exists(context.Context, *ExistsLambdaRequest) (*ExistsLambdaResponse, error)
	// Get lambda information
	Get(context.Context, *GetLambdaRequest) (*GetLambdaResponse, error)
	// Gets lambda bundle
	GetBundle(context.Context, *GetBundleRequest) (*GetBundleResponse, error)
	mustEmbedUnimplementedLambdaManagerServiceServer()
}

// UnimplementedLambdaManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLambdaManagerServiceServer struct {
}

func (UnimplementedLambdaManagerServiceServer) Create(context.Context, *CreateLambdaRequest) (*CreateLambdaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedLambdaManagerServiceServer) Delete(context.Context, *DeleteLambdaRequest) (*DeleteLambdaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedLambdaManagerServiceServer) Exists(context.Context, *ExistsLambdaRequest) (*ExistsLambdaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedLambdaManagerServiceServer) Get(context.Context, *GetLambdaRequest) (*GetLambdaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedLambdaManagerServiceServer) GetBundle(context.Context, *GetBundleRequest) (*GetBundleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBundle not implemented")
}
func (UnimplementedLambdaManagerServiceServer) mustEmbedUnimplementedLambdaManagerServiceServer() {}

// UnsafeLambdaManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LambdaManagerServiceServer will
// result in compilation errors.
type UnsafeLambdaManagerServiceServer interface {
	mustEmbedUnimplementedLambdaManagerServiceServer()
}

func RegisterLambdaManagerServiceServer(s grpc.ServiceRegistrar, srv LambdaManagerServiceServer) {
	s.RegisterService(&LambdaManagerService_ServiceDesc, srv)
}

func _LambdaManagerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLambdaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LambdaManagerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_lambda.LambdaManagerService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LambdaManagerServiceServer).Create(ctx, req.(*CreateLambdaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LambdaManagerService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLambdaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LambdaManagerServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_lambda.LambdaManagerService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LambdaManagerServiceServer).Delete(ctx, req.(*DeleteLambdaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LambdaManagerService_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsLambdaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LambdaManagerServiceServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_lambda.LambdaManagerService/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LambdaManagerServiceServer).Exists(ctx, req.(*ExistsLambdaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LambdaManagerService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLambdaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LambdaManagerServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_lambda.LambdaManagerService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LambdaManagerServiceServer).Get(ctx, req.(*GetLambdaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LambdaManagerService_GetBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LambdaManagerServiceServer).GetBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_lambda.LambdaManagerService/GetBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LambdaManagerServiceServer).GetBundle(ctx, req.(*GetBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LambdaManagerService_ServiceDesc is the grpc.ServiceDesc for LambdaManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LambdaManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "native_lambda.LambdaManagerService",
	HandlerType: (*LambdaManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _LambdaManagerService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _LambdaManagerService_Delete_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _LambdaManagerService_Exists_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _LambdaManagerService_Get_Handler,
		},
		{
			MethodName: "GetBundle",
			Handler:    _LambdaManagerService_GetBundle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lambda.proto",
}

// LambdaEntrypointServiceClient is the client API for LambdaEntrypointService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LambdaEntrypointServiceClient interface {
	// Runs lambda and doesnt wait for response. Call will be resheduled on internal error, also it can be resheduled by lambda code.
	Call(ctx context.Context, in *CallLambdaRequest, opts ...grpc.CallOption) (*CallLambdaResponse, error)
	// Runs function and returns its response. Returns error if something went wrong during the execution.
	Execute(ctx context.Context, in *ExecuteLambdaRequest, opts ...grpc.CallOption) (*ExecuteLambdaResponse, error)
}

type lambdaEntrypointServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLambdaEntrypointServiceClient(cc grpc.ClientConnInterface) LambdaEntrypointServiceClient {
	return &lambdaEntrypointServiceClient{cc}
}

func (c *lambdaEntrypointServiceClient) Call(ctx context.Context, in *CallLambdaRequest, opts ...grpc.CallOption) (*CallLambdaResponse, error) {
	out := new(CallLambdaResponse)
	err := c.cc.Invoke(ctx, "/native_lambda.LambdaEntrypointService/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lambdaEntrypointServiceClient) Execute(ctx context.Context, in *ExecuteLambdaRequest, opts ...grpc.CallOption) (*ExecuteLambdaResponse, error) {
	out := new(ExecuteLambdaResponse)
	err := c.cc.Invoke(ctx, "/native_lambda.LambdaEntrypointService/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LambdaEntrypointServiceServer is the server API for LambdaEntrypointService service.
// All implementations must embed UnimplementedLambdaEntrypointServiceServer
// for forward compatibility
type LambdaEntrypointServiceServer interface {
	// Runs lambda and doesnt wait for response. Call will be resheduled on internal error, also it can be resheduled by lambda code.
	Call(context.Context, *CallLambdaRequest) (*CallLambdaResponse, error)
	// Runs function and returns its response. Returns error if something went wrong during the execution.
	Execute(context.Context, *ExecuteLambdaRequest) (*ExecuteLambdaResponse, error)
	mustEmbedUnimplementedLambdaEntrypointServiceServer()
}

// UnimplementedLambdaEntrypointServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLambdaEntrypointServiceServer struct {
}

func (UnimplementedLambdaEntrypointServiceServer) Call(context.Context, *CallLambdaRequest) (*CallLambdaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedLambdaEntrypointServiceServer) Execute(context.Context, *ExecuteLambdaRequest) (*ExecuteLambdaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedLambdaEntrypointServiceServer) mustEmbedUnimplementedLambdaEntrypointServiceServer() {
}

// UnsafeLambdaEntrypointServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LambdaEntrypointServiceServer will
// result in compilation errors.
type UnsafeLambdaEntrypointServiceServer interface {
	mustEmbedUnimplementedLambdaEntrypointServiceServer()
}

func RegisterLambdaEntrypointServiceServer(s grpc.ServiceRegistrar, srv LambdaEntrypointServiceServer) {
	s.RegisterService(&LambdaEntrypointService_ServiceDesc, srv)
}

func _LambdaEntrypointService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallLambdaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LambdaEntrypointServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_lambda.LambdaEntrypointService/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LambdaEntrypointServiceServer).Call(ctx, req.(*CallLambdaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LambdaEntrypointService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteLambdaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LambdaEntrypointServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_lambda.LambdaEntrypointService/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LambdaEntrypointServiceServer).Execute(ctx, req.(*ExecuteLambdaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LambdaEntrypointService_ServiceDesc is the grpc.ServiceDesc for LambdaEntrypointService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LambdaEntrypointService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "native_lambda.LambdaEntrypointService",
	HandlerType: (*LambdaEntrypointServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _LambdaEntrypointService_Call_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _LambdaEntrypointService_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lambda.proto",
}
