// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.12.4
// source: telemetry.proto

package telemetry

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HeartBeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Namespace of the device which emited the heart beat
	DeviceNamespace string `protobuf:"bytes,1,opt,name=deviceNamespace,proto3" json:"deviceNamespace,omitempty"`
	// Unique identifier of the device which emited the eart beat
	DeviceUUID string `protobuf:"bytes,2,opt,name=deviceUUID,proto3" json:"deviceUUID,omitempty"`
	// Timestamp when the eart beat was emited
	Timestamp *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *HeartBeat) Reset() {
	*x = HeartBeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeat) ProtoMessage() {}

func (x *HeartBeat) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeat.ProtoReflect.Descriptor instead.
func (*HeartBeat) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{0}
}

func (x *HeartBeat) GetDeviceNamespace() string {
	if x != nil {
		return x.DeviceNamespace
	}
	return ""
}

func (x *HeartBeat) GetDeviceUUID() string {
	if x != nil {
		return x.DeviceUUID
	}
	return ""
}

func (x *HeartBeat) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type CPUMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total CPU usage for all CPUs and cores. 0 - 100% range.
	Usage float32 `protobuf:"fixed32,1,opt,name=usage,proto3" json:"usage,omitempty"`
}

func (x *CPUMetric) Reset() {
	*x = CPUMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUMetric) ProtoMessage() {}

func (x *CPUMetric) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUMetric.ProtoReflect.Descriptor instead.
func (*CPUMetric) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{1}
}

func (x *CPUMetric) GetUsage() float32 {
	if x != nil {
		return x.Usage
	}
	return 0
}

type RAMMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total RAM usage. 0 - 100% range.
	Usage float32 `protobuf:"fixed32,2,opt,name=usage,proto3" json:"usage,omitempty"`
}

func (x *RAMMetric) Reset() {
	*x = RAMMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RAMMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RAMMetric) ProtoMessage() {}

func (x *RAMMetric) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RAMMetric.ProtoReflect.Descriptor instead.
func (*RAMMetric) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{2}
}

func (x *RAMMetric) GetUsage() float32 {
	if x != nil {
		return x.Usage
	}
	return 0
}

type GPUMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total memory usage of all GPUs. 0 - 100% range
	MemoryUsage float32 `protobuf:"fixed32,2,opt,name=memoryUsage,proto3" json:"memoryUsage,omitempty"`
}

func (x *GPUMetric) Reset() {
	*x = GPUMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUMetric) ProtoMessage() {}

func (x *GPUMetric) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUMetric.ProtoReflect.Descriptor instead.
func (*GPUMetric) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{3}
}

func (x *GPUMetric) GetMemoryUsage() float32 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

type NetworkMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total bytes download per second
	Download uint64 `protobuf:"varint,1,opt,name=download,proto3" json:"download,omitempty"`
	// Total bytes upload per second
	Upload uint64 `protobuf:"varint,2,opt,name=upload,proto3" json:"upload,omitempty"`
}

func (x *NetworkMetric) Reset() {
	*x = NetworkMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkMetric) ProtoMessage() {}

func (x *NetworkMetric) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkMetric.ProtoReflect.Descriptor instead.
func (*NetworkMetric) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{4}
}

func (x *NetworkMetric) GetDownload() uint64 {
	if x != nil {
		return x.Download
	}
	return 0
}

func (x *NetworkMetric) GetUpload() uint64 {
	if x != nil {
		return x.Upload
	}
	return 0
}

type StorageMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total bytes written per second
	Writes uint64 `protobuf:"varint,1,opt,name=writes,proto3" json:"writes,omitempty"`
	// Total bytes readed per second
	Reads uint64 `protobuf:"varint,2,opt,name=reads,proto3" json:"reads,omitempty"`
	// Total IO operations per second
	Iops uint64 `protobuf:"varint,3,opt,name=iops,proto3" json:"iops,omitempty"`
}

func (x *StorageMetric) Reset() {
	*x = StorageMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageMetric) ProtoMessage() {}

func (x *StorageMetric) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageMetric.ProtoReflect.Descriptor instead.
func (*StorageMetric) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{5}
}

func (x *StorageMetric) GetWrites() uint64 {
	if x != nil {
		return x.Writes
	}
	return 0
}

func (x *StorageMetric) GetReads() uint64 {
	if x != nil {
		return x.Reads
	}
	return 0
}

func (x *StorageMetric) GetIops() uint64 {
	if x != nil {
		return x.Iops
	}
	return 0
}

type BasicMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metric unique identifier
	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// Timestamp when the metrics was collected
	Timestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Namespace of the device which emited the metrics
	DeviceNamespace string `protobuf:"bytes,3,opt,name=deviceNamespace,proto3" json:"deviceNamespace,omitempty"`
	// Unique identifier of the device which emited the metrics
	DeviceUUID string `protobuf:"bytes,4,opt,name=deviceUUID,proto3" json:"deviceUUID,omitempty"`
	// Information about CPU of the device
	Cpu *CPUMetric `protobuf:"bytes,10,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// Information about RAM of the device
	Ram *RAMMetric `protobuf:"bytes,11,opt,name=ram,proto3" json:"ram,omitempty"`
	// Information about GPU of the device
	Gpu *GPUMetric `protobuf:"bytes,12,opt,name=gpu,proto3" json:"gpu,omitempty"`
	// Information about network usage of the device
	Network *NetworkMetric `protobuf:"bytes,13,opt,name=network,proto3" json:"network,omitempty"`
	// Information about persistant storage used by the device
	Storage *StorageMetric `protobuf:"bytes,14,opt,name=storage,proto3" json:"storage,omitempty"`
}

func (x *BasicMetrics) Reset() {
	*x = BasicMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicMetrics) ProtoMessage() {}

func (x *BasicMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicMetrics.ProtoReflect.Descriptor instead.
func (*BasicMetrics) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{6}
}

func (x *BasicMetrics) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *BasicMetrics) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *BasicMetrics) GetDeviceNamespace() string {
	if x != nil {
		return x.DeviceNamespace
	}
	return ""
}

func (x *BasicMetrics) GetDeviceUUID() string {
	if x != nil {
		return x.DeviceUUID
	}
	return ""
}

func (x *BasicMetrics) GetCpu() *CPUMetric {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *BasicMetrics) GetRam() *RAMMetric {
	if x != nil {
		return x.Ram
	}
	return nil
}

func (x *BasicMetrics) GetGpu() *GPUMetric {
	if x != nil {
		return x.Gpu
	}
	return nil
}

func (x *BasicMetrics) GetNetwork() *NetworkMetric {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *BasicMetrics) GetStorage() *StorageMetric {
	if x != nil {
		return x.Storage
	}
	return nil
}

type LogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Log entry unique identifier
	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// Timestamp when the log was emited
	Timestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Namespace of the device which emited the log
	DeviceNamespace string `protobuf:"bytes,3,opt,name=deviceNamespace,proto3" json:"deviceNamespace,omitempty"`
	// Unique identifier of the device which emited the log
	DeviceUUID string `protobuf:"bytes,4,opt,name=deviceUUID,proto3" json:"deviceUUID,omitempty"`
	// Log message
	Message []byte `protobuf:"bytes,10,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LogEntry) Reset() {
	*x = LogEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry) ProtoMessage() {}

func (x *LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntry.ProtoReflect.Descriptor instead.
func (*LogEntry) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{7}
}

func (x *LogEntry) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *LogEntry) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *LogEntry) GetDeviceNamespace() string {
	if x != nil {
		return x.DeviceNamespace
	}
	return ""
}

func (x *LogEntry) GetDeviceUUID() string {
	if x != nil {
		return x.DeviceUUID
	}
	return ""
}

func (x *LogEntry) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Event unique identifier. You can search for event only if it was persisted.
	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// Timestamp when the event was raise
	Timestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Namespace of the device which raised the event
	DeviceNamespace string `protobuf:"bytes,3,opt,name=deviceNamespace,proto3" json:"deviceNamespace,omitempty"`
	// Unique identifier of the device which raised the event
	DeviceUUID string `protobuf:"bytes,4,opt,name=deviceUUID,proto3" json:"deviceUUID,omitempty"`
	//
	//Envent unique identifiers defined by user application.
	//
	//Here is the list of the predefined identifiers:
	// openbp.start - devices started up
	// openbp.reboot - device went in reboot
	// openbp.shutdown - device went in shutdown
	// openbp.update.started - device started the update process
	// openbp.update.progress - progress of the device update
	// openbp.update.success - update successfullt finished
	// openbp.update.failed - update ended with error
	//
	//Identifiers can be added by user application.
	EventID string `protobuf:"bytes,10,opt,name=eventID,proto3" json:"eventID,omitempty"`
	// Arbitrary data sended together with the event. Should be in JSON format.
	Data []byte `protobuf:"bytes,11,opt,name=data,proto3" json:"data,omitempty"`
	// Indicates if the event was be persisted on the server. If not persistent, it will be deleted after delivering it to all the listeners.
	Persistent bool `protobuf:"varint,12,opt,name=persistent,proto3" json:"persistent,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{8}
}

func (x *Event) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Event) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Event) GetDeviceNamespace() string {
	if x != nil {
		return x.DeviceNamespace
	}
	return ""
}

func (x *Event) GetDeviceUUID() string {
	if x != nil {
		return x.DeviceUUID
	}
	return ""
}

func (x *Event) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

func (x *Event) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Event) GetPersistent() bool {
	if x != nil {
		return x.Persistent
	}
	return false
}

type SubmitBasicMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Batch of the metrics to be submitted
	Metrics []*SubmitBasicMetricsRequest_NewBasicMetricData `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *SubmitBasicMetricsRequest) Reset() {
	*x = SubmitBasicMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitBasicMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitBasicMetricsRequest) ProtoMessage() {}

func (x *SubmitBasicMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitBasicMetricsRequest.ProtoReflect.Descriptor instead.
func (*SubmitBasicMetricsRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{9}
}

func (x *SubmitBasicMetricsRequest) GetMetrics() []*SubmitBasicMetricsRequest_NewBasicMetricData {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type SubmitBasicMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uniques identifiers assigned to provided metrics
	AssignedUUIDs []string `protobuf:"bytes,1,rep,name=assignedUUIDs,proto3" json:"assignedUUIDs,omitempty"`
}

func (x *SubmitBasicMetricsResponse) Reset() {
	*x = SubmitBasicMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitBasicMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitBasicMetricsResponse) ProtoMessage() {}

func (x *SubmitBasicMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitBasicMetricsResponse.ProtoReflect.Descriptor instead.
func (*SubmitBasicMetricsResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{10}
}

func (x *SubmitBasicMetricsResponse) GetAssignedUUIDs() []string {
	if x != nil {
		return x.AssignedUUIDs
	}
	return nil
}

type SubmitLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Batch of log entries to be submited
	Entries []*SubmitLogRequest_NewLogEntryData `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *SubmitLogRequest) Reset() {
	*x = SubmitLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitLogRequest) ProtoMessage() {}

func (x *SubmitLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitLogRequest.ProtoReflect.Descriptor instead.
func (*SubmitLogRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{11}
}

func (x *SubmitLogRequest) GetEntries() []*SubmitLogRequest_NewLogEntryData {
	if x != nil {
		return x.Entries
	}
	return nil
}

type SubmitLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uniques identifiers assigned to provided log entries
	AssignedUUIDs []string `protobuf:"bytes,1,rep,name=assignedUUIDs,proto3" json:"assignedUUIDs,omitempty"`
}

func (x *SubmitLogResponse) Reset() {
	*x = SubmitLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitLogResponse) ProtoMessage() {}

func (x *SubmitLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitLogResponse.ProtoReflect.Descriptor instead.
func (*SubmitLogResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{12}
}

func (x *SubmitLogResponse) GetAssignedUUIDs() []string {
	if x != nil {
		return x.AssignedUUIDs
	}
	return nil
}

type SubmitEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Batch of events to be submited
	Events []*SubmitEventRequest_NewEventData `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *SubmitEventRequest) Reset() {
	*x = SubmitEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitEventRequest) ProtoMessage() {}

func (x *SubmitEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitEventRequest.ProtoReflect.Descriptor instead.
func (*SubmitEventRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{13}
}

func (x *SubmitEventRequest) GetEvents() []*SubmitEventRequest_NewEventData {
	if x != nil {
		return x.Events
	}
	return nil
}

type SubmitEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uniques identifiers assigned to provided events
	AssignedUUIDs []string `protobuf:"bytes,1,rep,name=assignedUUIDs,proto3" json:"assignedUUIDs,omitempty"`
}

func (x *SubmitEventResponse) Reset() {
	*x = SubmitEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitEventResponse) ProtoMessage() {}

func (x *SubmitEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitEventResponse.ProtoReflect.Descriptor instead.
func (*SubmitEventResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{14}
}

func (x *SubmitEventResponse) GetAssignedUUIDs() []string {
	if x != nil {
		return x.AssignedUUIDs
	}
	return nil
}

type SubmitBasicMetricsRequest_NewBasicMetricData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp when the metrics was collected
	Timestamp *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Namespace of the device which emited the metrics
	DeviceNamespace string `protobuf:"bytes,2,opt,name=deviceNamespace,proto3" json:"deviceNamespace,omitempty"`
	// Unique identifier of the device which emited the metrics
	DeviceUUID string `protobuf:"bytes,3,opt,name=deviceUUID,proto3" json:"deviceUUID,omitempty"`
	// Information about CPU of the device
	Cpu *CPUMetric `protobuf:"bytes,10,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// Information about RAM of the device
	Ram *RAMMetric `protobuf:"bytes,11,opt,name=ram,proto3" json:"ram,omitempty"`
	// Information about GPU of the device
	Gpu *GPUMetric `protobuf:"bytes,12,opt,name=gpu,proto3" json:"gpu,omitempty"`
	// Information about network usage of the device
	Network *NetworkMetric `protobuf:"bytes,13,opt,name=network,proto3" json:"network,omitempty"`
	// Information about persistant storage used by the device
	Storage *StorageMetric `protobuf:"bytes,14,opt,name=storage,proto3" json:"storage,omitempty"`
}

func (x *SubmitBasicMetricsRequest_NewBasicMetricData) Reset() {
	*x = SubmitBasicMetricsRequest_NewBasicMetricData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitBasicMetricsRequest_NewBasicMetricData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitBasicMetricsRequest_NewBasicMetricData) ProtoMessage() {}

func (x *SubmitBasicMetricsRequest_NewBasicMetricData) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitBasicMetricsRequest_NewBasicMetricData.ProtoReflect.Descriptor instead.
func (*SubmitBasicMetricsRequest_NewBasicMetricData) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{9, 0}
}

func (x *SubmitBasicMetricsRequest_NewBasicMetricData) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SubmitBasicMetricsRequest_NewBasicMetricData) GetDeviceNamespace() string {
	if x != nil {
		return x.DeviceNamespace
	}
	return ""
}

func (x *SubmitBasicMetricsRequest_NewBasicMetricData) GetDeviceUUID() string {
	if x != nil {
		return x.DeviceUUID
	}
	return ""
}

func (x *SubmitBasicMetricsRequest_NewBasicMetricData) GetCpu() *CPUMetric {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *SubmitBasicMetricsRequest_NewBasicMetricData) GetRam() *RAMMetric {
	if x != nil {
		return x.Ram
	}
	return nil
}

func (x *SubmitBasicMetricsRequest_NewBasicMetricData) GetGpu() *GPUMetric {
	if x != nil {
		return x.Gpu
	}
	return nil
}

func (x *SubmitBasicMetricsRequest_NewBasicMetricData) GetNetwork() *NetworkMetric {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *SubmitBasicMetricsRequest_NewBasicMetricData) GetStorage() *StorageMetric {
	if x != nil {
		return x.Storage
	}
	return nil
}

type SubmitLogRequest_NewLogEntryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp when the log was emited
	Timestamp *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Namespace of the device which emited the log
	DeviceNamespace string `protobuf:"bytes,2,opt,name=deviceNamespace,proto3" json:"deviceNamespace,omitempty"`
	// Unique identifier of the device which emited the log
	DeviceUUID string `protobuf:"bytes,3,opt,name=deviceUUID,proto3" json:"deviceUUID,omitempty"`
	// Log message
	Message []byte `protobuf:"bytes,10,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SubmitLogRequest_NewLogEntryData) Reset() {
	*x = SubmitLogRequest_NewLogEntryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitLogRequest_NewLogEntryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitLogRequest_NewLogEntryData) ProtoMessage() {}

func (x *SubmitLogRequest_NewLogEntryData) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitLogRequest_NewLogEntryData.ProtoReflect.Descriptor instead.
func (*SubmitLogRequest_NewLogEntryData) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{11, 0}
}

func (x *SubmitLogRequest_NewLogEntryData) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SubmitLogRequest_NewLogEntryData) GetDeviceNamespace() string {
	if x != nil {
		return x.DeviceNamespace
	}
	return ""
}

func (x *SubmitLogRequest_NewLogEntryData) GetDeviceUUID() string {
	if x != nil {
		return x.DeviceUUID
	}
	return ""
}

func (x *SubmitLogRequest_NewLogEntryData) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type SubmitEventRequest_NewEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp when the event was raise
	Timestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Namespace of the device which raised the event
	DeviceNamespace string `protobuf:"bytes,3,opt,name=deviceNamespace,proto3" json:"deviceNamespace,omitempty"`
	// Unique identifier of the device which raised the event
	DeviceUUID string `protobuf:"bytes,4,opt,name=deviceUUID,proto3" json:"deviceUUID,omitempty"`
	//
	//Envent unique identifiers defined by user application.
	//
	//Here is the list of the predefined identifiers:
	// openbp.start - devices started up
	// openbp.reboot - device went in reboot
	// openbp.shutdown - device went in shutdown
	// openbp.update.started - device started the update process
	// openbp.update.progress - progress of the device update
	// openbp.update.success - update successfullt finished
	// openbp.update.failed - update ended with error
	//
	//Identifiers can be added by user application.
	EventID string `protobuf:"bytes,10,opt,name=eventID,proto3" json:"eventID,omitempty"`
	// Arbitrary data sended together with the event. Should be in JSON format.
	Data []byte `protobuf:"bytes,11,opt,name=data,proto3" json:"data,omitempty"`
	// Indicates if the event will be persisted on the server. If not persistent, it will be deleted after delivering it to all the listeners.
	Persistent bool `protobuf:"varint,12,opt,name=persistent,proto3" json:"persistent,omitempty"`
}

func (x *SubmitEventRequest_NewEventData) Reset() {
	*x = SubmitEventRequest_NewEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitEventRequest_NewEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitEventRequest_NewEventData) ProtoMessage() {}

func (x *SubmitEventRequest_NewEventData) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitEventRequest_NewEventData.ProtoReflect.Descriptor instead.
func (*SubmitEventRequest_NewEventData) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{13, 0}
}

func (x *SubmitEventRequest_NewEventData) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SubmitEventRequest_NewEventData) GetDeviceNamespace() string {
	if x != nil {
		return x.DeviceNamespace
	}
	return ""
}

func (x *SubmitEventRequest_NewEventData) GetDeviceUUID() string {
	if x != nil {
		return x.DeviceUUID
	}
	return ""
}

func (x *SubmitEventRequest_NewEventData) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

func (x *SubmitEventRequest_NewEventData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SubmitEventRequest_NewEventData) GetPersistent() bool {
	if x != nil {
		return x.Persistent
	}
	return false
}

var File_telemetry_proto protoreflect.FileDescriptor

var file_telemetry_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x01, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x42, 0x65, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x21, 0x0a, 0x09, 0x43, 0x50, 0x55, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0x21, 0x0a, 0x09, 0x52,
	0x41, 0x4d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2d,
	0x0a, 0x09, 0x47, 0x50, 0x55, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0x43, 0x0a,
	0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x51, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x69, 0x6f, 0x70, 0x73, 0x22, 0xb3, 0x03, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x2f,
	0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f,
	0x74, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x43, 0x50, 0x55, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12,
	0x2f, 0x0a, 0x03, 0x72, 0x61, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69,
	0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x52, 0x41, 0x4d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x03, 0x72, 0x61, 0x6d,
	0x12, 0x2f, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x47, 0x50, 0x55, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x03, 0x67, 0x70,
	0x75, 0x12, 0x3b, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x3b,
	0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x08,
	0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x05, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x9f, 0x04, 0x0a, 0x19, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x69, 0x6f, 0x74, 0x5f,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x77, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x1a, 0xa5, 0x03, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12,
	0x2f, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69,
	0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x43, 0x50, 0x55, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x03, 0x63, 0x70, 0x75,
	0x12, 0x2f, 0x0a, 0x03, 0x72, 0x61, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x52, 0x41, 0x4d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x03, 0x72, 0x61,
	0x6d, 0x12, 0x2f, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x47, 0x50, 0x55, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x03, 0x67,
	0x70, 0x75, 0x12, 0x3b, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x3b, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0x42, 0x0a, 0x1a,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x55, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x55, 0x49, 0x44, 0x73,
	0x22, 0x94, 0x02, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x77,
	0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0xaf, 0x01, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x4c, 0x6f, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x39, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x55, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x55, 0x49,
	0x44, 0x73, 0x22, 0xc4, 0x02, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f, 0x74, 0x5f,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4e, 0x65, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0xe0, 0x01, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x3b, 0x0a, 0x13, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x55, 0x49, 0x44,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x55, 0x55, 0x49, 0x44, 0x73, 0x32, 0xc1, 0x02, 0x0a, 0x10, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x12, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x2d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x58, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x24, 0x2e,
	0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0b, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x69, 0x6f, 0x74, 0x5f,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2c, 0x5a, 0x2a, 0x73, 0x6c,
	0x61, 0x6d, 0x79, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x45, 0x52, 0x50, 0x2f, 0x69, 0x6f, 0x74, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x3b, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_telemetry_proto_rawDescOnce sync.Once
	file_telemetry_proto_rawDescData = file_telemetry_proto_rawDesc
)

func file_telemetry_proto_rawDescGZIP() []byte {
	file_telemetry_proto_rawDescOnce.Do(func() {
		file_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(file_telemetry_proto_rawDescData)
	})
	return file_telemetry_proto_rawDescData
}

var file_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_telemetry_proto_goTypes = []interface{}{
	(*HeartBeat)(nil),                                    // 0: iot_core_telemetry.HeartBeat
	(*CPUMetric)(nil),                                    // 1: iot_core_telemetry.CPUMetric
	(*RAMMetric)(nil),                                    // 2: iot_core_telemetry.RAMMetric
	(*GPUMetric)(nil),                                    // 3: iot_core_telemetry.GPUMetric
	(*NetworkMetric)(nil),                                // 4: iot_core_telemetry.NetworkMetric
	(*StorageMetric)(nil),                                // 5: iot_core_telemetry.StorageMetric
	(*BasicMetrics)(nil),                                 // 6: iot_core_telemetry.BasicMetrics
	(*LogEntry)(nil),                                     // 7: iot_core_telemetry.LogEntry
	(*Event)(nil),                                        // 8: iot_core_telemetry.Event
	(*SubmitBasicMetricsRequest)(nil),                    // 9: iot_core_telemetry.SubmitBasicMetricsRequest
	(*SubmitBasicMetricsResponse)(nil),                   // 10: iot_core_telemetry.SubmitBasicMetricsResponse
	(*SubmitLogRequest)(nil),                             // 11: iot_core_telemetry.SubmitLogRequest
	(*SubmitLogResponse)(nil),                            // 12: iot_core_telemetry.SubmitLogResponse
	(*SubmitEventRequest)(nil),                           // 13: iot_core_telemetry.SubmitEventRequest
	(*SubmitEventResponse)(nil),                          // 14: iot_core_telemetry.SubmitEventResponse
	(*SubmitBasicMetricsRequest_NewBasicMetricData)(nil), // 15: iot_core_telemetry.SubmitBasicMetricsRequest.NewBasicMetricData
	(*SubmitLogRequest_NewLogEntryData)(nil),             // 16: iot_core_telemetry.SubmitLogRequest.NewLogEntryData
	(*SubmitEventRequest_NewEventData)(nil),              // 17: iot_core_telemetry.SubmitEventRequest.NewEventData
	(*timestamp.Timestamp)(nil),                          // 18: google.protobuf.Timestamp
}
var file_telemetry_proto_depIdxs = []int32{
	18, // 0: iot_core_telemetry.HeartBeat.timestamp:type_name -> google.protobuf.Timestamp
	18, // 1: iot_core_telemetry.BasicMetrics.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 2: iot_core_telemetry.BasicMetrics.cpu:type_name -> iot_core_telemetry.CPUMetric
	2,  // 3: iot_core_telemetry.BasicMetrics.ram:type_name -> iot_core_telemetry.RAMMetric
	3,  // 4: iot_core_telemetry.BasicMetrics.gpu:type_name -> iot_core_telemetry.GPUMetric
	4,  // 5: iot_core_telemetry.BasicMetrics.network:type_name -> iot_core_telemetry.NetworkMetric
	5,  // 6: iot_core_telemetry.BasicMetrics.storage:type_name -> iot_core_telemetry.StorageMetric
	18, // 7: iot_core_telemetry.LogEntry.timestamp:type_name -> google.protobuf.Timestamp
	18, // 8: iot_core_telemetry.Event.timestamp:type_name -> google.protobuf.Timestamp
	15, // 9: iot_core_telemetry.SubmitBasicMetricsRequest.metrics:type_name -> iot_core_telemetry.SubmitBasicMetricsRequest.NewBasicMetricData
	16, // 10: iot_core_telemetry.SubmitLogRequest.entries:type_name -> iot_core_telemetry.SubmitLogRequest.NewLogEntryData
	17, // 11: iot_core_telemetry.SubmitEventRequest.events:type_name -> iot_core_telemetry.SubmitEventRequest.NewEventData
	18, // 12: iot_core_telemetry.SubmitBasicMetricsRequest.NewBasicMetricData.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 13: iot_core_telemetry.SubmitBasicMetricsRequest.NewBasicMetricData.cpu:type_name -> iot_core_telemetry.CPUMetric
	2,  // 14: iot_core_telemetry.SubmitBasicMetricsRequest.NewBasicMetricData.ram:type_name -> iot_core_telemetry.RAMMetric
	3,  // 15: iot_core_telemetry.SubmitBasicMetricsRequest.NewBasicMetricData.gpu:type_name -> iot_core_telemetry.GPUMetric
	4,  // 16: iot_core_telemetry.SubmitBasicMetricsRequest.NewBasicMetricData.network:type_name -> iot_core_telemetry.NetworkMetric
	5,  // 17: iot_core_telemetry.SubmitBasicMetricsRequest.NewBasicMetricData.storage:type_name -> iot_core_telemetry.StorageMetric
	18, // 18: iot_core_telemetry.SubmitLogRequest.NewLogEntryData.timestamp:type_name -> google.protobuf.Timestamp
	18, // 19: iot_core_telemetry.SubmitEventRequest.NewEventData.timestamp:type_name -> google.protobuf.Timestamp
	9,  // 20: iot_core_telemetry.TelemetryService.SubmitBasicMetrics:input_type -> iot_core_telemetry.SubmitBasicMetricsRequest
	11, // 21: iot_core_telemetry.TelemetryService.SubmitLog:input_type -> iot_core_telemetry.SubmitLogRequest
	13, // 22: iot_core_telemetry.TelemetryService.SubmitEvent:input_type -> iot_core_telemetry.SubmitEventRequest
	10, // 23: iot_core_telemetry.TelemetryService.SubmitBasicMetrics:output_type -> iot_core_telemetry.SubmitBasicMetricsResponse
	12, // 24: iot_core_telemetry.TelemetryService.SubmitLog:output_type -> iot_core_telemetry.SubmitLogResponse
	14, // 25: iot_core_telemetry.TelemetryService.SubmitEvent:output_type -> iot_core_telemetry.SubmitEventResponse
	23, // [23:26] is the sub-list for method output_type
	20, // [20:23] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_telemetry_proto_init() }
func file_telemetry_proto_init() {
	if File_telemetry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_telemetry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartBeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RAMMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPUMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitBasicMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitBasicMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitBasicMetricsRequest_NewBasicMetricData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitLogRequest_NewLogEntryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitEventRequest_NewEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_telemetry_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_telemetry_proto_goTypes,
		DependencyIndexes: file_telemetry_proto_depIdxs,
		MessageInfos:      file_telemetry_proto_msgTypes,
	}.Build()
	File_telemetry_proto = out.File
	file_telemetry_proto_rawDesc = nil
	file_telemetry_proto_goTypes = nil
	file_telemetry_proto_depIdxs = nil
}
