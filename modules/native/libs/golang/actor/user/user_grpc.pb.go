// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActorUserServiceClient is the client API for ActorUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActorUserServiceClient interface {
	// Create new user and assign identity to it.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Get user by its unique identifier
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Get user by its login
	GetByLogin(ctx context.Context, in *GetByLoginRequest, opts ...grpc.CallOption) (*GetByLoginResponse, error)
	// Get user by the identity uuid that was assigned to it
	GetByIdentity(ctx context.Context, in *GetByIdentityRequest, opts ...grpc.CallOption) (*GetByIdentityResponse, error)
	// Update user information
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Delete user
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Get all users in the namespace.
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (ActorUserService_ListClient, error)
	// Searches for user using some "matching" string. Much faster than find operation. Searches for matches in login/fullName/email.
	// Matches may be not ideal and its not possible to predict how much users matched provided string.
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (ActorUserService_SearchClient, error)
}

type actorUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActorUserServiceClient(cc grpc.ClientConnInterface) ActorUserServiceClient {
	return &actorUserServiceClient{cc}
}

func (c *actorUserServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/native_actor_user.ActorUserService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorUserServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/native_actor_user.ActorUserService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorUserServiceClient) GetByLogin(ctx context.Context, in *GetByLoginRequest, opts ...grpc.CallOption) (*GetByLoginResponse, error) {
	out := new(GetByLoginResponse)
	err := c.cc.Invoke(ctx, "/native_actor_user.ActorUserService/GetByLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorUserServiceClient) GetByIdentity(ctx context.Context, in *GetByIdentityRequest, opts ...grpc.CallOption) (*GetByIdentityResponse, error) {
	out := new(GetByIdentityResponse)
	err := c.cc.Invoke(ctx, "/native_actor_user.ActorUserService/GetByIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorUserServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/native_actor_user.ActorUserService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorUserServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/native_actor_user.ActorUserService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorUserServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (ActorUserService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActorUserService_ServiceDesc.Streams[0], "/native_actor_user.ActorUserService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &actorUserServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActorUserService_ListClient interface {
	Recv() (*ListResponse, error)
	grpc.ClientStream
}

type actorUserServiceListClient struct {
	grpc.ClientStream
}

func (x *actorUserServiceListClient) Recv() (*ListResponse, error) {
	m := new(ListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actorUserServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (ActorUserService_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActorUserService_ServiceDesc.Streams[1], "/native_actor_user.ActorUserService/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &actorUserServiceSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActorUserService_SearchClient interface {
	Recv() (*SearchResponse, error)
	grpc.ClientStream
}

type actorUserServiceSearchClient struct {
	grpc.ClientStream
}

func (x *actorUserServiceSearchClient) Recv() (*SearchResponse, error) {
	m := new(SearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ActorUserServiceServer is the server API for ActorUserService service.
// All implementations must embed UnimplementedActorUserServiceServer
// for forward compatibility
type ActorUserServiceServer interface {
	// Create new user and assign identity to it.
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Get user by its unique identifier
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Get user by its login
	GetByLogin(context.Context, *GetByLoginRequest) (*GetByLoginResponse, error)
	// Get user by the identity uuid that was assigned to it
	GetByIdentity(context.Context, *GetByIdentityRequest) (*GetByIdentityResponse, error)
	// Update user information
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// Delete user
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// Get all users in the namespace.
	List(*ListRequest, ActorUserService_ListServer) error
	// Searches for user using some "matching" string. Much faster than find operation. Searches for matches in login/fullName/email.
	// Matches may be not ideal and its not possible to predict how much users matched provided string.
	Search(*SearchRequest, ActorUserService_SearchServer) error
	mustEmbedUnimplementedActorUserServiceServer()
}

// UnimplementedActorUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedActorUserServiceServer struct {
}

func (UnimplementedActorUserServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedActorUserServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedActorUserServiceServer) GetByLogin(context.Context, *GetByLoginRequest) (*GetByLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByLogin not implemented")
}
func (UnimplementedActorUserServiceServer) GetByIdentity(context.Context, *GetByIdentityRequest) (*GetByIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdentity not implemented")
}
func (UnimplementedActorUserServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedActorUserServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedActorUserServiceServer) List(*ListRequest, ActorUserService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedActorUserServiceServer) Search(*SearchRequest, ActorUserService_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedActorUserServiceServer) mustEmbedUnimplementedActorUserServiceServer() {}

// UnsafeActorUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActorUserServiceServer will
// result in compilation errors.
type UnsafeActorUserServiceServer interface {
	mustEmbedUnimplementedActorUserServiceServer()
}

func RegisterActorUserServiceServer(s grpc.ServiceRegistrar, srv ActorUserServiceServer) {
	s.RegisterService(&ActorUserService_ServiceDesc, srv)
}

func _ActorUserService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorUserServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_actor_user.ActorUserService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorUserServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActorUserService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorUserServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_actor_user.ActorUserService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorUserServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActorUserService_GetByLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorUserServiceServer).GetByLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_actor_user.ActorUserService/GetByLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorUserServiceServer).GetByLogin(ctx, req.(*GetByLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActorUserService_GetByIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorUserServiceServer).GetByIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_actor_user.ActorUserService/GetByIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorUserServiceServer).GetByIdentity(ctx, req.(*GetByIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActorUserService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorUserServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_actor_user.ActorUserService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorUserServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActorUserService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorUserServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_actor_user.ActorUserService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorUserServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActorUserService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActorUserServiceServer).List(m, &actorUserServiceListServer{stream})
}

type ActorUserService_ListServer interface {
	Send(*ListResponse) error
	grpc.ServerStream
}

type actorUserServiceListServer struct {
	grpc.ServerStream
}

func (x *actorUserServiceListServer) Send(m *ListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActorUserService_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActorUserServiceServer).Search(m, &actorUserServiceSearchServer{stream})
}

type ActorUserService_SearchServer interface {
	Send(*SearchResponse) error
	grpc.ServerStream
}

type actorUserServiceSearchServer struct {
	grpc.ServerStream
}

func (x *actorUserServiceSearchServer) Send(m *SearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ActorUserService_ServiceDesc is the grpc.ServiceDesc for ActorUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActorUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "native_actor_user.ActorUserService",
	HandlerType: (*ActorUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ActorUserService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ActorUserService_Get_Handler,
		},
		{
			MethodName: "GetByLogin",
			Handler:    _ActorUserService_GetByLogin_Handler,
		},
		{
			MethodName: "GetByIdentity",
			Handler:    _ActorUserService_GetByIdentity_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ActorUserService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ActorUserService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _ActorUserService_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Search",
			Handler:       _ActorUserService_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "user.proto",
}
