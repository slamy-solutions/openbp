// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: config.proto

package native_iam_configuration_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IAMConfigServiceClient is the client API for IAMConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IAMConfigServiceClient interface {
	Get(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigresponse, error)
	Set(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error)
}

type iAMConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIAMConfigServiceClient(cc grpc.ClientConnInterface) IAMConfigServiceClient {
	return &iAMConfigServiceClient{cc}
}

func (c *iAMConfigServiceClient) Get(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigresponse, error) {
	out := new(GetConfigresponse)
	err := c.cc.Invoke(ctx, "/native_iam_configuration.IAMConfigService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMConfigServiceClient) Set(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error) {
	out := new(SetConfigResponse)
	err := c.cc.Invoke(ctx, "/native_iam_configuration.IAMConfigService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IAMConfigServiceServer is the server API for IAMConfigService service.
// All implementations must embed UnimplementedIAMConfigServiceServer
// for forward compatibility
type IAMConfigServiceServer interface {
	Get(context.Context, *GetConfigRequest) (*GetConfigresponse, error)
	Set(context.Context, *SetConfigRequest) (*SetConfigResponse, error)
	mustEmbedUnimplementedIAMConfigServiceServer()
}

// UnimplementedIAMConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIAMConfigServiceServer struct {
}

func (UnimplementedIAMConfigServiceServer) Get(context.Context, *GetConfigRequest) (*GetConfigresponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedIAMConfigServiceServer) Set(context.Context, *SetConfigRequest) (*SetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedIAMConfigServiceServer) mustEmbedUnimplementedIAMConfigServiceServer() {}

// UnsafeIAMConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IAMConfigServiceServer will
// result in compilation errors.
type UnsafeIAMConfigServiceServer interface {
	mustEmbedUnimplementedIAMConfigServiceServer()
}

func RegisterIAMConfigServiceServer(s grpc.ServiceRegistrar, srv IAMConfigServiceServer) {
	s.RegisterService(&IAMConfigService_ServiceDesc, srv)
}

func _IAMConfigService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMConfigServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_configuration.IAMConfigService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMConfigServiceServer).Get(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_configuration.IAMConfigService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMConfigServiceServer).Set(ctx, req.(*SetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IAMConfigService_ServiceDesc is the grpc.ServiceDesc for IAMConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IAMConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "native_iam_configuration.IAMConfigService",
	HandlerType: (*IAMConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _IAMConfigService_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _IAMConfigService_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config.proto",
}
