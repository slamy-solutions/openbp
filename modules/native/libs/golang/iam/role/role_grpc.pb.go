// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: role.proto

package role

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IAMRoleServiceClient is the client API for IAMRoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IAMRoleServiceClient interface {
	// Create new role
	Create(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
	// Get role
	Get(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error)
	// Get multiple roles in one request.
	GetMultiple(ctx context.Context, in *GetMultipleRolesRequest, opts ...grpc.CallOption) (IAMRoleService_GetMultipleClient, error)
	// Delete role
	Delete(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	// Get role that is managed by service
	GetServiceManagedRole(ctx context.Context, in *GetServiceManagedRoleRequest, opts ...grpc.CallOption) (*GetServiceManagedRoleResponse, error)
	// Get one of the builtin roles
	GetBuiltInRole(ctx context.Context, in *GetBuiltInRoleRequest, opts ...grpc.CallOption) (*GetBuiltInRoleResponse, error)
	// Add policy to the role. If policy was already added - does nothing.
	AddPolicy(ctx context.Context, in *AddPolicyRequest, opts ...grpc.CallOption) (*AddPolicyResponse, error)
	// Removes policy from the role. If policy was already removed - does nothing.
	RemovePolicy(ctx context.Context, in *RemovePolicyRequest, opts ...grpc.CallOption) (*RemovePolicyResponse, error)
	Exist(ctx context.Context, in *ExistRoleRequest, opts ...grpc.CallOption) (*ExistRoleResponse, error)
}

type iAMRoleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIAMRoleServiceClient(cc grpc.ClientConnInterface) IAMRoleServiceClient {
	return &iAMRoleServiceClient{cc}
}

func (c *iAMRoleServiceClient) Create(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	out := new(CreateRoleResponse)
	err := c.cc.Invoke(ctx, "/native_iam_role.IAMRoleService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMRoleServiceClient) Get(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error) {
	out := new(GetRoleResponse)
	err := c.cc.Invoke(ctx, "/native_iam_role.IAMRoleService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMRoleServiceClient) GetMultiple(ctx context.Context, in *GetMultipleRolesRequest, opts ...grpc.CallOption) (IAMRoleService_GetMultipleClient, error) {
	stream, err := c.cc.NewStream(ctx, &IAMRoleService_ServiceDesc.Streams[0], "/native_iam_role.IAMRoleService/GetMultiple", opts...)
	if err != nil {
		return nil, err
	}
	x := &iAMRoleServiceGetMultipleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IAMRoleService_GetMultipleClient interface {
	Recv() (*GetMultipleRolesResponse, error)
	grpc.ClientStream
}

type iAMRoleServiceGetMultipleClient struct {
	grpc.ClientStream
}

func (x *iAMRoleServiceGetMultipleClient) Recv() (*GetMultipleRolesResponse, error) {
	m := new(GetMultipleRolesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iAMRoleServiceClient) Delete(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	out := new(DeleteRoleResponse)
	err := c.cc.Invoke(ctx, "/native_iam_role.IAMRoleService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMRoleServiceClient) GetServiceManagedRole(ctx context.Context, in *GetServiceManagedRoleRequest, opts ...grpc.CallOption) (*GetServiceManagedRoleResponse, error) {
	out := new(GetServiceManagedRoleResponse)
	err := c.cc.Invoke(ctx, "/native_iam_role.IAMRoleService/GetServiceManagedRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMRoleServiceClient) GetBuiltInRole(ctx context.Context, in *GetBuiltInRoleRequest, opts ...grpc.CallOption) (*GetBuiltInRoleResponse, error) {
	out := new(GetBuiltInRoleResponse)
	err := c.cc.Invoke(ctx, "/native_iam_role.IAMRoleService/GetBuiltInRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMRoleServiceClient) AddPolicy(ctx context.Context, in *AddPolicyRequest, opts ...grpc.CallOption) (*AddPolicyResponse, error) {
	out := new(AddPolicyResponse)
	err := c.cc.Invoke(ctx, "/native_iam_role.IAMRoleService/AddPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMRoleServiceClient) RemovePolicy(ctx context.Context, in *RemovePolicyRequest, opts ...grpc.CallOption) (*RemovePolicyResponse, error) {
	out := new(RemovePolicyResponse)
	err := c.cc.Invoke(ctx, "/native_iam_role.IAMRoleService/RemovePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMRoleServiceClient) Exist(ctx context.Context, in *ExistRoleRequest, opts ...grpc.CallOption) (*ExistRoleResponse, error) {
	out := new(ExistRoleResponse)
	err := c.cc.Invoke(ctx, "/native_iam_role.IAMRoleService/Exist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IAMRoleServiceServer is the server API for IAMRoleService service.
// All implementations must embed UnimplementedIAMRoleServiceServer
// for forward compatibility
type IAMRoleServiceServer interface {
	// Create new role
	Create(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	// Get role
	Get(context.Context, *GetRoleRequest) (*GetRoleResponse, error)
	// Get multiple roles in one request.
	GetMultiple(*GetMultipleRolesRequest, IAMRoleService_GetMultipleServer) error
	// Delete role
	Delete(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	// Get role that is managed by service
	GetServiceManagedRole(context.Context, *GetServiceManagedRoleRequest) (*GetServiceManagedRoleResponse, error)
	// Get one of the builtin roles
	GetBuiltInRole(context.Context, *GetBuiltInRoleRequest) (*GetBuiltInRoleResponse, error)
	// Add policy to the role. If policy was already added - does nothing.
	AddPolicy(context.Context, *AddPolicyRequest) (*AddPolicyResponse, error)
	// Removes policy from the role. If policy was already removed - does nothing.
	RemovePolicy(context.Context, *RemovePolicyRequest) (*RemovePolicyResponse, error)
	Exist(context.Context, *ExistRoleRequest) (*ExistRoleResponse, error)
	mustEmbedUnimplementedIAMRoleServiceServer()
}

// UnimplementedIAMRoleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIAMRoleServiceServer struct {
}

func (UnimplementedIAMRoleServiceServer) Create(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedIAMRoleServiceServer) Get(context.Context, *GetRoleRequest) (*GetRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedIAMRoleServiceServer) GetMultiple(*GetMultipleRolesRequest, IAMRoleService_GetMultipleServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMultiple not implemented")
}
func (UnimplementedIAMRoleServiceServer) Delete(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedIAMRoleServiceServer) GetServiceManagedRole(context.Context, *GetServiceManagedRoleRequest) (*GetServiceManagedRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceManagedRole not implemented")
}
func (UnimplementedIAMRoleServiceServer) GetBuiltInRole(context.Context, *GetBuiltInRoleRequest) (*GetBuiltInRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuiltInRole not implemented")
}
func (UnimplementedIAMRoleServiceServer) AddPolicy(context.Context, *AddPolicyRequest) (*AddPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPolicy not implemented")
}
func (UnimplementedIAMRoleServiceServer) RemovePolicy(context.Context, *RemovePolicyRequest) (*RemovePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePolicy not implemented")
}
func (UnimplementedIAMRoleServiceServer) Exist(context.Context, *ExistRoleRequest) (*ExistRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exist not implemented")
}
func (UnimplementedIAMRoleServiceServer) mustEmbedUnimplementedIAMRoleServiceServer() {}

// UnsafeIAMRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IAMRoleServiceServer will
// result in compilation errors.
type UnsafeIAMRoleServiceServer interface {
	mustEmbedUnimplementedIAMRoleServiceServer()
}

func RegisterIAMRoleServiceServer(s grpc.ServiceRegistrar, srv IAMRoleServiceServer) {
	s.RegisterService(&IAMRoleService_ServiceDesc, srv)
}

func _IAMRoleService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMRoleServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_role.IAMRoleService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMRoleServiceServer).Create(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMRoleService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMRoleServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_role.IAMRoleService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMRoleServiceServer).Get(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMRoleService_GetMultiple_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMultipleRolesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IAMRoleServiceServer).GetMultiple(m, &iAMRoleServiceGetMultipleServer{stream})
}

type IAMRoleService_GetMultipleServer interface {
	Send(*GetMultipleRolesResponse) error
	grpc.ServerStream
}

type iAMRoleServiceGetMultipleServer struct {
	grpc.ServerStream
}

func (x *iAMRoleServiceGetMultipleServer) Send(m *GetMultipleRolesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _IAMRoleService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMRoleServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_role.IAMRoleService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMRoleServiceServer).Delete(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMRoleService_GetServiceManagedRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceManagedRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMRoleServiceServer).GetServiceManagedRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_role.IAMRoleService/GetServiceManagedRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMRoleServiceServer).GetServiceManagedRole(ctx, req.(*GetServiceManagedRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMRoleService_GetBuiltInRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuiltInRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMRoleServiceServer).GetBuiltInRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_role.IAMRoleService/GetBuiltInRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMRoleServiceServer).GetBuiltInRole(ctx, req.(*GetBuiltInRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMRoleService_AddPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMRoleServiceServer).AddPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_role.IAMRoleService/AddPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMRoleServiceServer).AddPolicy(ctx, req.(*AddPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMRoleService_RemovePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMRoleServiceServer).RemovePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_role.IAMRoleService/RemovePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMRoleServiceServer).RemovePolicy(ctx, req.(*RemovePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMRoleService_Exist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMRoleServiceServer).Exist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_role.IAMRoleService/Exist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMRoleServiceServer).Exist(ctx, req.(*ExistRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IAMRoleService_ServiceDesc is the grpc.ServiceDesc for IAMRoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IAMRoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "native_iam_role.IAMRoleService",
	HandlerType: (*IAMRoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _IAMRoleService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _IAMRoleService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _IAMRoleService_Delete_Handler,
		},
		{
			MethodName: "GetServiceManagedRole",
			Handler:    _IAMRoleService_GetServiceManagedRole_Handler,
		},
		{
			MethodName: "GetBuiltInRole",
			Handler:    _IAMRoleService_GetBuiltInRole_Handler,
		},
		{
			MethodName: "AddPolicy",
			Handler:    _IAMRoleService_AddPolicy_Handler,
		},
		{
			MethodName: "RemovePolicy",
			Handler:    _IAMRoleService_RemovePolicy_Handler,
		},
		{
			MethodName: "Exist",
			Handler:    _IAMRoleService_Exist_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMultiple",
			Handler:       _IAMRoleService_GetMultiple_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "role.proto",
}
