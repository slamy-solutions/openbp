// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: oauth2.proto

package oauth2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IAMAuthenticationOAuth2ConfigServiceClient is the client API for IAMAuthenticationOAuth2ConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IAMAuthenticationOAuth2ConfigServiceClient interface {
	// Updates OAuth2 provider configuration. If configuration does not exist, then it is created.
	UpdateProviderConfig(ctx context.Context, in *UpdateProviderConfigRequest, opts ...grpc.CallOption) (*UpdateProviderConfigResponse, error)
	// Lists all OAuth2 provider configurations
	ListProviderConfigs(ctx context.Context, in *ListProviderConfigsRequest, opts ...grpc.CallOption) (*ListProviderConfigsResponse, error)
	// Lists all available (configured and enabled) OAuth2 providers
	GetAvailableProviders(ctx context.Context, in *GetAvailableProvidersRequest, opts ...grpc.CallOption) (*GetAvailableProvidersResponse, error)
}

type iAMAuthenticationOAuth2ConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIAMAuthenticationOAuth2ConfigServiceClient(cc grpc.ClientConnInterface) IAMAuthenticationOAuth2ConfigServiceClient {
	return &iAMAuthenticationOAuth2ConfigServiceClient{cc}
}

func (c *iAMAuthenticationOAuth2ConfigServiceClient) UpdateProviderConfig(ctx context.Context, in *UpdateProviderConfigRequest, opts ...grpc.CallOption) (*UpdateProviderConfigResponse, error) {
	out := new(UpdateProviderConfigResponse)
	err := c.cc.Invoke(ctx, "/native_iam_authentication_oauth2.IAMAuthenticationOAuth2ConfigService/UpdateProviderConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMAuthenticationOAuth2ConfigServiceClient) ListProviderConfigs(ctx context.Context, in *ListProviderConfigsRequest, opts ...grpc.CallOption) (*ListProviderConfigsResponse, error) {
	out := new(ListProviderConfigsResponse)
	err := c.cc.Invoke(ctx, "/native_iam_authentication_oauth2.IAMAuthenticationOAuth2ConfigService/ListProviderConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMAuthenticationOAuth2ConfigServiceClient) GetAvailableProviders(ctx context.Context, in *GetAvailableProvidersRequest, opts ...grpc.CallOption) (*GetAvailableProvidersResponse, error) {
	out := new(GetAvailableProvidersResponse)
	err := c.cc.Invoke(ctx, "/native_iam_authentication_oauth2.IAMAuthenticationOAuth2ConfigService/GetAvailableProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IAMAuthenticationOAuth2ConfigServiceServer is the server API for IAMAuthenticationOAuth2ConfigService service.
// All implementations must embed UnimplementedIAMAuthenticationOAuth2ConfigServiceServer
// for forward compatibility
type IAMAuthenticationOAuth2ConfigServiceServer interface {
	// Updates OAuth2 provider configuration. If configuration does not exist, then it is created.
	UpdateProviderConfig(context.Context, *UpdateProviderConfigRequest) (*UpdateProviderConfigResponse, error)
	// Lists all OAuth2 provider configurations
	ListProviderConfigs(context.Context, *ListProviderConfigsRequest) (*ListProviderConfigsResponse, error)
	// Lists all available (configured and enabled) OAuth2 providers
	GetAvailableProviders(context.Context, *GetAvailableProvidersRequest) (*GetAvailableProvidersResponse, error)
	mustEmbedUnimplementedIAMAuthenticationOAuth2ConfigServiceServer()
}

// UnimplementedIAMAuthenticationOAuth2ConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIAMAuthenticationOAuth2ConfigServiceServer struct {
}

func (UnimplementedIAMAuthenticationOAuth2ConfigServiceServer) UpdateProviderConfig(context.Context, *UpdateProviderConfigRequest) (*UpdateProviderConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProviderConfig not implemented")
}
func (UnimplementedIAMAuthenticationOAuth2ConfigServiceServer) ListProviderConfigs(context.Context, *ListProviderConfigsRequest) (*ListProviderConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProviderConfigs not implemented")
}
func (UnimplementedIAMAuthenticationOAuth2ConfigServiceServer) GetAvailableProviders(context.Context, *GetAvailableProvidersRequest) (*GetAvailableProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableProviders not implemented")
}
func (UnimplementedIAMAuthenticationOAuth2ConfigServiceServer) mustEmbedUnimplementedIAMAuthenticationOAuth2ConfigServiceServer() {
}

// UnsafeIAMAuthenticationOAuth2ConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IAMAuthenticationOAuth2ConfigServiceServer will
// result in compilation errors.
type UnsafeIAMAuthenticationOAuth2ConfigServiceServer interface {
	mustEmbedUnimplementedIAMAuthenticationOAuth2ConfigServiceServer()
}

func RegisterIAMAuthenticationOAuth2ConfigServiceServer(s grpc.ServiceRegistrar, srv IAMAuthenticationOAuth2ConfigServiceServer) {
	s.RegisterService(&IAMAuthenticationOAuth2ConfigService_ServiceDesc, srv)
}

func _IAMAuthenticationOAuth2ConfigService_UpdateProviderConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProviderConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthenticationOAuth2ConfigServiceServer).UpdateProviderConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_authentication_oauth2.IAMAuthenticationOAuth2ConfigService/UpdateProviderConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthenticationOAuth2ConfigServiceServer).UpdateProviderConfig(ctx, req.(*UpdateProviderConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMAuthenticationOAuth2ConfigService_ListProviderConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProviderConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthenticationOAuth2ConfigServiceServer).ListProviderConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_authentication_oauth2.IAMAuthenticationOAuth2ConfigService/ListProviderConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthenticationOAuth2ConfigServiceServer).ListProviderConfigs(ctx, req.(*ListProviderConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMAuthenticationOAuth2ConfigService_GetAvailableProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthenticationOAuth2ConfigServiceServer).GetAvailableProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_authentication_oauth2.IAMAuthenticationOAuth2ConfigService/GetAvailableProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthenticationOAuth2ConfigServiceServer).GetAvailableProviders(ctx, req.(*GetAvailableProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IAMAuthenticationOAuth2ConfigService_ServiceDesc is the grpc.ServiceDesc for IAMAuthenticationOAuth2ConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IAMAuthenticationOAuth2ConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "native_iam_authentication_oauth2.IAMAuthenticationOAuth2ConfigService",
	HandlerType: (*IAMAuthenticationOAuth2ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateProviderConfig",
			Handler:    _IAMAuthenticationOAuth2ConfigService_UpdateProviderConfig_Handler,
		},
		{
			MethodName: "ListProviderConfigs",
			Handler:    _IAMAuthenticationOAuth2ConfigService_ListProviderConfigs_Handler,
		},
		{
			MethodName: "GetAvailableProviders",
			Handler:    _IAMAuthenticationOAuth2ConfigService_GetAvailableProviders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oauth2.proto",
}

// IAMAuthenticationOAuth2ServiceClient is the client API for IAMAuthenticationOAuth2Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IAMAuthenticationOAuth2ServiceClient interface {
	// Authenticates identity using OAuth2 provider
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	// Registers identity using OAuth2 provider. After registration, identity can be authenticated using Authenticate method with this provider.
	RegisterProviderForIdentity(ctx context.Context, in *RegisterProviderForIdentityRequest, opts ...grpc.CallOption) (*RegisterProviderForIdentityResponse, error)
	// Forgets identity provider. After forgetting, identity can not be authenticated using Authenticate method with this provider.
	ForgetIdentityProvider(ctx context.Context, in *ForgetIdentityProviderRequest, opts ...grpc.CallOption) (*ForgetIdentityProviderResponse, error)
	// Lists all registered OAuth2 providers for identity
	GetRegisteredIdentityProviders(ctx context.Context, in *GetRegisteredIdentityProvidersRequest, opts ...grpc.CallOption) (*GetRegisteredIdentityProvidersResponse, error)
}

type iAMAuthenticationOAuth2ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIAMAuthenticationOAuth2ServiceClient(cc grpc.ClientConnInterface) IAMAuthenticationOAuth2ServiceClient {
	return &iAMAuthenticationOAuth2ServiceClient{cc}
}

func (c *iAMAuthenticationOAuth2ServiceClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, "/native_iam_authentication_oauth2.IAMAuthenticationOAuth2Service/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMAuthenticationOAuth2ServiceClient) RegisterProviderForIdentity(ctx context.Context, in *RegisterProviderForIdentityRequest, opts ...grpc.CallOption) (*RegisterProviderForIdentityResponse, error) {
	out := new(RegisterProviderForIdentityResponse)
	err := c.cc.Invoke(ctx, "/native_iam_authentication_oauth2.IAMAuthenticationOAuth2Service/RegisterProviderForIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMAuthenticationOAuth2ServiceClient) ForgetIdentityProvider(ctx context.Context, in *ForgetIdentityProviderRequest, opts ...grpc.CallOption) (*ForgetIdentityProviderResponse, error) {
	out := new(ForgetIdentityProviderResponse)
	err := c.cc.Invoke(ctx, "/native_iam_authentication_oauth2.IAMAuthenticationOAuth2Service/ForgetIdentityProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMAuthenticationOAuth2ServiceClient) GetRegisteredIdentityProviders(ctx context.Context, in *GetRegisteredIdentityProvidersRequest, opts ...grpc.CallOption) (*GetRegisteredIdentityProvidersResponse, error) {
	out := new(GetRegisteredIdentityProvidersResponse)
	err := c.cc.Invoke(ctx, "/native_iam_authentication_oauth2.IAMAuthenticationOAuth2Service/GetRegisteredIdentityProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IAMAuthenticationOAuth2ServiceServer is the server API for IAMAuthenticationOAuth2Service service.
// All implementations must embed UnimplementedIAMAuthenticationOAuth2ServiceServer
// for forward compatibility
type IAMAuthenticationOAuth2ServiceServer interface {
	// Authenticates identity using OAuth2 provider
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	// Registers identity using OAuth2 provider. After registration, identity can be authenticated using Authenticate method with this provider.
	RegisterProviderForIdentity(context.Context, *RegisterProviderForIdentityRequest) (*RegisterProviderForIdentityResponse, error)
	// Forgets identity provider. After forgetting, identity can not be authenticated using Authenticate method with this provider.
	ForgetIdentityProvider(context.Context, *ForgetIdentityProviderRequest) (*ForgetIdentityProviderResponse, error)
	// Lists all registered OAuth2 providers for identity
	GetRegisteredIdentityProviders(context.Context, *GetRegisteredIdentityProvidersRequest) (*GetRegisteredIdentityProvidersResponse, error)
	mustEmbedUnimplementedIAMAuthenticationOAuth2ServiceServer()
}

// UnimplementedIAMAuthenticationOAuth2ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIAMAuthenticationOAuth2ServiceServer struct {
}

func (UnimplementedIAMAuthenticationOAuth2ServiceServer) Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedIAMAuthenticationOAuth2ServiceServer) RegisterProviderForIdentity(context.Context, *RegisterProviderForIdentityRequest) (*RegisterProviderForIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterProviderForIdentity not implemented")
}
func (UnimplementedIAMAuthenticationOAuth2ServiceServer) ForgetIdentityProvider(context.Context, *ForgetIdentityProviderRequest) (*ForgetIdentityProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgetIdentityProvider not implemented")
}
func (UnimplementedIAMAuthenticationOAuth2ServiceServer) GetRegisteredIdentityProviders(context.Context, *GetRegisteredIdentityProvidersRequest) (*GetRegisteredIdentityProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegisteredIdentityProviders not implemented")
}
func (UnimplementedIAMAuthenticationOAuth2ServiceServer) mustEmbedUnimplementedIAMAuthenticationOAuth2ServiceServer() {
}

// UnsafeIAMAuthenticationOAuth2ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IAMAuthenticationOAuth2ServiceServer will
// result in compilation errors.
type UnsafeIAMAuthenticationOAuth2ServiceServer interface {
	mustEmbedUnimplementedIAMAuthenticationOAuth2ServiceServer()
}

func RegisterIAMAuthenticationOAuth2ServiceServer(s grpc.ServiceRegistrar, srv IAMAuthenticationOAuth2ServiceServer) {
	s.RegisterService(&IAMAuthenticationOAuth2Service_ServiceDesc, srv)
}

func _IAMAuthenticationOAuth2Service_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthenticationOAuth2ServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_authentication_oauth2.IAMAuthenticationOAuth2Service/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthenticationOAuth2ServiceServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMAuthenticationOAuth2Service_RegisterProviderForIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterProviderForIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthenticationOAuth2ServiceServer).RegisterProviderForIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_authentication_oauth2.IAMAuthenticationOAuth2Service/RegisterProviderForIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthenticationOAuth2ServiceServer).RegisterProviderForIdentity(ctx, req.(*RegisterProviderForIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMAuthenticationOAuth2Service_ForgetIdentityProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgetIdentityProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthenticationOAuth2ServiceServer).ForgetIdentityProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_authentication_oauth2.IAMAuthenticationOAuth2Service/ForgetIdentityProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthenticationOAuth2ServiceServer).ForgetIdentityProvider(ctx, req.(*ForgetIdentityProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMAuthenticationOAuth2Service_GetRegisteredIdentityProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegisteredIdentityProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthenticationOAuth2ServiceServer).GetRegisteredIdentityProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_authentication_oauth2.IAMAuthenticationOAuth2Service/GetRegisteredIdentityProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthenticationOAuth2ServiceServer).GetRegisteredIdentityProviders(ctx, req.(*GetRegisteredIdentityProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IAMAuthenticationOAuth2Service_ServiceDesc is the grpc.ServiceDesc for IAMAuthenticationOAuth2Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IAMAuthenticationOAuth2Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "native_iam_authentication_oauth2.IAMAuthenticationOAuth2Service",
	HandlerType: (*IAMAuthenticationOAuth2ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _IAMAuthenticationOAuth2Service_Authenticate_Handler,
		},
		{
			MethodName: "RegisterProviderForIdentity",
			Handler:    _IAMAuthenticationOAuth2Service_RegisterProviderForIdentity_Handler,
		},
		{
			MethodName: "ForgetIdentityProvider",
			Handler:    _IAMAuthenticationOAuth2Service_ForgetIdentityProvider_Handler,
		},
		{
			MethodName: "GetRegisteredIdentityProviders",
			Handler:    _IAMAuthenticationOAuth2Service_GetRegisteredIdentityProviders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oauth2.proto",
}
