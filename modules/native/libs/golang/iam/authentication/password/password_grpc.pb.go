// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: password.proto

package password

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IAMAuthenticationPasswordServiceClient is the client API for IAMAuthenticationPasswordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IAMAuthenticationPasswordServiceClient interface {
	// Tries to find identity and compare its password.
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	// Creates or updates identity password for authentification.
	CreateOrUpdate(ctx context.Context, in *CreateOrUpdateRequest, opts ...grpc.CallOption) (*CreateOrUpdateResponse, error)
	// Deletes idenity password. After this action, action can not be authentificated using password.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Checks if password authentification method is defined for specified entity
	Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
}

type iAMAuthenticationPasswordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIAMAuthenticationPasswordServiceClient(cc grpc.ClientConnInterface) IAMAuthenticationPasswordServiceClient {
	return &iAMAuthenticationPasswordServiceClient{cc}
}

func (c *iAMAuthenticationPasswordServiceClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, "/native_iam_authentication_password.IAMAuthenticationPasswordService/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMAuthenticationPasswordServiceClient) CreateOrUpdate(ctx context.Context, in *CreateOrUpdateRequest, opts ...grpc.CallOption) (*CreateOrUpdateResponse, error) {
	out := new(CreateOrUpdateResponse)
	err := c.cc.Invoke(ctx, "/native_iam_authentication_password.IAMAuthenticationPasswordService/CreateOrUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMAuthenticationPasswordServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/native_iam_authentication_password.IAMAuthenticationPasswordService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMAuthenticationPasswordServiceClient) Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, "/native_iam_authentication_password.IAMAuthenticationPasswordService/Exists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IAMAuthenticationPasswordServiceServer is the server API for IAMAuthenticationPasswordService service.
// All implementations must embed UnimplementedIAMAuthenticationPasswordServiceServer
// for forward compatibility
type IAMAuthenticationPasswordServiceServer interface {
	// Tries to find identity and compare its password.
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	// Creates or updates identity password for authentification.
	CreateOrUpdate(context.Context, *CreateOrUpdateRequest) (*CreateOrUpdateResponse, error)
	// Deletes idenity password. After this action, action can not be authentificated using password.
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// Checks if password authentification method is defined for specified entity
	Exists(context.Context, *ExistsRequest) (*ExistsResponse, error)
	mustEmbedUnimplementedIAMAuthenticationPasswordServiceServer()
}

// UnimplementedIAMAuthenticationPasswordServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIAMAuthenticationPasswordServiceServer struct {
}

func (UnimplementedIAMAuthenticationPasswordServiceServer) Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedIAMAuthenticationPasswordServiceServer) CreateOrUpdate(context.Context, *CreateOrUpdateRequest) (*CreateOrUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdate not implemented")
}
func (UnimplementedIAMAuthenticationPasswordServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedIAMAuthenticationPasswordServiceServer) Exists(context.Context, *ExistsRequest) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedIAMAuthenticationPasswordServiceServer) mustEmbedUnimplementedIAMAuthenticationPasswordServiceServer() {
}

// UnsafeIAMAuthenticationPasswordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IAMAuthenticationPasswordServiceServer will
// result in compilation errors.
type UnsafeIAMAuthenticationPasswordServiceServer interface {
	mustEmbedUnimplementedIAMAuthenticationPasswordServiceServer()
}

func RegisterIAMAuthenticationPasswordServiceServer(s grpc.ServiceRegistrar, srv IAMAuthenticationPasswordServiceServer) {
	s.RegisterService(&IAMAuthenticationPasswordService_ServiceDesc, srv)
}

func _IAMAuthenticationPasswordService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthenticationPasswordServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_authentication_password.IAMAuthenticationPasswordService/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthenticationPasswordServiceServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMAuthenticationPasswordService_CreateOrUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthenticationPasswordServiceServer).CreateOrUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_authentication_password.IAMAuthenticationPasswordService/CreateOrUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthenticationPasswordServiceServer).CreateOrUpdate(ctx, req.(*CreateOrUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMAuthenticationPasswordService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthenticationPasswordServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_authentication_password.IAMAuthenticationPasswordService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthenticationPasswordServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMAuthenticationPasswordService_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthenticationPasswordServiceServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_authentication_password.IAMAuthenticationPasswordService/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthenticationPasswordServiceServer).Exists(ctx, req.(*ExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IAMAuthenticationPasswordService_ServiceDesc is the grpc.ServiceDesc for IAMAuthenticationPasswordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IAMAuthenticationPasswordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "native_iam_authentication_password.IAMAuthenticationPasswordService",
	HandlerType: (*IAMAuthenticationPasswordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _IAMAuthenticationPasswordService_Authenticate_Handler,
		},
		{
			MethodName: "CreateOrUpdate",
			Handler:    _IAMAuthenticationPasswordService_CreateOrUpdate_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _IAMAuthenticationPasswordService_Delete_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _IAMAuthenticationPasswordService_Exists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "password.proto",
}
