// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: x509.proto

package x509

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IAMAuthenticationX509ServiceClient is the client API for IAMAuthenticationX509Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IAMAuthenticationX509ServiceClient interface {
	// Get root CA certificate and public key in DER format. It can be used to validate all the certificates created by this service
	GetRootCAInfo(ctx context.Context, in *GetRootCAInfoRequest, opts ...grpc.CallOption) (*GetRootCAInfoResponse, error)
	// Register public key for identity and generate x509 certificate for it. Sign certificate using internal CA.
	RegisterAndGenerate(ctx context.Context, in *RegisterAndGenerateRequest, opts ...grpc.CallOption) (*RegisterAndGenerateResponse, error)
	// Regenerate x509 certificate. Return new x509 certificate signed with CA.
	Regenerate(ctx context.Context, in *RegenerateRequest, opts ...grpc.CallOption) (*RegenerateResponse, error)
	// Get certificate information from RAW X509 certificate.
	ValidateAndGetFromRawX509(ctx context.Context, in *ValidateAndGetFromRawX509Request, opts ...grpc.CallOption) (*ValidateAndGetFromRawX509Response, error)
	// Get certificate information using its unique identifier
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Count all the registered certificates in the namespace
	Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// List all the registered certificates in the namespace
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (IAMAuthenticationX509Service_ListClient, error)
	// List all the registered certificates for specified identity
	CountForIdentity(ctx context.Context, in *CountForIdentityRequest, opts ...grpc.CallOption) (*CountForIdentityResponse, error)
	// List all the registered certificates for specified identity
	ListForIdentity(ctx context.Context, in *ListForIdentityRequest, opts ...grpc.CallOption) (IAMAuthenticationX509Service_ListForIdentityClient, error)
	// Update certificate information
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Delete certificate. Note, that previously generated X509 certificate is still valid. Thats why you have to check if they still exists and wasnt disabled.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Mark certificate as manually disabled. Disabled certificated cant be used.
	Disable(ctx context.Context, in *DisableRequest, opts ...grpc.CallOption) (*DisableResponse, error)
}

type iAMAuthenticationX509ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIAMAuthenticationX509ServiceClient(cc grpc.ClientConnInterface) IAMAuthenticationX509ServiceClient {
	return &iAMAuthenticationX509ServiceClient{cc}
}

func (c *iAMAuthenticationX509ServiceClient) GetRootCAInfo(ctx context.Context, in *GetRootCAInfoRequest, opts ...grpc.CallOption) (*GetRootCAInfoResponse, error) {
	out := new(GetRootCAInfoResponse)
	err := c.cc.Invoke(ctx, "/native_iam_authentication_x509.IAMAuthenticationX509Service/GetRootCAInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMAuthenticationX509ServiceClient) RegisterAndGenerate(ctx context.Context, in *RegisterAndGenerateRequest, opts ...grpc.CallOption) (*RegisterAndGenerateResponse, error) {
	out := new(RegisterAndGenerateResponse)
	err := c.cc.Invoke(ctx, "/native_iam_authentication_x509.IAMAuthenticationX509Service/RegisterAndGenerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMAuthenticationX509ServiceClient) Regenerate(ctx context.Context, in *RegenerateRequest, opts ...grpc.CallOption) (*RegenerateResponse, error) {
	out := new(RegenerateResponse)
	err := c.cc.Invoke(ctx, "/native_iam_authentication_x509.IAMAuthenticationX509Service/Regenerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMAuthenticationX509ServiceClient) ValidateAndGetFromRawX509(ctx context.Context, in *ValidateAndGetFromRawX509Request, opts ...grpc.CallOption) (*ValidateAndGetFromRawX509Response, error) {
	out := new(ValidateAndGetFromRawX509Response)
	err := c.cc.Invoke(ctx, "/native_iam_authentication_x509.IAMAuthenticationX509Service/ValidateAndGetFromRawX509", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMAuthenticationX509ServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/native_iam_authentication_x509.IAMAuthenticationX509Service/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMAuthenticationX509ServiceClient) Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/native_iam_authentication_x509.IAMAuthenticationX509Service/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMAuthenticationX509ServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (IAMAuthenticationX509Service_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &IAMAuthenticationX509Service_ServiceDesc.Streams[0], "/native_iam_authentication_x509.IAMAuthenticationX509Service/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &iAMAuthenticationX509ServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IAMAuthenticationX509Service_ListClient interface {
	Recv() (*ListResponse, error)
	grpc.ClientStream
}

type iAMAuthenticationX509ServiceListClient struct {
	grpc.ClientStream
}

func (x *iAMAuthenticationX509ServiceListClient) Recv() (*ListResponse, error) {
	m := new(ListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iAMAuthenticationX509ServiceClient) CountForIdentity(ctx context.Context, in *CountForIdentityRequest, opts ...grpc.CallOption) (*CountForIdentityResponse, error) {
	out := new(CountForIdentityResponse)
	err := c.cc.Invoke(ctx, "/native_iam_authentication_x509.IAMAuthenticationX509Service/CountForIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMAuthenticationX509ServiceClient) ListForIdentity(ctx context.Context, in *ListForIdentityRequest, opts ...grpc.CallOption) (IAMAuthenticationX509Service_ListForIdentityClient, error) {
	stream, err := c.cc.NewStream(ctx, &IAMAuthenticationX509Service_ServiceDesc.Streams[1], "/native_iam_authentication_x509.IAMAuthenticationX509Service/ListForIdentity", opts...)
	if err != nil {
		return nil, err
	}
	x := &iAMAuthenticationX509ServiceListForIdentityClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IAMAuthenticationX509Service_ListForIdentityClient interface {
	Recv() (*ListForIdentityResponse, error)
	grpc.ClientStream
}

type iAMAuthenticationX509ServiceListForIdentityClient struct {
	grpc.ClientStream
}

func (x *iAMAuthenticationX509ServiceListForIdentityClient) Recv() (*ListForIdentityResponse, error) {
	m := new(ListForIdentityResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iAMAuthenticationX509ServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/native_iam_authentication_x509.IAMAuthenticationX509Service/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMAuthenticationX509ServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/native_iam_authentication_x509.IAMAuthenticationX509Service/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMAuthenticationX509ServiceClient) Disable(ctx context.Context, in *DisableRequest, opts ...grpc.CallOption) (*DisableResponse, error) {
	out := new(DisableResponse)
	err := c.cc.Invoke(ctx, "/native_iam_authentication_x509.IAMAuthenticationX509Service/Disable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IAMAuthenticationX509ServiceServer is the server API for IAMAuthenticationX509Service service.
// All implementations must embed UnimplementedIAMAuthenticationX509ServiceServer
// for forward compatibility
type IAMAuthenticationX509ServiceServer interface {
	// Get root CA certificate and public key in DER format. It can be used to validate all the certificates created by this service
	GetRootCAInfo(context.Context, *GetRootCAInfoRequest) (*GetRootCAInfoResponse, error)
	// Register public key for identity and generate x509 certificate for it. Sign certificate using internal CA.
	RegisterAndGenerate(context.Context, *RegisterAndGenerateRequest) (*RegisterAndGenerateResponse, error)
	// Regenerate x509 certificate. Return new x509 certificate signed with CA.
	Regenerate(context.Context, *RegenerateRequest) (*RegenerateResponse, error)
	// Get certificate information from RAW X509 certificate.
	ValidateAndGetFromRawX509(context.Context, *ValidateAndGetFromRawX509Request) (*ValidateAndGetFromRawX509Response, error)
	// Get certificate information using its unique identifier
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Count all the registered certificates in the namespace
	Count(context.Context, *CountRequest) (*CountResponse, error)
	// List all the registered certificates in the namespace
	List(*ListRequest, IAMAuthenticationX509Service_ListServer) error
	// List all the registered certificates for specified identity
	CountForIdentity(context.Context, *CountForIdentityRequest) (*CountForIdentityResponse, error)
	// List all the registered certificates for specified identity
	ListForIdentity(*ListForIdentityRequest, IAMAuthenticationX509Service_ListForIdentityServer) error
	// Update certificate information
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// Delete certificate. Note, that previously generated X509 certificate is still valid. Thats why you have to check if they still exists and wasnt disabled.
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// Mark certificate as manually disabled. Disabled certificated cant be used.
	Disable(context.Context, *DisableRequest) (*DisableResponse, error)
	mustEmbedUnimplementedIAMAuthenticationX509ServiceServer()
}

// UnimplementedIAMAuthenticationX509ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIAMAuthenticationX509ServiceServer struct {
}

func (UnimplementedIAMAuthenticationX509ServiceServer) GetRootCAInfo(context.Context, *GetRootCAInfoRequest) (*GetRootCAInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRootCAInfo not implemented")
}
func (UnimplementedIAMAuthenticationX509ServiceServer) RegisterAndGenerate(context.Context, *RegisterAndGenerateRequest) (*RegisterAndGenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAndGenerate not implemented")
}
func (UnimplementedIAMAuthenticationX509ServiceServer) Regenerate(context.Context, *RegenerateRequest) (*RegenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Regenerate not implemented")
}
func (UnimplementedIAMAuthenticationX509ServiceServer) ValidateAndGetFromRawX509(context.Context, *ValidateAndGetFromRawX509Request) (*ValidateAndGetFromRawX509Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAndGetFromRawX509 not implemented")
}
func (UnimplementedIAMAuthenticationX509ServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedIAMAuthenticationX509ServiceServer) Count(context.Context, *CountRequest) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedIAMAuthenticationX509ServiceServer) List(*ListRequest, IAMAuthenticationX509Service_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedIAMAuthenticationX509ServiceServer) CountForIdentity(context.Context, *CountForIdentityRequest) (*CountForIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountForIdentity not implemented")
}
func (UnimplementedIAMAuthenticationX509ServiceServer) ListForIdentity(*ListForIdentityRequest, IAMAuthenticationX509Service_ListForIdentityServer) error {
	return status.Errorf(codes.Unimplemented, "method ListForIdentity not implemented")
}
func (UnimplementedIAMAuthenticationX509ServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedIAMAuthenticationX509ServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedIAMAuthenticationX509ServiceServer) Disable(context.Context, *DisableRequest) (*DisableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedIAMAuthenticationX509ServiceServer) mustEmbedUnimplementedIAMAuthenticationX509ServiceServer() {
}

// UnsafeIAMAuthenticationX509ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IAMAuthenticationX509ServiceServer will
// result in compilation errors.
type UnsafeIAMAuthenticationX509ServiceServer interface {
	mustEmbedUnimplementedIAMAuthenticationX509ServiceServer()
}

func RegisterIAMAuthenticationX509ServiceServer(s grpc.ServiceRegistrar, srv IAMAuthenticationX509ServiceServer) {
	s.RegisterService(&IAMAuthenticationX509Service_ServiceDesc, srv)
}

func _IAMAuthenticationX509Service_GetRootCAInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRootCAInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthenticationX509ServiceServer).GetRootCAInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_authentication_x509.IAMAuthenticationX509Service/GetRootCAInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthenticationX509ServiceServer).GetRootCAInfo(ctx, req.(*GetRootCAInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMAuthenticationX509Service_RegisterAndGenerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAndGenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthenticationX509ServiceServer).RegisterAndGenerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_authentication_x509.IAMAuthenticationX509Service/RegisterAndGenerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthenticationX509ServiceServer).RegisterAndGenerate(ctx, req.(*RegisterAndGenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMAuthenticationX509Service_Regenerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthenticationX509ServiceServer).Regenerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_authentication_x509.IAMAuthenticationX509Service/Regenerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthenticationX509ServiceServer).Regenerate(ctx, req.(*RegenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMAuthenticationX509Service_ValidateAndGetFromRawX509_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAndGetFromRawX509Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthenticationX509ServiceServer).ValidateAndGetFromRawX509(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_authentication_x509.IAMAuthenticationX509Service/ValidateAndGetFromRawX509",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthenticationX509ServiceServer).ValidateAndGetFromRawX509(ctx, req.(*ValidateAndGetFromRawX509Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMAuthenticationX509Service_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthenticationX509ServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_authentication_x509.IAMAuthenticationX509Service/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthenticationX509ServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMAuthenticationX509Service_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthenticationX509ServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_authentication_x509.IAMAuthenticationX509Service/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthenticationX509ServiceServer).Count(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMAuthenticationX509Service_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IAMAuthenticationX509ServiceServer).List(m, &iAMAuthenticationX509ServiceListServer{stream})
}

type IAMAuthenticationX509Service_ListServer interface {
	Send(*ListResponse) error
	grpc.ServerStream
}

type iAMAuthenticationX509ServiceListServer struct {
	grpc.ServerStream
}

func (x *iAMAuthenticationX509ServiceListServer) Send(m *ListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _IAMAuthenticationX509Service_CountForIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountForIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthenticationX509ServiceServer).CountForIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_authentication_x509.IAMAuthenticationX509Service/CountForIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthenticationX509ServiceServer).CountForIdentity(ctx, req.(*CountForIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMAuthenticationX509Service_ListForIdentity_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListForIdentityRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IAMAuthenticationX509ServiceServer).ListForIdentity(m, &iAMAuthenticationX509ServiceListForIdentityServer{stream})
}

type IAMAuthenticationX509Service_ListForIdentityServer interface {
	Send(*ListForIdentityResponse) error
	grpc.ServerStream
}

type iAMAuthenticationX509ServiceListForIdentityServer struct {
	grpc.ServerStream
}

func (x *iAMAuthenticationX509ServiceListForIdentityServer) Send(m *ListForIdentityResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _IAMAuthenticationX509Service_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthenticationX509ServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_authentication_x509.IAMAuthenticationX509Service/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthenticationX509ServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMAuthenticationX509Service_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthenticationX509ServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_authentication_x509.IAMAuthenticationX509Service/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthenticationX509ServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMAuthenticationX509Service_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthenticationX509ServiceServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_authentication_x509.IAMAuthenticationX509Service/Disable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthenticationX509ServiceServer).Disable(ctx, req.(*DisableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IAMAuthenticationX509Service_ServiceDesc is the grpc.ServiceDesc for IAMAuthenticationX509Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IAMAuthenticationX509Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "native_iam_authentication_x509.IAMAuthenticationX509Service",
	HandlerType: (*IAMAuthenticationX509ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRootCAInfo",
			Handler:    _IAMAuthenticationX509Service_GetRootCAInfo_Handler,
		},
		{
			MethodName: "RegisterAndGenerate",
			Handler:    _IAMAuthenticationX509Service_RegisterAndGenerate_Handler,
		},
		{
			MethodName: "Regenerate",
			Handler:    _IAMAuthenticationX509Service_Regenerate_Handler,
		},
		{
			MethodName: "ValidateAndGetFromRawX509",
			Handler:    _IAMAuthenticationX509Service_ValidateAndGetFromRawX509_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _IAMAuthenticationX509Service_Get_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _IAMAuthenticationX509Service_Count_Handler,
		},
		{
			MethodName: "CountForIdentity",
			Handler:    _IAMAuthenticationX509Service_CountForIdentity_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _IAMAuthenticationX509Service_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _IAMAuthenticationX509Service_Delete_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _IAMAuthenticationX509Service_Disable_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _IAMAuthenticationX509Service_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListForIdentity",
			Handler:       _IAMAuthenticationX509Service_ListForIdentity_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "x509.proto",
}
