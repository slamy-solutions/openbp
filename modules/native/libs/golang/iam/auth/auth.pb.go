// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.12.4
// source: auth.proto

package auth

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateTokenWithPasswordResponse_Status int32

const (
	// Everything is ok. Access and refresh tokens were successfully created
	CreateTokenWithPasswordResponse_OK CreateTokenWithPasswordResponse_Status = 0
	// Login or password is not valid
	CreateTokenWithPasswordResponse_CREDENTIALS_INVALID CreateTokenWithPasswordResponse_Status = 1
	// Identity was manually disabled
	CreateTokenWithPasswordResponse_IDENTITY_NOT_ACTIVE CreateTokenWithPasswordResponse_Status = 2
	// Not enough privileges to create token with specified scopes
	CreateTokenWithPasswordResponse_UNAUTHORIZED CreateTokenWithPasswordResponse_Status = 3
)

// Enum value maps for CreateTokenWithPasswordResponse_Status.
var (
	CreateTokenWithPasswordResponse_Status_name = map[int32]string{
		0: "OK",
		1: "CREDENTIALS_INVALID",
		2: "IDENTITY_NOT_ACTIVE",
		3: "UNAUTHORIZED",
	}
	CreateTokenWithPasswordResponse_Status_value = map[string]int32{
		"OK":                  0,
		"CREDENTIALS_INVALID": 1,
		"IDENTITY_NOT_ACTIVE": 2,
		"UNAUTHORIZED":        3,
	}
)

func (x CreateTokenWithPasswordResponse_Status) Enum() *CreateTokenWithPasswordResponse_Status {
	p := new(CreateTokenWithPasswordResponse_Status)
	*p = x
	return p
}

func (x CreateTokenWithPasswordResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateTokenWithPasswordResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_auth_proto_enumTypes[0].Descriptor()
}

func (CreateTokenWithPasswordResponse_Status) Type() protoreflect.EnumType {
	return &file_auth_proto_enumTypes[0]
}

func (x CreateTokenWithPasswordResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateTokenWithPasswordResponse_Status.Descriptor instead.
func (CreateTokenWithPasswordResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{2, 0}
}

type CreateTokenWithOAuth2Response_Status int32

const (
	// Everything is ok. Access and refresh tokens were successfully created
	CreateTokenWithOAuth2Response_OK CreateTokenWithOAuth2Response_Status = 0
	// Failed to find identity by provided OAuth secrets
	CreateTokenWithOAuth2Response_UNAUTHENTICATED CreateTokenWithOAuth2Response_Status = 1
	// Identity was manually disabled
	CreateTokenWithOAuth2Response_IDENTITY_NOT_ACTIVE CreateTokenWithOAuth2Response_Status = 2
	// Not enough privileges to create token with specified scopes
	CreateTokenWithOAuth2Response_UNAUTHORIZED CreateTokenWithOAuth2Response_Status = 3
)

// Enum value maps for CreateTokenWithOAuth2Response_Status.
var (
	CreateTokenWithOAuth2Response_Status_name = map[int32]string{
		0: "OK",
		1: "UNAUTHENTICATED",
		2: "IDENTITY_NOT_ACTIVE",
		3: "UNAUTHORIZED",
	}
	CreateTokenWithOAuth2Response_Status_value = map[string]int32{
		"OK":                  0,
		"UNAUTHENTICATED":     1,
		"IDENTITY_NOT_ACTIVE": 2,
		"UNAUTHORIZED":        3,
	}
)

func (x CreateTokenWithOAuth2Response_Status) Enum() *CreateTokenWithOAuth2Response_Status {
	p := new(CreateTokenWithOAuth2Response_Status)
	*p = x
	return p
}

func (x CreateTokenWithOAuth2Response_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateTokenWithOAuth2Response_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_auth_proto_enumTypes[1].Descriptor()
}

func (CreateTokenWithOAuth2Response_Status) Type() protoreflect.EnumType {
	return &file_auth_proto_enumTypes[1]
}

func (x CreateTokenWithOAuth2Response_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateTokenWithOAuth2Response_Status.Descriptor instead.
func (CreateTokenWithOAuth2Response_Status) EnumDescriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{4, 0}
}

type RefreshTokenResponse_Status int32

const (
	// Everything is ok. New access token was successfully created
	RefreshTokenResponse_OK RefreshTokenResponse_Status = 0
	// Received token has bad format or its signature doesnt match
	RefreshTokenResponse_TOKEN_INVALID RefreshTokenResponse_Status = 1
	// Most probably token was deleted after its creation
	RefreshTokenResponse_TOKEN_NOT_FOUND RefreshTokenResponse_Status = 2
	// Token was manually disabled
	RefreshTokenResponse_TOKEN_DISABLED RefreshTokenResponse_Status = 3
	// Token expired
	RefreshTokenResponse_TOKEN_EXPIRED RefreshTokenResponse_Status = 4
	// Provided token was recognized but most probably it is normal access token (not refresh one)
	RefreshTokenResponse_TOKEN_IS_NOT_REFRESH_TOKEN RefreshTokenResponse_Status = 5
	// Identity wasnt founded. Most probably it was deleted after token creation
	RefreshTokenResponse_IDENTITY_NOT_FOUND RefreshTokenResponse_Status = 6
	// Identity was manually disabled.
	RefreshTokenResponse_IDENTITY_NOT_ACTIVE RefreshTokenResponse_Status = 7
	// Most probably indentity policies changed and now its not possible to create token with same scopes
	RefreshTokenResponse_IDENTITY_UNAUTHENTICATED RefreshTokenResponse_Status = 8
)

// Enum value maps for RefreshTokenResponse_Status.
var (
	RefreshTokenResponse_Status_name = map[int32]string{
		0: "OK",
		1: "TOKEN_INVALID",
		2: "TOKEN_NOT_FOUND",
		3: "TOKEN_DISABLED",
		4: "TOKEN_EXPIRED",
		5: "TOKEN_IS_NOT_REFRESH_TOKEN",
		6: "IDENTITY_NOT_FOUND",
		7: "IDENTITY_NOT_ACTIVE",
		8: "IDENTITY_UNAUTHENTICATED",
	}
	RefreshTokenResponse_Status_value = map[string]int32{
		"OK":                         0,
		"TOKEN_INVALID":              1,
		"TOKEN_NOT_FOUND":            2,
		"TOKEN_DISABLED":             3,
		"TOKEN_EXPIRED":              4,
		"TOKEN_IS_NOT_REFRESH_TOKEN": 5,
		"IDENTITY_NOT_FOUND":         6,
		"IDENTITY_NOT_ACTIVE":        7,
		"IDENTITY_UNAUTHENTICATED":   8,
	}
)

func (x RefreshTokenResponse_Status) Enum() *RefreshTokenResponse_Status {
	p := new(RefreshTokenResponse_Status)
	*p = x
	return p
}

func (x RefreshTokenResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RefreshTokenResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_auth_proto_enumTypes[2].Descriptor()
}

func (RefreshTokenResponse_Status) Type() protoreflect.EnumType {
	return &file_auth_proto_enumTypes[2]
}

func (x RefreshTokenResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RefreshTokenResponse_Status.Descriptor instead.
func (RefreshTokenResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{6, 0}
}

type CheckAccessWithTokenResponse_Status int32

const (
	// Provided token allows to access scopes
	CheckAccessWithTokenResponse_OK CheckAccessWithTokenResponse_Status = 0
	// Received token has bad format or its signature doesnt match
	CheckAccessWithTokenResponse_TOKEN_INVALID CheckAccessWithTokenResponse_Status = 1
	// Most probably token was deleted after its creation
	CheckAccessWithTokenResponse_TOKEN_NOT_FOUND CheckAccessWithTokenResponse_Status = 2
	// Token was manually disabled
	CheckAccessWithTokenResponse_TOKEN_DISABLED CheckAccessWithTokenResponse_Status = 3
	// Token expired
	CheckAccessWithTokenResponse_TOKEN_EXPIRED CheckAccessWithTokenResponse_Status = 4
	// Token has not enought privileges to access specified scopes
	CheckAccessWithTokenResponse_UNAUTHORIZED CheckAccessWithTokenResponse_Status = 5
)

// Enum value maps for CheckAccessWithTokenResponse_Status.
var (
	CheckAccessWithTokenResponse_Status_name = map[int32]string{
		0: "OK",
		1: "TOKEN_INVALID",
		2: "TOKEN_NOT_FOUND",
		3: "TOKEN_DISABLED",
		4: "TOKEN_EXPIRED",
		5: "UNAUTHORIZED",
	}
	CheckAccessWithTokenResponse_Status_value = map[string]int32{
		"OK":              0,
		"TOKEN_INVALID":   1,
		"TOKEN_NOT_FOUND": 2,
		"TOKEN_DISABLED":  3,
		"TOKEN_EXPIRED":   4,
		"UNAUTHORIZED":    5,
	}
)

func (x CheckAccessWithTokenResponse_Status) Enum() *CheckAccessWithTokenResponse_Status {
	p := new(CheckAccessWithTokenResponse_Status)
	*p = x
	return p
}

func (x CheckAccessWithTokenResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckAccessWithTokenResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_auth_proto_enumTypes[3].Descriptor()
}

func (CheckAccessWithTokenResponse_Status) Type() protoreflect.EnumType {
	return &file_auth_proto_enumTypes[3]
}

func (x CheckAccessWithTokenResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckAccessWithTokenResponse_Status.Descriptor instead.
func (CheckAccessWithTokenResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{8, 0}
}

type CheckAccessWithPasswordResponse_Status int32

const (
	// Provided identity with provided password is allows to access scopes
	CheckAccessWithPasswordResponse_OK CheckAccessWithPasswordResponse_Status = 0
	// Identity or password doesnt match
	CheckAccessWithPasswordResponse_UNAUTHENTICATED CheckAccessWithPasswordResponse_Status = 1
	// Identity dont have enought priviliges to perform actions from provided scopes
	CheckAccessWithPasswordResponse_UNAUTHORIZED CheckAccessWithPasswordResponse_Status = 5
)

// Enum value maps for CheckAccessWithPasswordResponse_Status.
var (
	CheckAccessWithPasswordResponse_Status_name = map[int32]string{
		0: "OK",
		1: "UNAUTHENTICATED",
		5: "UNAUTHORIZED",
	}
	CheckAccessWithPasswordResponse_Status_value = map[string]int32{
		"OK":              0,
		"UNAUTHENTICATED": 1,
		"UNAUTHORIZED":    5,
	}
)

func (x CheckAccessWithPasswordResponse_Status) Enum() *CheckAccessWithPasswordResponse_Status {
	p := new(CheckAccessWithPasswordResponse_Status)
	*p = x
	return p
}

func (x CheckAccessWithPasswordResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckAccessWithPasswordResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_auth_proto_enumTypes[4].Descriptor()
}

func (CheckAccessWithPasswordResponse_Status) Type() protoreflect.EnumType {
	return &file_auth_proto_enumTypes[4]
}

func (x CheckAccessWithPasswordResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckAccessWithPasswordResponse_Status.Descriptor instead.
func (CheckAccessWithPasswordResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{10, 0}
}

type CheckAccessWithX509Response_Status int32

const (
	// Provided identity with provided certificate is allows to access scopes
	CheckAccessWithX509Response_OK CheckAccessWithX509Response_Status = 0
	// Certificate corrupted or was supplied not in the DER format
	CheckAccessWithX509Response_CERTIFICATE_INVALID_FORMAT CheckAccessWithX509Response_Status = 1
	// Signature or other aspects of the certificate are invalid
	CheckAccessWithX509Response_CERTIFICATE_INVALID CheckAccessWithX509Response_Status = 2
	// Certificate wasnt founded. Most probably certificate or entire namespace was deleted
	CheckAccessWithX509Response_CERTIFICATE_NOT_FOUND CheckAccessWithX509Response_Status = 3
	// Certificate was manually disable and cont be used in auth mechanisms
	CheckAccessWithX509Response_CERTIFICATE_DISABLED CheckAccessWithX509Response_Status = 4
	// Identity wasnt founded. Most probably it was deleted and certificate will be deleted soon
	CheckAccessWithX509Response_IDENTITY_NOT_FOUND CheckAccessWithX509Response_Status = 5
	// Identity was manually disabled.
	CheckAccessWithX509Response_IDENTITY_NOT_ACTIVE CheckAccessWithX509Response_Status = 6
	// Certificate is valid, but identity dont have enought priviliges to perform actions from provided scopes
	CheckAccessWithX509Response_UNAUTHORIZED CheckAccessWithX509Response_Status = 7
)

// Enum value maps for CheckAccessWithX509Response_Status.
var (
	CheckAccessWithX509Response_Status_name = map[int32]string{
		0: "OK",
		1: "CERTIFICATE_INVALID_FORMAT",
		2: "CERTIFICATE_INVALID",
		3: "CERTIFICATE_NOT_FOUND",
		4: "CERTIFICATE_DISABLED",
		5: "IDENTITY_NOT_FOUND",
		6: "IDENTITY_NOT_ACTIVE",
		7: "UNAUTHORIZED",
	}
	CheckAccessWithX509Response_Status_value = map[string]int32{
		"OK":                         0,
		"CERTIFICATE_INVALID_FORMAT": 1,
		"CERTIFICATE_INVALID":        2,
		"CERTIFICATE_NOT_FOUND":      3,
		"CERTIFICATE_DISABLED":       4,
		"IDENTITY_NOT_FOUND":         5,
		"IDENTITY_NOT_ACTIVE":        6,
		"UNAUTHORIZED":               7,
	}
)

func (x CheckAccessWithX509Response_Status) Enum() *CheckAccessWithX509Response_Status {
	p := new(CheckAccessWithX509Response_Status)
	*p = x
	return p
}

func (x CheckAccessWithX509Response_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckAccessWithX509Response_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_auth_proto_enumTypes[5].Descriptor()
}

func (CheckAccessWithX509Response_Status) Type() protoreflect.EnumType {
	return &file_auth_proto_enumTypes[5]
}

func (x CheckAccessWithX509Response_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckAccessWithX509Response_Status.Descriptor instead.
func (CheckAccessWithX509Response_Status) EnumDescriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{12, 0}
}

type CheckAccessResponse_Status int32

const (
	// Provided identity with provided certificate is allows to access scopes
	CheckAccessResponse_OK CheckAccessResponse_Status = 0
	// Identity wasnt founded.
	CheckAccessResponse_IDENTITY_NOT_FOUND CheckAccessResponse_Status = 1
	// Identity was manually disabled.
	CheckAccessResponse_IDENTITY_NOT_ACTIVE CheckAccessResponse_Status = 2
	// Identity dont have enought priviliges to perform actions from provided scopes
	CheckAccessResponse_UNAUTHORIZED CheckAccessResponse_Status = 3
)

// Enum value maps for CheckAccessResponse_Status.
var (
	CheckAccessResponse_Status_name = map[int32]string{
		0: "OK",
		1: "IDENTITY_NOT_FOUND",
		2: "IDENTITY_NOT_ACTIVE",
		3: "UNAUTHORIZED",
	}
	CheckAccessResponse_Status_value = map[string]int32{
		"OK":                  0,
		"IDENTITY_NOT_FOUND":  1,
		"IDENTITY_NOT_ACTIVE": 2,
		"UNAUTHORIZED":        3,
	}
)

func (x CheckAccessResponse_Status) Enum() *CheckAccessResponse_Status {
	p := new(CheckAccessResponse_Status)
	*p = x
	return p
}

func (x CheckAccessResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckAccessResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_auth_proto_enumTypes[6].Descriptor()
}

func (CheckAccessResponse_Status) Type() protoreflect.EnumType {
	return &file_auth_proto_enumTypes[6]
}

func (x CheckAccessResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckAccessResponse_Status.Descriptor instead.
func (CheckAccessResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{14, 0}
}

// Scope of the requested access. Check native_iam_policy for more information.
type Scope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Namespace where this scope applies
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Resources that can be accessed using token
	Resources []string `protobuf:"bytes,2,rep,name=resources,proto3" json:"resources,omitempty"`
	// Actions that can be done on resources
	Actions []string `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`
	// If this scope applies to all namespaces
	NamespaceIndependent bool `protobuf:"varint,4,opt,name=namespaceIndependent,proto3" json:"namespaceIndependent,omitempty"`
}

func (x *Scope) Reset() {
	*x = Scope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope) ProtoMessage() {}

func (x *Scope) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope.ProtoReflect.Descriptor instead.
func (*Scope) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{0}
}

func (x *Scope) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Scope) GetResources() []string {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Scope) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Scope) GetNamespaceIndependent() bool {
	if x != nil {
		return x.NamespaceIndependent
	}
	return false
}

type CreateTokenWithPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Namespace where identity located. May be empty for global identity
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Identity UUID
	Identity string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	// Identity password
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// Arbitrary metadata. For example MAC/IP/information of the actor/application/browser/machine that created this token. The exact format of metadata is not defined, but JSON is suggested.
	Metadata string `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Scopes of the created token. Empty for creating token with all possible scopes for identity.
	Scopes []*Scope `protobuf:"bytes,5,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *CreateTokenWithPasswordRequest) Reset() {
	*x = CreateTokenWithPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTokenWithPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokenWithPasswordRequest) ProtoMessage() {}

func (x *CreateTokenWithPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokenWithPasswordRequest.ProtoReflect.Descriptor instead.
func (*CreateTokenWithPasswordRequest) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTokenWithPasswordRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateTokenWithPasswordRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *CreateTokenWithPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateTokenWithPasswordRequest) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *CreateTokenWithPasswordRequest) GetScopes() []*Scope {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type CreateTokenWithPasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the token creation
	Status CreateTokenWithPasswordResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=native_iam_auth.CreateTokenWithPasswordResponse_Status" json:"status,omitempty"`
	// Token used for authentication and authorization. If status is not OK - empty string
	AccessToken string `protobuf:"bytes,2,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	// Token used for refreshing accessToken. If status is not OK - empty string
	RefreshToken string `protobuf:"bytes,3,opt,name=refreshToken,proto3" json:"refreshToken,omitempty"`
}

func (x *CreateTokenWithPasswordResponse) Reset() {
	*x = CreateTokenWithPasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTokenWithPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokenWithPasswordResponse) ProtoMessage() {}

func (x *CreateTokenWithPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokenWithPasswordResponse.ProtoReflect.Descriptor instead.
func (*CreateTokenWithPasswordResponse) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{2}
}

func (x *CreateTokenWithPasswordResponse) GetStatus() CreateTokenWithPasswordResponse_Status {
	if x != nil {
		return x.Status
	}
	return CreateTokenWithPasswordResponse_OK
}

func (x *CreateTokenWithPasswordResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *CreateTokenWithPasswordResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type CreateTokenWithOAuth2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Namespace where identity located. May be empty for global identity
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// OAuth2 provider
	Provider string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	// Code sended with initial request
	Code string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	// Code_verifier used for initial request
	CodeVerifier string `protobuf:"bytes,4,opt,name=codeVerifier,proto3" json:"codeVerifier,omitempty"`
	// Redirect URL sended with initial request
	RedirectURL string `protobuf:"bytes,5,opt,name=redirectURL,proto3" json:"redirectURL,omitempty"`
	// Arbitrary metadata. For example MAC/IP/information of the actor/application/browser/machine that created this token. The exact format of metadata is not defined, but JSON is suggested.
	Metadata string `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Scopes of the created token. Empty for creating token with all possible scopes for identity.
	Scopes []*Scope `protobuf:"bytes,7,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *CreateTokenWithOAuth2Request) Reset() {
	*x = CreateTokenWithOAuth2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTokenWithOAuth2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokenWithOAuth2Request) ProtoMessage() {}

func (x *CreateTokenWithOAuth2Request) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokenWithOAuth2Request.ProtoReflect.Descriptor instead.
func (*CreateTokenWithOAuth2Request) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{3}
}

func (x *CreateTokenWithOAuth2Request) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateTokenWithOAuth2Request) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *CreateTokenWithOAuth2Request) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CreateTokenWithOAuth2Request) GetCodeVerifier() string {
	if x != nil {
		return x.CodeVerifier
	}
	return ""
}

func (x *CreateTokenWithOAuth2Request) GetRedirectURL() string {
	if x != nil {
		return x.RedirectURL
	}
	return ""
}

func (x *CreateTokenWithOAuth2Request) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *CreateTokenWithOAuth2Request) GetScopes() []*Scope {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type CreateTokenWithOAuth2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the token creation
	Status CreateTokenWithOAuth2Response_Status `protobuf:"varint,1,opt,name=status,proto3,enum=native_iam_auth.CreateTokenWithOAuth2Response_Status" json:"status,omitempty"`
	// Token used for authentication and authorization
	AccessToken string `protobuf:"bytes,2,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	// Token used for refreshing accessToken
	RefreshToken string `protobuf:"bytes,3,opt,name=refreshToken,proto3" json:"refreshToken,omitempty"`
	// Identity UUID
	Identity string `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *CreateTokenWithOAuth2Response) Reset() {
	*x = CreateTokenWithOAuth2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTokenWithOAuth2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokenWithOAuth2Response) ProtoMessage() {}

func (x *CreateTokenWithOAuth2Response) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokenWithOAuth2Response.ProtoReflect.Descriptor instead.
func (*CreateTokenWithOAuth2Response) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{4}
}

func (x *CreateTokenWithOAuth2Response) GetStatus() CreateTokenWithOAuth2Response_Status {
	if x != nil {
		return x.Status
	}
	return CreateTokenWithOAuth2Response_OK
}

func (x *CreateTokenWithOAuth2Response) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *CreateTokenWithOAuth2Response) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *CreateTokenWithOAuth2Response) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type RefreshTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshToken string `protobuf:"bytes,1,opt,name=refreshToken,proto3" json:"refreshToken,omitempty"`
}

func (x *RefreshTokenRequest) Reset() {
	*x = RefreshTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTokenRequest) ProtoMessage() {}

func (x *RefreshTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTokenRequest.ProtoReflect.Descriptor instead.
func (*RefreshTokenRequest) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{5}
}

func (x *RefreshTokenRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type RefreshTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the refresh
	Status RefreshTokenResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=native_iam_auth.RefreshTokenResponse_Status" json:"status,omitempty"`
	// New access token
	AccessToken string `protobuf:"bytes,2,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
}

func (x *RefreshTokenResponse) Reset() {
	*x = RefreshTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTokenResponse) ProtoMessage() {}

func (x *RefreshTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTokenResponse.ProtoReflect.Descriptor instead.
func (*RefreshTokenResponse) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{6}
}

func (x *RefreshTokenResponse) GetStatus() RefreshTokenResponse_Status {
	if x != nil {
		return x.Status
	}
	return RefreshTokenResponse_OK
}

func (x *RefreshTokenResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type CheckAccessWithTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token to verify
	AccessToken string `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	// Scopes for with to validate access
	Scopes []*Scope `protobuf:"bytes,2,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *CheckAccessWithTokenRequest) Reset() {
	*x = CheckAccessWithTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAccessWithTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAccessWithTokenRequest) ProtoMessage() {}

func (x *CheckAccessWithTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAccessWithTokenRequest.ProtoReflect.Descriptor instead.
func (*CheckAccessWithTokenRequest) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{7}
}

func (x *CheckAccessWithTokenRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *CheckAccessWithTokenRequest) GetScopes() []*Scope {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type CheckAccessWithTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the verification
	Status CheckAccessWithTokenResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=native_iam_auth.CheckAccessWithTokenResponse_Status" json:"status,omitempty"`
	// Details of the status, that can be safelly returned and displayed to the requester
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Namespace where token and identity are located
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Unique token id
	TokenUUID string `protobuf:"bytes,4,opt,name=tokenUUID,proto3" json:"tokenUUID,omitempty"`
	// Unique identity id
	IdentityUUID string `protobuf:"bytes,5,opt,name=identityUUID,proto3" json:"identityUUID,omitempty"`
}

func (x *CheckAccessWithTokenResponse) Reset() {
	*x = CheckAccessWithTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAccessWithTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAccessWithTokenResponse) ProtoMessage() {}

func (x *CheckAccessWithTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAccessWithTokenResponse.ProtoReflect.Descriptor instead.
func (*CheckAccessWithTokenResponse) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{8}
}

func (x *CheckAccessWithTokenResponse) GetStatus() CheckAccessWithTokenResponse_Status {
	if x != nil {
		return x.Status
	}
	return CheckAccessWithTokenResponse_OK
}

func (x *CheckAccessWithTokenResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CheckAccessWithTokenResponse) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CheckAccessWithTokenResponse) GetTokenUUID() string {
	if x != nil {
		return x.TokenUUID
	}
	return ""
}

func (x *CheckAccessWithTokenResponse) GetIdentityUUID() string {
	if x != nil {
		return x.IdentityUUID
	}
	return ""
}

type CheckAccessWithPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Namespace where identity is located
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Identity UUID inside namespace
	Identity string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	// Identity secret key
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// Arbitrary metadata. For example MAC/IP/information of the actor/application/browser/machine that provided this indentity and password. The exact format of metadata is not defined, but JSON is suggested.
	Metadata string `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Scopes to check
	Scopes []*Scope `protobuf:"bytes,5,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *CheckAccessWithPasswordRequest) Reset() {
	*x = CheckAccessWithPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAccessWithPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAccessWithPasswordRequest) ProtoMessage() {}

func (x *CheckAccessWithPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAccessWithPasswordRequest.ProtoReflect.Descriptor instead.
func (*CheckAccessWithPasswordRequest) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{9}
}

func (x *CheckAccessWithPasswordRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CheckAccessWithPasswordRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *CheckAccessWithPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CheckAccessWithPasswordRequest) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *CheckAccessWithPasswordRequest) GetScopes() []*Scope {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type CheckAccessWithPasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the check
	Status CheckAccessWithPasswordResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=native_iam_auth.CheckAccessWithPasswordResponse_Status" json:"status,omitempty"`
	// Details of the status, that can be safelly returned and displayed to the requester
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CheckAccessWithPasswordResponse) Reset() {
	*x = CheckAccessWithPasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAccessWithPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAccessWithPasswordResponse) ProtoMessage() {}

func (x *CheckAccessWithPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAccessWithPasswordResponse.ProtoReflect.Descriptor instead.
func (*CheckAccessWithPasswordResponse) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{10}
}

func (x *CheckAccessWithPasswordResponse) GetStatus() CheckAccessWithPasswordResponse_Status {
	if x != nil {
		return x.Status
	}
	return CheckAccessWithPasswordResponse_OK
}

func (x *CheckAccessWithPasswordResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CheckAccessWithX509Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// X509 certificate in DER format
	Certificate []byte `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	// Scopes to check
	Scopes []*Scope `protobuf:"bytes,2,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *CheckAccessWithX509Request) Reset() {
	*x = CheckAccessWithX509Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAccessWithX509Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAccessWithX509Request) ProtoMessage() {}

func (x *CheckAccessWithX509Request) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAccessWithX509Request.ProtoReflect.Descriptor instead.
func (*CheckAccessWithX509Request) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{11}
}

func (x *CheckAccessWithX509Request) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *CheckAccessWithX509Request) GetScopes() []*Scope {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type CheckAccessWithX509Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the check
	Status CheckAccessWithX509Response_Status `protobuf:"varint,1,opt,name=status,proto3,enum=native_iam_auth.CheckAccessWithX509Response_Status" json:"status,omitempty"`
	// Details of the status, that can be safelly returned and displayed to the requester
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Certificate information. Only available if status is one of the {OK; CERTIFICATE_DISABLED; IDENTITY_NOT_FOUND; IDENTITY_NOT_ACTIVE; UNAUTHORIZED}
	CertificateInfo *CheckAccessWithX509Response_CertificateInfo `protobuf:"bytes,3,opt,name=certificateInfo,proto3" json:"certificateInfo,omitempty"`
}

func (x *CheckAccessWithX509Response) Reset() {
	*x = CheckAccessWithX509Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAccessWithX509Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAccessWithX509Response) ProtoMessage() {}

func (x *CheckAccessWithX509Response) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAccessWithX509Response.ProtoReflect.Descriptor instead.
func (*CheckAccessWithX509Response) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{12}
}

func (x *CheckAccessWithX509Response) GetStatus() CheckAccessWithX509Response_Status {
	if x != nil {
		return x.Status
	}
	return CheckAccessWithX509Response_OK
}

func (x *CheckAccessWithX509Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CheckAccessWithX509Response) GetCertificateInfo() *CheckAccessWithX509Response_CertificateInfo {
	if x != nil {
		return x.CertificateInfo
	}
	return nil
}

type CheckAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Namespace where identity is located
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Unique identifier of the identity
	Identity string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	// Scopes to check
	Scopes []*Scope `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *CheckAccessRequest) Reset() {
	*x = CheckAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAccessRequest) ProtoMessage() {}

func (x *CheckAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAccessRequest.ProtoReflect.Descriptor instead.
func (*CheckAccessRequest) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{13}
}

func (x *CheckAccessRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CheckAccessRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *CheckAccessRequest) GetScopes() []*Scope {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type CheckAccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the check
	Status CheckAccessResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=native_iam_auth.CheckAccessResponse_Status" json:"status,omitempty"`
	// Details of the status, that can be safelly returned and displayed to the requester
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CheckAccessResponse) Reset() {
	*x = CheckAccessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAccessResponse) ProtoMessage() {}

func (x *CheckAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAccessResponse.ProtoReflect.Descriptor instead.
func (*CheckAccessResponse) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{14}
}

func (x *CheckAccessResponse) GetStatus() CheckAccessResponse_Status {
	if x != nil {
		return x.Status
	}
	return CheckAccessResponse_OK
}

func (x *CheckAccessResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Detailed information about certificate
type CheckAccessWithX509Response_CertificateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Namespace where certificate and identity are located
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Unique identifier of the certificate
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Unique identifier of the identity
	Identity string `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *CheckAccessWithX509Response_CertificateInfo) Reset() {
	*x = CheckAccessWithX509Response_CertificateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAccessWithX509Response_CertificateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAccessWithX509Response_CertificateInfo) ProtoMessage() {}

func (x *CheckAccessWithX509Response_CertificateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_auth_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAccessWithX509Response_CertificateInfo.ProtoReflect.Descriptor instead.
func (*CheckAccessWithX509Response_CertificateInfo) Descriptor() ([]byte, []int) {
	return file_auth_proto_rawDescGZIP(), []int{12, 0}
}

func (x *CheckAccessWithX509Response_CertificateInfo) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CheckAccessWithX509Response_CertificateInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CheckAccessWithX509Response_CertificateInfo) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

var File_auth_proto protoreflect.FileDescriptor

var file_auth_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x22, 0x91, 0x01,
	0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a,
	0x14, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x74, 0x22, 0xc2, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x69, 0x61, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x06,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x8e, 0x02, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x54, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f,
	0x4b, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41,
	0x4c, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f,
	0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x03, 0x22, 0xfe, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x41, 0x75, 0x74, 0x68,
	0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x64, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xa2, 0x02, 0x0a, 0x1d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x50, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x55,
	0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x03, 0x22, 0x39, 0x0a,
	0x13, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xcf, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xce, 0x01, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x4f, 0x4b, 0x45,
	0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x52,
	0x45, 0x53, 0x48, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x49,
	0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x45,
	0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x08, 0x22, 0x6f, 0x0a, 0x1b, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xd9, 0x02, 0x0a, 0x1c,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x55, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x55, 0x55, 0x49, 0x44, 0x22, 0x71, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x4f, 0x4b,
	0x45, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f,
	0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x05, 0x22, 0xc2, 0x01, 0x0a, 0x1e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x06,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xc5, 0x01, 0x0a,
	0x1f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x37, 0x2e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x37, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x05, 0x22, 0x6e, 0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x58, 0x35, 0x30, 0x39, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x61,
	0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x06, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x22, 0x91, 0x04, 0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x58, 0x35, 0x30, 0x39, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x61,
	0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x58, 0x35, 0x30, 0x39, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x66, 0x0a, 0x0f, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x61,
	0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x58, 0x35, 0x30, 0x39, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x5f, 0x0a, 0x0f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x22, 0xc1, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x45, 0x52, 0x54, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x45, 0x52, 0x54, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x43,
	0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x17, 0x0a,
	0x13, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48,
	0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x07, 0x22, 0x7e, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x53, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x44, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x03, 0x32, 0xa2, 0x06, 0x0a, 0x0e, 0x49, 0x41, 0x4d, 0x41, 0x75, 0x74, 0x68,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7c, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x2f, 0x2e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x61, 0x6d, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x61, 0x6d,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x2d,
	0x2e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a,
	0x0c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x2e,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x61, 0x6d,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x14, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x2c, 0x2e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x61, 0x6d, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x7c, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2f, 0x2e, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a,
	0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x58, 0x35, 0x30, 0x39, 0x12, 0x2b, 0x2e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x61,
	0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x58, 0x35, 0x30, 0x39, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x58, 0x35, 0x30, 0x39, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x58, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23,
	0x2e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x61, 0x6d,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x23, 0x5a, 0x21, 0x73, 0x6c, 0x61,
	0x6d, 0x79, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x50, 0x2f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x3b, 0x61, 0x75, 0x74, 0x68, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_auth_proto_rawDescOnce sync.Once
	file_auth_proto_rawDescData = file_auth_proto_rawDesc
)

func file_auth_proto_rawDescGZIP() []byte {
	file_auth_proto_rawDescOnce.Do(func() {
		file_auth_proto_rawDescData = protoimpl.X.CompressGZIP(file_auth_proto_rawDescData)
	})
	return file_auth_proto_rawDescData
}

var file_auth_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_auth_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_auth_proto_goTypes = []interface{}{
	(CreateTokenWithPasswordResponse_Status)(0),         // 0: native_iam_auth.CreateTokenWithPasswordResponse.Status
	(CreateTokenWithOAuth2Response_Status)(0),           // 1: native_iam_auth.CreateTokenWithOAuth2Response.Status
	(RefreshTokenResponse_Status)(0),                    // 2: native_iam_auth.RefreshTokenResponse.Status
	(CheckAccessWithTokenResponse_Status)(0),            // 3: native_iam_auth.CheckAccessWithTokenResponse.Status
	(CheckAccessWithPasswordResponse_Status)(0),         // 4: native_iam_auth.CheckAccessWithPasswordResponse.Status
	(CheckAccessWithX509Response_Status)(0),             // 5: native_iam_auth.CheckAccessWithX509Response.Status
	(CheckAccessResponse_Status)(0),                     // 6: native_iam_auth.CheckAccessResponse.Status
	(*Scope)(nil),                                       // 7: native_iam_auth.Scope
	(*CreateTokenWithPasswordRequest)(nil),              // 8: native_iam_auth.CreateTokenWithPasswordRequest
	(*CreateTokenWithPasswordResponse)(nil),             // 9: native_iam_auth.CreateTokenWithPasswordResponse
	(*CreateTokenWithOAuth2Request)(nil),                // 10: native_iam_auth.CreateTokenWithOAuth2Request
	(*CreateTokenWithOAuth2Response)(nil),               // 11: native_iam_auth.CreateTokenWithOAuth2Response
	(*RefreshTokenRequest)(nil),                         // 12: native_iam_auth.RefreshTokenRequest
	(*RefreshTokenResponse)(nil),                        // 13: native_iam_auth.RefreshTokenResponse
	(*CheckAccessWithTokenRequest)(nil),                 // 14: native_iam_auth.CheckAccessWithTokenRequest
	(*CheckAccessWithTokenResponse)(nil),                // 15: native_iam_auth.CheckAccessWithTokenResponse
	(*CheckAccessWithPasswordRequest)(nil),              // 16: native_iam_auth.CheckAccessWithPasswordRequest
	(*CheckAccessWithPasswordResponse)(nil),             // 17: native_iam_auth.CheckAccessWithPasswordResponse
	(*CheckAccessWithX509Request)(nil),                  // 18: native_iam_auth.CheckAccessWithX509Request
	(*CheckAccessWithX509Response)(nil),                 // 19: native_iam_auth.CheckAccessWithX509Response
	(*CheckAccessRequest)(nil),                          // 20: native_iam_auth.CheckAccessRequest
	(*CheckAccessResponse)(nil),                         // 21: native_iam_auth.CheckAccessResponse
	(*CheckAccessWithX509Response_CertificateInfo)(nil), // 22: native_iam_auth.CheckAccessWithX509Response.CertificateInfo
}
var file_auth_proto_depIdxs = []int32{
	7,  // 0: native_iam_auth.CreateTokenWithPasswordRequest.scopes:type_name -> native_iam_auth.Scope
	0,  // 1: native_iam_auth.CreateTokenWithPasswordResponse.status:type_name -> native_iam_auth.CreateTokenWithPasswordResponse.Status
	7,  // 2: native_iam_auth.CreateTokenWithOAuth2Request.scopes:type_name -> native_iam_auth.Scope
	1,  // 3: native_iam_auth.CreateTokenWithOAuth2Response.status:type_name -> native_iam_auth.CreateTokenWithOAuth2Response.Status
	2,  // 4: native_iam_auth.RefreshTokenResponse.status:type_name -> native_iam_auth.RefreshTokenResponse.Status
	7,  // 5: native_iam_auth.CheckAccessWithTokenRequest.scopes:type_name -> native_iam_auth.Scope
	3,  // 6: native_iam_auth.CheckAccessWithTokenResponse.status:type_name -> native_iam_auth.CheckAccessWithTokenResponse.Status
	7,  // 7: native_iam_auth.CheckAccessWithPasswordRequest.scopes:type_name -> native_iam_auth.Scope
	4,  // 8: native_iam_auth.CheckAccessWithPasswordResponse.status:type_name -> native_iam_auth.CheckAccessWithPasswordResponse.Status
	7,  // 9: native_iam_auth.CheckAccessWithX509Request.scopes:type_name -> native_iam_auth.Scope
	5,  // 10: native_iam_auth.CheckAccessWithX509Response.status:type_name -> native_iam_auth.CheckAccessWithX509Response.Status
	22, // 11: native_iam_auth.CheckAccessWithX509Response.certificateInfo:type_name -> native_iam_auth.CheckAccessWithX509Response.CertificateInfo
	7,  // 12: native_iam_auth.CheckAccessRequest.scopes:type_name -> native_iam_auth.Scope
	6,  // 13: native_iam_auth.CheckAccessResponse.status:type_name -> native_iam_auth.CheckAccessResponse.Status
	8,  // 14: native_iam_auth.IAMAuthService.CreateTokenWithPassword:input_type -> native_iam_auth.CreateTokenWithPasswordRequest
	10, // 15: native_iam_auth.IAMAuthService.CreateTokenWithOAuth2:input_type -> native_iam_auth.CreateTokenWithOAuth2Request
	12, // 16: native_iam_auth.IAMAuthService.RefreshToken:input_type -> native_iam_auth.RefreshTokenRequest
	14, // 17: native_iam_auth.IAMAuthService.CheckAccessWithToken:input_type -> native_iam_auth.CheckAccessWithTokenRequest
	16, // 18: native_iam_auth.IAMAuthService.CheckAccessWithPassword:input_type -> native_iam_auth.CheckAccessWithPasswordRequest
	18, // 19: native_iam_auth.IAMAuthService.CheckAccessWithX509:input_type -> native_iam_auth.CheckAccessWithX509Request
	20, // 20: native_iam_auth.IAMAuthService.CheckAccess:input_type -> native_iam_auth.CheckAccessRequest
	9,  // 21: native_iam_auth.IAMAuthService.CreateTokenWithPassword:output_type -> native_iam_auth.CreateTokenWithPasswordResponse
	11, // 22: native_iam_auth.IAMAuthService.CreateTokenWithOAuth2:output_type -> native_iam_auth.CreateTokenWithOAuth2Response
	13, // 23: native_iam_auth.IAMAuthService.RefreshToken:output_type -> native_iam_auth.RefreshTokenResponse
	15, // 24: native_iam_auth.IAMAuthService.CheckAccessWithToken:output_type -> native_iam_auth.CheckAccessWithTokenResponse
	17, // 25: native_iam_auth.IAMAuthService.CheckAccessWithPassword:output_type -> native_iam_auth.CheckAccessWithPasswordResponse
	19, // 26: native_iam_auth.IAMAuthService.CheckAccessWithX509:output_type -> native_iam_auth.CheckAccessWithX509Response
	21, // 27: native_iam_auth.IAMAuthService.CheckAccess:output_type -> native_iam_auth.CheckAccessResponse
	21, // [21:28] is the sub-list for method output_type
	14, // [14:21] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_auth_proto_init() }
func file_auth_proto_init() {
	if File_auth_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_auth_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTokenWithPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTokenWithPasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTokenWithOAuth2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTokenWithOAuth2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAccessWithTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAccessWithTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAccessWithPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAccessWithPasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAccessWithX509Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAccessWithX509Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAccessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAccessWithX509Response_CertificateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_auth_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_auth_proto_goTypes,
		DependencyIndexes: file_auth_proto_depIdxs,
		EnumInfos:         file_auth_proto_enumTypes,
		MessageInfos:      file_auth_proto_msgTypes,
	}.Build()
	File_auth_proto = out.File
	file_auth_proto_rawDesc = nil
	file_auth_proto_goTypes = nil
	file_auth_proto_depIdxs = nil
}
