// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: identity.proto

package identity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IAMIdentityServiceClient is the client API for IAMIdentityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IAMIdentityServiceClient interface {
	// Create new identity
	Create(ctx context.Context, in *CreateIdentityRequest, opts ...grpc.CallOption) (*CreateIdentityResponse, error)
	// Get identity
	Get(ctx context.Context, in *GetIdentityRequest, opts ...grpc.CallOption) (*GetIdentityResponse, error)
	// Delete identity
	Delete(ctx context.Context, in *DeleteIdentityRequest, opts ...grpc.CallOption) (*DeleteIdentityResponse, error)
	// Check if identity exists
	Exists(ctx context.Context, in *ExistsIdentityRequest, opts ...grpc.CallOption) (*ExistsIdentityResponse, error)
	// Get list of the identities
	List(ctx context.Context, in *ListIdentityRequest, opts ...grpc.CallOption) (IAMIdentityService_ListClient, error)
	// Get number of the identities in the namespace
	Count(ctx context.Context, in *CountIdentityRequest, opts ...grpc.CallOption) (*CountIdentityResponse, error)
	// Get policy that is managed by service
	GetServiceManagedIdentity(ctx context.Context, in *GetServiceManagedIdentityRequest, opts ...grpc.CallOption) (*GetServiceManagedIdentityResponse, error)
	// Update identity information
	Update(ctx context.Context, in *UpdateIdentityRequest, opts ...grpc.CallOption) (*UpdateIdentityResponse, error)
	// Add policy to the identity. If policy was already added - does nothing.
	AddPolicy(ctx context.Context, in *AddPolicyRequest, opts ...grpc.CallOption) (*AddPolicyResponse, error)
	// Remove policy from the identity. If policy was already removed - does nothing.
	RemovePolicy(ctx context.Context, in *RemovePolicyRequest, opts ...grpc.CallOption) (*RemovePolicyResponse, error)
	// Add role to the identity. If role was already added = does nothing
	AddRole(ctx context.Context, in *AddRoleRequest, opts ...grpc.CallOption) (*AddRoleResponse, error)
	// Remove role from the identity. If role was already removed - does nothing.
	RemoveRole(ctx context.Context, in *RemoveRoleRequest, opts ...grpc.CallOption) (*RemoveRoleResponse, error)
	// Set identity active or not.
	SetActive(ctx context.Context, in *SetIdentityActiveRequest, opts ...grpc.CallOption) (*SetIdentityActiveResponse, error)
}

type iAMIdentityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIAMIdentityServiceClient(cc grpc.ClientConnInterface) IAMIdentityServiceClient {
	return &iAMIdentityServiceClient{cc}
}

func (c *iAMIdentityServiceClient) Create(ctx context.Context, in *CreateIdentityRequest, opts ...grpc.CallOption) (*CreateIdentityResponse, error) {
	out := new(CreateIdentityResponse)
	err := c.cc.Invoke(ctx, "/native_iam_identity.IAMIdentityService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMIdentityServiceClient) Get(ctx context.Context, in *GetIdentityRequest, opts ...grpc.CallOption) (*GetIdentityResponse, error) {
	out := new(GetIdentityResponse)
	err := c.cc.Invoke(ctx, "/native_iam_identity.IAMIdentityService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMIdentityServiceClient) Delete(ctx context.Context, in *DeleteIdentityRequest, opts ...grpc.CallOption) (*DeleteIdentityResponse, error) {
	out := new(DeleteIdentityResponse)
	err := c.cc.Invoke(ctx, "/native_iam_identity.IAMIdentityService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMIdentityServiceClient) Exists(ctx context.Context, in *ExistsIdentityRequest, opts ...grpc.CallOption) (*ExistsIdentityResponse, error) {
	out := new(ExistsIdentityResponse)
	err := c.cc.Invoke(ctx, "/native_iam_identity.IAMIdentityService/Exists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMIdentityServiceClient) List(ctx context.Context, in *ListIdentityRequest, opts ...grpc.CallOption) (IAMIdentityService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &IAMIdentityService_ServiceDesc.Streams[0], "/native_iam_identity.IAMIdentityService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &iAMIdentityServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IAMIdentityService_ListClient interface {
	Recv() (*ListIdentityResponse, error)
	grpc.ClientStream
}

type iAMIdentityServiceListClient struct {
	grpc.ClientStream
}

func (x *iAMIdentityServiceListClient) Recv() (*ListIdentityResponse, error) {
	m := new(ListIdentityResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iAMIdentityServiceClient) Count(ctx context.Context, in *CountIdentityRequest, opts ...grpc.CallOption) (*CountIdentityResponse, error) {
	out := new(CountIdentityResponse)
	err := c.cc.Invoke(ctx, "/native_iam_identity.IAMIdentityService/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMIdentityServiceClient) GetServiceManagedIdentity(ctx context.Context, in *GetServiceManagedIdentityRequest, opts ...grpc.CallOption) (*GetServiceManagedIdentityResponse, error) {
	out := new(GetServiceManagedIdentityResponse)
	err := c.cc.Invoke(ctx, "/native_iam_identity.IAMIdentityService/GetServiceManagedIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMIdentityServiceClient) Update(ctx context.Context, in *UpdateIdentityRequest, opts ...grpc.CallOption) (*UpdateIdentityResponse, error) {
	out := new(UpdateIdentityResponse)
	err := c.cc.Invoke(ctx, "/native_iam_identity.IAMIdentityService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMIdentityServiceClient) AddPolicy(ctx context.Context, in *AddPolicyRequest, opts ...grpc.CallOption) (*AddPolicyResponse, error) {
	out := new(AddPolicyResponse)
	err := c.cc.Invoke(ctx, "/native_iam_identity.IAMIdentityService/AddPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMIdentityServiceClient) RemovePolicy(ctx context.Context, in *RemovePolicyRequest, opts ...grpc.CallOption) (*RemovePolicyResponse, error) {
	out := new(RemovePolicyResponse)
	err := c.cc.Invoke(ctx, "/native_iam_identity.IAMIdentityService/RemovePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMIdentityServiceClient) AddRole(ctx context.Context, in *AddRoleRequest, opts ...grpc.CallOption) (*AddRoleResponse, error) {
	out := new(AddRoleResponse)
	err := c.cc.Invoke(ctx, "/native_iam_identity.IAMIdentityService/AddRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMIdentityServiceClient) RemoveRole(ctx context.Context, in *RemoveRoleRequest, opts ...grpc.CallOption) (*RemoveRoleResponse, error) {
	out := new(RemoveRoleResponse)
	err := c.cc.Invoke(ctx, "/native_iam_identity.IAMIdentityService/RemoveRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMIdentityServiceClient) SetActive(ctx context.Context, in *SetIdentityActiveRequest, opts ...grpc.CallOption) (*SetIdentityActiveResponse, error) {
	out := new(SetIdentityActiveResponse)
	err := c.cc.Invoke(ctx, "/native_iam_identity.IAMIdentityService/SetActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IAMIdentityServiceServer is the server API for IAMIdentityService service.
// All implementations must embed UnimplementedIAMIdentityServiceServer
// for forward compatibility
type IAMIdentityServiceServer interface {
	// Create new identity
	Create(context.Context, *CreateIdentityRequest) (*CreateIdentityResponse, error)
	// Get identity
	Get(context.Context, *GetIdentityRequest) (*GetIdentityResponse, error)
	// Delete identity
	Delete(context.Context, *DeleteIdentityRequest) (*DeleteIdentityResponse, error)
	// Check if identity exists
	Exists(context.Context, *ExistsIdentityRequest) (*ExistsIdentityResponse, error)
	// Get list of the identities
	List(*ListIdentityRequest, IAMIdentityService_ListServer) error
	// Get number of the identities in the namespace
	Count(context.Context, *CountIdentityRequest) (*CountIdentityResponse, error)
	// Get policy that is managed by service
	GetServiceManagedIdentity(context.Context, *GetServiceManagedIdentityRequest) (*GetServiceManagedIdentityResponse, error)
	// Update identity information
	Update(context.Context, *UpdateIdentityRequest) (*UpdateIdentityResponse, error)
	// Add policy to the identity. If policy was already added - does nothing.
	AddPolicy(context.Context, *AddPolicyRequest) (*AddPolicyResponse, error)
	// Remove policy from the identity. If policy was already removed - does nothing.
	RemovePolicy(context.Context, *RemovePolicyRequest) (*RemovePolicyResponse, error)
	// Add role to the identity. If role was already added = does nothing
	AddRole(context.Context, *AddRoleRequest) (*AddRoleResponse, error)
	// Remove role from the identity. If role was already removed - does nothing.
	RemoveRole(context.Context, *RemoveRoleRequest) (*RemoveRoleResponse, error)
	// Set identity active or not.
	SetActive(context.Context, *SetIdentityActiveRequest) (*SetIdentityActiveResponse, error)
	mustEmbedUnimplementedIAMIdentityServiceServer()
}

// UnimplementedIAMIdentityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIAMIdentityServiceServer struct {
}

func (UnimplementedIAMIdentityServiceServer) Create(context.Context, *CreateIdentityRequest) (*CreateIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedIAMIdentityServiceServer) Get(context.Context, *GetIdentityRequest) (*GetIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedIAMIdentityServiceServer) Delete(context.Context, *DeleteIdentityRequest) (*DeleteIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedIAMIdentityServiceServer) Exists(context.Context, *ExistsIdentityRequest) (*ExistsIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedIAMIdentityServiceServer) List(*ListIdentityRequest, IAMIdentityService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedIAMIdentityServiceServer) Count(context.Context, *CountIdentityRequest) (*CountIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedIAMIdentityServiceServer) GetServiceManagedIdentity(context.Context, *GetServiceManagedIdentityRequest) (*GetServiceManagedIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceManagedIdentity not implemented")
}
func (UnimplementedIAMIdentityServiceServer) Update(context.Context, *UpdateIdentityRequest) (*UpdateIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedIAMIdentityServiceServer) AddPolicy(context.Context, *AddPolicyRequest) (*AddPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPolicy not implemented")
}
func (UnimplementedIAMIdentityServiceServer) RemovePolicy(context.Context, *RemovePolicyRequest) (*RemovePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePolicy not implemented")
}
func (UnimplementedIAMIdentityServiceServer) AddRole(context.Context, *AddRoleRequest) (*AddRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRole not implemented")
}
func (UnimplementedIAMIdentityServiceServer) RemoveRole(context.Context, *RemoveRoleRequest) (*RemoveRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRole not implemented")
}
func (UnimplementedIAMIdentityServiceServer) SetActive(context.Context, *SetIdentityActiveRequest) (*SetIdentityActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActive not implemented")
}
func (UnimplementedIAMIdentityServiceServer) mustEmbedUnimplementedIAMIdentityServiceServer() {}

// UnsafeIAMIdentityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IAMIdentityServiceServer will
// result in compilation errors.
type UnsafeIAMIdentityServiceServer interface {
	mustEmbedUnimplementedIAMIdentityServiceServer()
}

func RegisterIAMIdentityServiceServer(s grpc.ServiceRegistrar, srv IAMIdentityServiceServer) {
	s.RegisterService(&IAMIdentityService_ServiceDesc, srv)
}

func _IAMIdentityService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMIdentityServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_identity.IAMIdentityService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMIdentityServiceServer).Create(ctx, req.(*CreateIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMIdentityService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMIdentityServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_identity.IAMIdentityService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMIdentityServiceServer).Get(ctx, req.(*GetIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMIdentityService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMIdentityServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_identity.IAMIdentityService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMIdentityServiceServer).Delete(ctx, req.(*DeleteIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMIdentityService_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMIdentityServiceServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_identity.IAMIdentityService/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMIdentityServiceServer).Exists(ctx, req.(*ExistsIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMIdentityService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListIdentityRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IAMIdentityServiceServer).List(m, &iAMIdentityServiceListServer{stream})
}

type IAMIdentityService_ListServer interface {
	Send(*ListIdentityResponse) error
	grpc.ServerStream
}

type iAMIdentityServiceListServer struct {
	grpc.ServerStream
}

func (x *iAMIdentityServiceListServer) Send(m *ListIdentityResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _IAMIdentityService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMIdentityServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_identity.IAMIdentityService/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMIdentityServiceServer).Count(ctx, req.(*CountIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMIdentityService_GetServiceManagedIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceManagedIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMIdentityServiceServer).GetServiceManagedIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_identity.IAMIdentityService/GetServiceManagedIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMIdentityServiceServer).GetServiceManagedIdentity(ctx, req.(*GetServiceManagedIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMIdentityService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMIdentityServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_identity.IAMIdentityService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMIdentityServiceServer).Update(ctx, req.(*UpdateIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMIdentityService_AddPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMIdentityServiceServer).AddPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_identity.IAMIdentityService/AddPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMIdentityServiceServer).AddPolicy(ctx, req.(*AddPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMIdentityService_RemovePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMIdentityServiceServer).RemovePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_identity.IAMIdentityService/RemovePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMIdentityServiceServer).RemovePolicy(ctx, req.(*RemovePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMIdentityService_AddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMIdentityServiceServer).AddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_identity.IAMIdentityService/AddRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMIdentityServiceServer).AddRole(ctx, req.(*AddRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMIdentityService_RemoveRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMIdentityServiceServer).RemoveRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_identity.IAMIdentityService/RemoveRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMIdentityServiceServer).RemoveRole(ctx, req.(*RemoveRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMIdentityService_SetActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIdentityActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMIdentityServiceServer).SetActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_identity.IAMIdentityService/SetActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMIdentityServiceServer).SetActive(ctx, req.(*SetIdentityActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IAMIdentityService_ServiceDesc is the grpc.ServiceDesc for IAMIdentityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IAMIdentityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "native_iam_identity.IAMIdentityService",
	HandlerType: (*IAMIdentityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _IAMIdentityService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _IAMIdentityService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _IAMIdentityService_Delete_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _IAMIdentityService_Exists_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _IAMIdentityService_Count_Handler,
		},
		{
			MethodName: "GetServiceManagedIdentity",
			Handler:    _IAMIdentityService_GetServiceManagedIdentity_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _IAMIdentityService_Update_Handler,
		},
		{
			MethodName: "AddPolicy",
			Handler:    _IAMIdentityService_AddPolicy_Handler,
		},
		{
			MethodName: "RemovePolicy",
			Handler:    _IAMIdentityService_RemovePolicy_Handler,
		},
		{
			MethodName: "AddRole",
			Handler:    _IAMIdentityService_AddRole_Handler,
		},
		{
			MethodName: "RemoveRole",
			Handler:    _IAMIdentityService_RemoveRole_Handler,
		},
		{
			MethodName: "SetActive",
			Handler:    _IAMIdentityService_SetActive_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _IAMIdentityService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "identity.proto",
}
