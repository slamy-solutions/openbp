// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: policy.proto

package policy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IAMPolicyServiceClient is the client API for IAMPolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IAMPolicyServiceClient interface {
	// Create new policy
	Create(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*CreatePolicyResponse, error)
	// Get existing policy by uuid
	Get(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error)
	// Get multiple policies.
	GetMultiple(ctx context.Context, in *GetMultiplePoliciesRequest, opts ...grpc.CallOption) (IAMPolicyService_GetMultipleClient, error)
	// Check if policy exist or not
	Exist(ctx context.Context, in *ExistPolicyRequest, opts ...grpc.CallOption) (*ExistPolicyResponse, error)
	// Update policy
	Update(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*UpdatePolicyResponse, error)
	// Delete policy
	Delete(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*DeletePolicyResponse, error)
	// List policies in namespace
	List(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (IAMPolicyService_ListClient, error)
	// Get policy that is managed by service
	GetServiceManagedPolicy(ctx context.Context, in *GetServiceManagedPolicyRequest, opts ...grpc.CallOption) (*GetServiceManagedPolicyResponse, error)
	// Get one of the builtin policies
	GetBuiltInPolicy(ctx context.Context, in *GetBuiltInPolicyRequest, opts ...grpc.CallOption) (*GetBuiltInPolicyResponse, error)
}

type iAMPolicyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIAMPolicyServiceClient(cc grpc.ClientConnInterface) IAMPolicyServiceClient {
	return &iAMPolicyServiceClient{cc}
}

func (c *iAMPolicyServiceClient) Create(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*CreatePolicyResponse, error) {
	out := new(CreatePolicyResponse)
	err := c.cc.Invoke(ctx, "/native_iam_policy.IAMPolicyService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMPolicyServiceClient) Get(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error) {
	out := new(GetPolicyResponse)
	err := c.cc.Invoke(ctx, "/native_iam_policy.IAMPolicyService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMPolicyServiceClient) GetMultiple(ctx context.Context, in *GetMultiplePoliciesRequest, opts ...grpc.CallOption) (IAMPolicyService_GetMultipleClient, error) {
	stream, err := c.cc.NewStream(ctx, &IAMPolicyService_ServiceDesc.Streams[0], "/native_iam_policy.IAMPolicyService/GetMultiple", opts...)
	if err != nil {
		return nil, err
	}
	x := &iAMPolicyServiceGetMultipleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IAMPolicyService_GetMultipleClient interface {
	Recv() (*GetMultiplePoliciesResponse, error)
	grpc.ClientStream
}

type iAMPolicyServiceGetMultipleClient struct {
	grpc.ClientStream
}

func (x *iAMPolicyServiceGetMultipleClient) Recv() (*GetMultiplePoliciesResponse, error) {
	m := new(GetMultiplePoliciesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iAMPolicyServiceClient) Exist(ctx context.Context, in *ExistPolicyRequest, opts ...grpc.CallOption) (*ExistPolicyResponse, error) {
	out := new(ExistPolicyResponse)
	err := c.cc.Invoke(ctx, "/native_iam_policy.IAMPolicyService/Exist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMPolicyServiceClient) Update(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*UpdatePolicyResponse, error) {
	out := new(UpdatePolicyResponse)
	err := c.cc.Invoke(ctx, "/native_iam_policy.IAMPolicyService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMPolicyServiceClient) Delete(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*DeletePolicyResponse, error) {
	out := new(DeletePolicyResponse)
	err := c.cc.Invoke(ctx, "/native_iam_policy.IAMPolicyService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMPolicyServiceClient) List(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (IAMPolicyService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &IAMPolicyService_ServiceDesc.Streams[1], "/native_iam_policy.IAMPolicyService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &iAMPolicyServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IAMPolicyService_ListClient interface {
	Recv() (*ListPoliciesResponse, error)
	grpc.ClientStream
}

type iAMPolicyServiceListClient struct {
	grpc.ClientStream
}

func (x *iAMPolicyServiceListClient) Recv() (*ListPoliciesResponse, error) {
	m := new(ListPoliciesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iAMPolicyServiceClient) GetServiceManagedPolicy(ctx context.Context, in *GetServiceManagedPolicyRequest, opts ...grpc.CallOption) (*GetServiceManagedPolicyResponse, error) {
	out := new(GetServiceManagedPolicyResponse)
	err := c.cc.Invoke(ctx, "/native_iam_policy.IAMPolicyService/GetServiceManagedPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMPolicyServiceClient) GetBuiltInPolicy(ctx context.Context, in *GetBuiltInPolicyRequest, opts ...grpc.CallOption) (*GetBuiltInPolicyResponse, error) {
	out := new(GetBuiltInPolicyResponse)
	err := c.cc.Invoke(ctx, "/native_iam_policy.IAMPolicyService/GetBuiltInPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IAMPolicyServiceServer is the server API for IAMPolicyService service.
// All implementations must embed UnimplementedIAMPolicyServiceServer
// for forward compatibility
type IAMPolicyServiceServer interface {
	// Create new policy
	Create(context.Context, *CreatePolicyRequest) (*CreatePolicyResponse, error)
	// Get existing policy by uuid
	Get(context.Context, *GetPolicyRequest) (*GetPolicyResponse, error)
	// Get multiple policies.
	GetMultiple(*GetMultiplePoliciesRequest, IAMPolicyService_GetMultipleServer) error
	// Check if policy exist or not
	Exist(context.Context, *ExistPolicyRequest) (*ExistPolicyResponse, error)
	// Update policy
	Update(context.Context, *UpdatePolicyRequest) (*UpdatePolicyResponse, error)
	// Delete policy
	Delete(context.Context, *DeletePolicyRequest) (*DeletePolicyResponse, error)
	// List policies in namespace
	List(*ListPoliciesRequest, IAMPolicyService_ListServer) error
	// Get policy that is managed by service
	GetServiceManagedPolicy(context.Context, *GetServiceManagedPolicyRequest) (*GetServiceManagedPolicyResponse, error)
	// Get one of the builtin policies
	GetBuiltInPolicy(context.Context, *GetBuiltInPolicyRequest) (*GetBuiltInPolicyResponse, error)
	mustEmbedUnimplementedIAMPolicyServiceServer()
}

// UnimplementedIAMPolicyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIAMPolicyServiceServer struct {
}

func (UnimplementedIAMPolicyServiceServer) Create(context.Context, *CreatePolicyRequest) (*CreatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedIAMPolicyServiceServer) Get(context.Context, *GetPolicyRequest) (*GetPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedIAMPolicyServiceServer) GetMultiple(*GetMultiplePoliciesRequest, IAMPolicyService_GetMultipleServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMultiple not implemented")
}
func (UnimplementedIAMPolicyServiceServer) Exist(context.Context, *ExistPolicyRequest) (*ExistPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exist not implemented")
}
func (UnimplementedIAMPolicyServiceServer) Update(context.Context, *UpdatePolicyRequest) (*UpdatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedIAMPolicyServiceServer) Delete(context.Context, *DeletePolicyRequest) (*DeletePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedIAMPolicyServiceServer) List(*ListPoliciesRequest, IAMPolicyService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedIAMPolicyServiceServer) GetServiceManagedPolicy(context.Context, *GetServiceManagedPolicyRequest) (*GetServiceManagedPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceManagedPolicy not implemented")
}
func (UnimplementedIAMPolicyServiceServer) GetBuiltInPolicy(context.Context, *GetBuiltInPolicyRequest) (*GetBuiltInPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuiltInPolicy not implemented")
}
func (UnimplementedIAMPolicyServiceServer) mustEmbedUnimplementedIAMPolicyServiceServer() {}

// UnsafeIAMPolicyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IAMPolicyServiceServer will
// result in compilation errors.
type UnsafeIAMPolicyServiceServer interface {
	mustEmbedUnimplementedIAMPolicyServiceServer()
}

func RegisterIAMPolicyServiceServer(s grpc.ServiceRegistrar, srv IAMPolicyServiceServer) {
	s.RegisterService(&IAMPolicyService_ServiceDesc, srv)
}

func _IAMPolicyService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMPolicyServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_policy.IAMPolicyService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMPolicyServiceServer).Create(ctx, req.(*CreatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMPolicyService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMPolicyServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_policy.IAMPolicyService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMPolicyServiceServer).Get(ctx, req.(*GetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMPolicyService_GetMultiple_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMultiplePoliciesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IAMPolicyServiceServer).GetMultiple(m, &iAMPolicyServiceGetMultipleServer{stream})
}

type IAMPolicyService_GetMultipleServer interface {
	Send(*GetMultiplePoliciesResponse) error
	grpc.ServerStream
}

type iAMPolicyServiceGetMultipleServer struct {
	grpc.ServerStream
}

func (x *iAMPolicyServiceGetMultipleServer) Send(m *GetMultiplePoliciesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _IAMPolicyService_Exist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMPolicyServiceServer).Exist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_policy.IAMPolicyService/Exist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMPolicyServiceServer).Exist(ctx, req.(*ExistPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMPolicyService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMPolicyServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_policy.IAMPolicyService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMPolicyServiceServer).Update(ctx, req.(*UpdatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMPolicyService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMPolicyServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_policy.IAMPolicyService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMPolicyServiceServer).Delete(ctx, req.(*DeletePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMPolicyService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPoliciesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IAMPolicyServiceServer).List(m, &iAMPolicyServiceListServer{stream})
}

type IAMPolicyService_ListServer interface {
	Send(*ListPoliciesResponse) error
	grpc.ServerStream
}

type iAMPolicyServiceListServer struct {
	grpc.ServerStream
}

func (x *iAMPolicyServiceListServer) Send(m *ListPoliciesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _IAMPolicyService_GetServiceManagedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceManagedPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMPolicyServiceServer).GetServiceManagedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_policy.IAMPolicyService/GetServiceManagedPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMPolicyServiceServer).GetServiceManagedPolicy(ctx, req.(*GetServiceManagedPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMPolicyService_GetBuiltInPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuiltInPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMPolicyServiceServer).GetBuiltInPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_policy.IAMPolicyService/GetBuiltInPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMPolicyServiceServer).GetBuiltInPolicy(ctx, req.(*GetBuiltInPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IAMPolicyService_ServiceDesc is the grpc.ServiceDesc for IAMPolicyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IAMPolicyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "native_iam_policy.IAMPolicyService",
	HandlerType: (*IAMPolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _IAMPolicyService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _IAMPolicyService_Get_Handler,
		},
		{
			MethodName: "Exist",
			Handler:    _IAMPolicyService_Exist_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _IAMPolicyService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _IAMPolicyService_Delete_Handler,
		},
		{
			MethodName: "GetServiceManagedPolicy",
			Handler:    _IAMPolicyService_GetServiceManagedPolicy_Handler,
		},
		{
			MethodName: "GetBuiltInPolicy",
			Handler:    _IAMPolicyService_GetBuiltInPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMultiple",
			Handler:       _IAMPolicyService_GetMultiple_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "List",
			Handler:       _IAMPolicyService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "policy.proto",
}
