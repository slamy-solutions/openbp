// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: bucket.proto

package native_storage_bucket_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BucketServiceClient is the client API for BucketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BucketServiceClient interface {
	Create(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketResponse, error)
	Ensure(ctx context.Context, in *EnsureBucketRequest, opts ...grpc.CallOption) (*EnsureBucketResponse, error)
	Get(ctx context.Context, in *GetBucketRequest, opts ...grpc.CallOption) (*GetBucketResponse, error)
	GetByUUID(ctx context.Context, in *GetBucketByUUIDRequest, opts ...grpc.CallOption) (*GetBucketByUUIDResponse, error)
	List(ctx context.Context, in *ListBucketsRequest, opts ...grpc.CallOption) (BucketService_ListClient, error)
	Count(ctx context.Context, in *CountBucketsRequest, opts ...grpc.CallOption) (*CountBucketsResponse, error)
	Update(ctx context.Context, in *UpdateBucketRequest, opts ...grpc.CallOption) (*UpdateBucketResponse, error)
	Delete(ctx context.Context, in *DeleteBucketRequest, opts ...grpc.CallOption) (*DeleteBucketResponse, error)
	DeleteByUUID(ctx context.Context, in *DeleteBucketByUUIDRequest, opts ...grpc.CallOption) (*DeleteBucketByUUIDResponse, error)
}

type bucketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBucketServiceClient(cc grpc.ClientConnInterface) BucketServiceClient {
	return &bucketServiceClient{cc}
}

func (c *bucketServiceClient) Create(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketResponse, error) {
	out := new(CreateBucketResponse)
	err := c.cc.Invoke(ctx, "/native_storage_bucket.BucketService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) Ensure(ctx context.Context, in *EnsureBucketRequest, opts ...grpc.CallOption) (*EnsureBucketResponse, error) {
	out := new(EnsureBucketResponse)
	err := c.cc.Invoke(ctx, "/native_storage_bucket.BucketService/Ensure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) Get(ctx context.Context, in *GetBucketRequest, opts ...grpc.CallOption) (*GetBucketResponse, error) {
	out := new(GetBucketResponse)
	err := c.cc.Invoke(ctx, "/native_storage_bucket.BucketService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) GetByUUID(ctx context.Context, in *GetBucketByUUIDRequest, opts ...grpc.CallOption) (*GetBucketByUUIDResponse, error) {
	out := new(GetBucketByUUIDResponse)
	err := c.cc.Invoke(ctx, "/native_storage_bucket.BucketService/GetByUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) List(ctx context.Context, in *ListBucketsRequest, opts ...grpc.CallOption) (BucketService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &BucketService_ServiceDesc.Streams[0], "/native_storage_bucket.BucketService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &bucketServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BucketService_ListClient interface {
	Recv() (*ListBucketsResponse, error)
	grpc.ClientStream
}

type bucketServiceListClient struct {
	grpc.ClientStream
}

func (x *bucketServiceListClient) Recv() (*ListBucketsResponse, error) {
	m := new(ListBucketsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bucketServiceClient) Count(ctx context.Context, in *CountBucketsRequest, opts ...grpc.CallOption) (*CountBucketsResponse, error) {
	out := new(CountBucketsResponse)
	err := c.cc.Invoke(ctx, "/native_storage_bucket.BucketService/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) Update(ctx context.Context, in *UpdateBucketRequest, opts ...grpc.CallOption) (*UpdateBucketResponse, error) {
	out := new(UpdateBucketResponse)
	err := c.cc.Invoke(ctx, "/native_storage_bucket.BucketService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) Delete(ctx context.Context, in *DeleteBucketRequest, opts ...grpc.CallOption) (*DeleteBucketResponse, error) {
	out := new(DeleteBucketResponse)
	err := c.cc.Invoke(ctx, "/native_storage_bucket.BucketService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) DeleteByUUID(ctx context.Context, in *DeleteBucketByUUIDRequest, opts ...grpc.CallOption) (*DeleteBucketByUUIDResponse, error) {
	out := new(DeleteBucketByUUIDResponse)
	err := c.cc.Invoke(ctx, "/native_storage_bucket.BucketService/DeleteByUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BucketServiceServer is the server API for BucketService service.
// All implementations must embed UnimplementedBucketServiceServer
// for forward compatibility
type BucketServiceServer interface {
	Create(context.Context, *CreateBucketRequest) (*CreateBucketResponse, error)
	Ensure(context.Context, *EnsureBucketRequest) (*EnsureBucketResponse, error)
	Get(context.Context, *GetBucketRequest) (*GetBucketResponse, error)
	GetByUUID(context.Context, *GetBucketByUUIDRequest) (*GetBucketByUUIDResponse, error)
	List(*ListBucketsRequest, BucketService_ListServer) error
	Count(context.Context, *CountBucketsRequest) (*CountBucketsResponse, error)
	Update(context.Context, *UpdateBucketRequest) (*UpdateBucketResponse, error)
	Delete(context.Context, *DeleteBucketRequest) (*DeleteBucketResponse, error)
	DeleteByUUID(context.Context, *DeleteBucketByUUIDRequest) (*DeleteBucketByUUIDResponse, error)
	mustEmbedUnimplementedBucketServiceServer()
}

// UnimplementedBucketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBucketServiceServer struct {
}

func (UnimplementedBucketServiceServer) Create(context.Context, *CreateBucketRequest) (*CreateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBucketServiceServer) Ensure(context.Context, *EnsureBucketRequest) (*EnsureBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ensure not implemented")
}
func (UnimplementedBucketServiceServer) Get(context.Context, *GetBucketRequest) (*GetBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBucketServiceServer) GetByUUID(context.Context, *GetBucketByUUIDRequest) (*GetBucketByUUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUUID not implemented")
}
func (UnimplementedBucketServiceServer) List(*ListBucketsRequest, BucketService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBucketServiceServer) Count(context.Context, *CountBucketsRequest) (*CountBucketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedBucketServiceServer) Update(context.Context, *UpdateBucketRequest) (*UpdateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBucketServiceServer) Delete(context.Context, *DeleteBucketRequest) (*DeleteBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBucketServiceServer) DeleteByUUID(context.Context, *DeleteBucketByUUIDRequest) (*DeleteBucketByUUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByUUID not implemented")
}
func (UnimplementedBucketServiceServer) mustEmbedUnimplementedBucketServiceServer() {}

// UnsafeBucketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BucketServiceServer will
// result in compilation errors.
type UnsafeBucketServiceServer interface {
	mustEmbedUnimplementedBucketServiceServer()
}

func RegisterBucketServiceServer(s grpc.ServiceRegistrar, srv BucketServiceServer) {
	s.RegisterService(&BucketService_ServiceDesc, srv)
}

func _BucketService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_storage_bucket.BucketService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).Create(ctx, req.(*CreateBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_Ensure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnsureBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).Ensure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_storage_bucket.BucketService/Ensure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).Ensure(ctx, req.(*EnsureBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_storage_bucket.BucketService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).Get(ctx, req.(*GetBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_GetByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBucketByUUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).GetByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_storage_bucket.BucketService/GetByUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).GetByUUID(ctx, req.(*GetBucketByUUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListBucketsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BucketServiceServer).List(m, &bucketServiceListServer{stream})
}

type BucketService_ListServer interface {
	Send(*ListBucketsResponse) error
	grpc.ServerStream
}

type bucketServiceListServer struct {
	grpc.ServerStream
}

func (x *bucketServiceListServer) Send(m *ListBucketsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BucketService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountBucketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_storage_bucket.BucketService/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).Count(ctx, req.(*CountBucketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_storage_bucket.BucketService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).Update(ctx, req.(*UpdateBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_storage_bucket.BucketService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).Delete(ctx, req.(*DeleteBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_DeleteByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBucketByUUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).DeleteByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_storage_bucket.BucketService/DeleteByUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).DeleteByUUID(ctx, req.(*DeleteBucketByUUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BucketService_ServiceDesc is the grpc.ServiceDesc for BucketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BucketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "native_storage_bucket.BucketService",
	HandlerType: (*BucketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BucketService_Create_Handler,
		},
		{
			MethodName: "Ensure",
			Handler:    _BucketService_Ensure_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BucketService_Get_Handler,
		},
		{
			MethodName: "GetByUUID",
			Handler:    _BucketService_GetByUUID_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _BucketService_Count_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BucketService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BucketService_Delete_Handler,
		},
		{
			MethodName: "DeleteByUUID",
			Handler:    _BucketService_DeleteByUUID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _BucketService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bucket.proto",
}
