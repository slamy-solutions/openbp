// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: fs.proto

package native_storage_fs_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FSServiceClient is the client API for FSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FSServiceClient interface {
	CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResponse, error)
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (FSService_UploadFileClient, error)
	StatFile(ctx context.Context, in *StatFileRequest, opts ...grpc.CallOption) (*StatFileResponse, error)
	UpdateFile(ctx context.Context, in *UpdateFileRequest, opts ...grpc.CallOption) (*UpdateFileResponse, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (FSService_ListFilesClient, error)
	CountFiles(ctx context.Context, in *CountFilesRequest, opts ...grpc.CallOption) (*CountFilesResponse, error)
	Download(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (FSService_DownloadClient, error)
	DownloadByPath(ctx context.Context, in *DownloadFileByPathRequest, opts ...grpc.CallOption) (FSService_DownloadByPathClient, error)
	DownloadDirect(ctx context.Context, in *DownloadDirectFileRequest, opts ...grpc.CallOption) (FSService_DownloadDirectClient, error)
	DownloadDirectByPath(ctx context.Context, in *DownloadDirectFileByPathRequest, opts ...grpc.CallOption) (FSService_DownloadDirectByPathClient, error)
}

type fSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFSServiceClient(cc grpc.ClientConnInterface) FSServiceClient {
	return &fSServiceClient{cc}
}

func (c *fSServiceClient) CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResponse, error) {
	out := new(CreateFileResponse)
	err := c.cc.Invoke(ctx, "/native_storage_fs.FSService/CreateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fSServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (FSService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FSService_ServiceDesc.Streams[0], "/native_storage_fs.FSService/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fSServiceUploadFileClient{stream}
	return x, nil
}

type FSService_UploadFileClient interface {
	Send(*UploadFileRequest) error
	CloseAndRecv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type fSServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *fSServiceUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fSServiceUploadFileClient) CloseAndRecv() (*UploadFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fSServiceClient) StatFile(ctx context.Context, in *StatFileRequest, opts ...grpc.CallOption) (*StatFileResponse, error) {
	out := new(StatFileResponse)
	err := c.cc.Invoke(ctx, "/native_storage_fs.FSService/StatFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fSServiceClient) UpdateFile(ctx context.Context, in *UpdateFileRequest, opts ...grpc.CallOption) (*UpdateFileResponse, error) {
	out := new(UpdateFileResponse)
	err := c.cc.Invoke(ctx, "/native_storage_fs.FSService/UpdateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fSServiceClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, "/native_storage_fs.FSService/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fSServiceClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (FSService_ListFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FSService_ServiceDesc.Streams[1], "/native_storage_fs.FSService/ListFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &fSServiceListFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FSService_ListFilesClient interface {
	Recv() (*ListFilesResponse, error)
	grpc.ClientStream
}

type fSServiceListFilesClient struct {
	grpc.ClientStream
}

func (x *fSServiceListFilesClient) Recv() (*ListFilesResponse, error) {
	m := new(ListFilesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fSServiceClient) CountFiles(ctx context.Context, in *CountFilesRequest, opts ...grpc.CallOption) (*CountFilesResponse, error) {
	out := new(CountFilesResponse)
	err := c.cc.Invoke(ctx, "/native_storage_fs.FSService/CountFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fSServiceClient) Download(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (FSService_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &FSService_ServiceDesc.Streams[2], "/native_storage_fs.FSService/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &fSServiceDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FSService_DownloadClient interface {
	Recv() (*DownloadFileResponse, error)
	grpc.ClientStream
}

type fSServiceDownloadClient struct {
	grpc.ClientStream
}

func (x *fSServiceDownloadClient) Recv() (*DownloadFileResponse, error) {
	m := new(DownloadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fSServiceClient) DownloadByPath(ctx context.Context, in *DownloadFileByPathRequest, opts ...grpc.CallOption) (FSService_DownloadByPathClient, error) {
	stream, err := c.cc.NewStream(ctx, &FSService_ServiceDesc.Streams[3], "/native_storage_fs.FSService/DownloadByPath", opts...)
	if err != nil {
		return nil, err
	}
	x := &fSServiceDownloadByPathClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FSService_DownloadByPathClient interface {
	Recv() (*DownloadFileByPathResponse, error)
	grpc.ClientStream
}

type fSServiceDownloadByPathClient struct {
	grpc.ClientStream
}

func (x *fSServiceDownloadByPathClient) Recv() (*DownloadFileByPathResponse, error) {
	m := new(DownloadFileByPathResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fSServiceClient) DownloadDirect(ctx context.Context, in *DownloadDirectFileRequest, opts ...grpc.CallOption) (FSService_DownloadDirectClient, error) {
	stream, err := c.cc.NewStream(ctx, &FSService_ServiceDesc.Streams[4], "/native_storage_fs.FSService/DownloadDirect", opts...)
	if err != nil {
		return nil, err
	}
	x := &fSServiceDownloadDirectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FSService_DownloadDirectClient interface {
	Recv() (*DownloadDirectFileResponse, error)
	grpc.ClientStream
}

type fSServiceDownloadDirectClient struct {
	grpc.ClientStream
}

func (x *fSServiceDownloadDirectClient) Recv() (*DownloadDirectFileResponse, error) {
	m := new(DownloadDirectFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fSServiceClient) DownloadDirectByPath(ctx context.Context, in *DownloadDirectFileByPathRequest, opts ...grpc.CallOption) (FSService_DownloadDirectByPathClient, error) {
	stream, err := c.cc.NewStream(ctx, &FSService_ServiceDesc.Streams[5], "/native_storage_fs.FSService/DownloadDirectByPath", opts...)
	if err != nil {
		return nil, err
	}
	x := &fSServiceDownloadDirectByPathClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FSService_DownloadDirectByPathClient interface {
	Recv() (*DownloadDirectFileByPathResponse, error)
	grpc.ClientStream
}

type fSServiceDownloadDirectByPathClient struct {
	grpc.ClientStream
}

func (x *fSServiceDownloadDirectByPathClient) Recv() (*DownloadDirectFileByPathResponse, error) {
	m := new(DownloadDirectFileByPathResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FSServiceServer is the server API for FSService service.
// All implementations must embed UnimplementedFSServiceServer
// for forward compatibility
type FSServiceServer interface {
	CreateFile(context.Context, *CreateFileRequest) (*CreateFileResponse, error)
	UploadFile(FSService_UploadFileServer) error
	StatFile(context.Context, *StatFileRequest) (*StatFileResponse, error)
	UpdateFile(context.Context, *UpdateFileRequest) (*UpdateFileResponse, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	ListFiles(*ListFilesRequest, FSService_ListFilesServer) error
	CountFiles(context.Context, *CountFilesRequest) (*CountFilesResponse, error)
	Download(*DownloadFileRequest, FSService_DownloadServer) error
	DownloadByPath(*DownloadFileByPathRequest, FSService_DownloadByPathServer) error
	DownloadDirect(*DownloadDirectFileRequest, FSService_DownloadDirectServer) error
	DownloadDirectByPath(*DownloadDirectFileByPathRequest, FSService_DownloadDirectByPathServer) error
	mustEmbedUnimplementedFSServiceServer()
}

// UnimplementedFSServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFSServiceServer struct {
}

func (UnimplementedFSServiceServer) CreateFile(context.Context, *CreateFileRequest) (*CreateFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedFSServiceServer) UploadFile(FSService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFSServiceServer) StatFile(context.Context, *StatFileRequest) (*StatFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatFile not implemented")
}
func (UnimplementedFSServiceServer) UpdateFile(context.Context, *UpdateFileRequest) (*UpdateFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFile not implemented")
}
func (UnimplementedFSServiceServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFSServiceServer) ListFiles(*ListFilesRequest, FSService_ListFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedFSServiceServer) CountFiles(context.Context, *CountFilesRequest) (*CountFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountFiles not implemented")
}
func (UnimplementedFSServiceServer) Download(*DownloadFileRequest, FSService_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedFSServiceServer) DownloadByPath(*DownloadFileByPathRequest, FSService_DownloadByPathServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadByPath not implemented")
}
func (UnimplementedFSServiceServer) DownloadDirect(*DownloadDirectFileRequest, FSService_DownloadDirectServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadDirect not implemented")
}
func (UnimplementedFSServiceServer) DownloadDirectByPath(*DownloadDirectFileByPathRequest, FSService_DownloadDirectByPathServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadDirectByPath not implemented")
}
func (UnimplementedFSServiceServer) mustEmbedUnimplementedFSServiceServer() {}

// UnsafeFSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FSServiceServer will
// result in compilation errors.
type UnsafeFSServiceServer interface {
	mustEmbedUnimplementedFSServiceServer()
}

func RegisterFSServiceServer(s grpc.ServiceRegistrar, srv FSServiceServer) {
	s.RegisterService(&FSService_ServiceDesc, srv)
}

func _FSService_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FSServiceServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_storage_fs.FSService/CreateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FSServiceServer).CreateFile(ctx, req.(*CreateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FSService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FSServiceServer).UploadFile(&fSServiceUploadFileServer{stream})
}

type FSService_UploadFileServer interface {
	SendAndClose(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type fSServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *fSServiceUploadFileServer) SendAndClose(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fSServiceUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FSService_StatFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FSServiceServer).StatFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_storage_fs.FSService/StatFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FSServiceServer).StatFile(ctx, req.(*StatFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FSService_UpdateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FSServiceServer).UpdateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_storage_fs.FSService/UpdateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FSServiceServer).UpdateFile(ctx, req.(*UpdateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FSService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FSServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_storage_fs.FSService/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FSServiceServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FSService_ListFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListFilesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FSServiceServer).ListFiles(m, &fSServiceListFilesServer{stream})
}

type FSService_ListFilesServer interface {
	Send(*ListFilesResponse) error
	grpc.ServerStream
}

type fSServiceListFilesServer struct {
	grpc.ServerStream
}

func (x *fSServiceListFilesServer) Send(m *ListFilesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FSService_CountFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FSServiceServer).CountFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_storage_fs.FSService/CountFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FSServiceServer).CountFiles(ctx, req.(*CountFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FSService_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FSServiceServer).Download(m, &fSServiceDownloadServer{stream})
}

type FSService_DownloadServer interface {
	Send(*DownloadFileResponse) error
	grpc.ServerStream
}

type fSServiceDownloadServer struct {
	grpc.ServerStream
}

func (x *fSServiceDownloadServer) Send(m *DownloadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FSService_DownloadByPath_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileByPathRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FSServiceServer).DownloadByPath(m, &fSServiceDownloadByPathServer{stream})
}

type FSService_DownloadByPathServer interface {
	Send(*DownloadFileByPathResponse) error
	grpc.ServerStream
}

type fSServiceDownloadByPathServer struct {
	grpc.ServerStream
}

func (x *fSServiceDownloadByPathServer) Send(m *DownloadFileByPathResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FSService_DownloadDirect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadDirectFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FSServiceServer).DownloadDirect(m, &fSServiceDownloadDirectServer{stream})
}

type FSService_DownloadDirectServer interface {
	Send(*DownloadDirectFileResponse) error
	grpc.ServerStream
}

type fSServiceDownloadDirectServer struct {
	grpc.ServerStream
}

func (x *fSServiceDownloadDirectServer) Send(m *DownloadDirectFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FSService_DownloadDirectByPath_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadDirectFileByPathRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FSServiceServer).DownloadDirectByPath(m, &fSServiceDownloadDirectByPathServer{stream})
}

type FSService_DownloadDirectByPathServer interface {
	Send(*DownloadDirectFileByPathResponse) error
	grpc.ServerStream
}

type fSServiceDownloadDirectByPathServer struct {
	grpc.ServerStream
}

func (x *fSServiceDownloadDirectByPathServer) Send(m *DownloadDirectFileByPathResponse) error {
	return x.ServerStream.SendMsg(m)
}

// FSService_ServiceDesc is the grpc.ServiceDesc for FSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "native_storage_fs.FSService",
	HandlerType: (*FSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFile",
			Handler:    _FSService_CreateFile_Handler,
		},
		{
			MethodName: "StatFile",
			Handler:    _FSService_StatFile_Handler,
		},
		{
			MethodName: "UpdateFile",
			Handler:    _FSService_UpdateFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _FSService_DeleteFile_Handler,
		},
		{
			MethodName: "CountFiles",
			Handler:    _FSService_CountFiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _FSService_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ListFiles",
			Handler:       _FSService_ListFiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _FSService_Download_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadByPath",
			Handler:       _FSService_DownloadByPath_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadDirect",
			Handler:       _FSService_DownloadDirect_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadDirectByPath",
			Handler:       _FSService_DownloadDirectByPath_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fs.proto",
}
