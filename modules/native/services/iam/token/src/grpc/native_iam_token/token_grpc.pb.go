// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: token.proto

package native_iam_token_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IAMTokenServiceClient is the client API for IAMTokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IAMTokenServiceClient interface {
	// Create new token
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Get token data using token UUID (unique identifier)
	GetByUUID(ctx context.Context, in *GetByUUIDRequest, opts ...grpc.CallOption) (*GetByUUIDResponse, error)
	// Disable token using its unique identifier
	DisableByUUID(ctx context.Context, in *DisableByUUIDRequest, opts ...grpc.CallOption) (*DisableByUUIDResponse, error)
	// Validates token and gets its scopes
	Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthorizeResponse, error)
	// Validates refresh token and create new token based on it. New token will have same scopes
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error)
	// Returns list of tokens for specified identity
	TokensForIdentity(ctx context.Context, in *TokensForIdentityRequest, opts ...grpc.CallOption) (IAMTokenService_TokensForIdentityClient, error)
}

type iAMTokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIAMTokenServiceClient(cc grpc.ClientConnInterface) IAMTokenServiceClient {
	return &iAMTokenServiceClient{cc}
}

func (c *iAMTokenServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/native_iam_token.IAMTokenService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMTokenServiceClient) GetByUUID(ctx context.Context, in *GetByUUIDRequest, opts ...grpc.CallOption) (*GetByUUIDResponse, error) {
	out := new(GetByUUIDResponse)
	err := c.cc.Invoke(ctx, "/native_iam_token.IAMTokenService/GetByUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMTokenServiceClient) DisableByUUID(ctx context.Context, in *DisableByUUIDRequest, opts ...grpc.CallOption) (*DisableByUUIDResponse, error) {
	out := new(DisableByUUIDResponse)
	err := c.cc.Invoke(ctx, "/native_iam_token.IAMTokenService/DisableByUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMTokenServiceClient) Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthorizeResponse, error) {
	out := new(AuthorizeResponse)
	err := c.cc.Invoke(ctx, "/native_iam_token.IAMTokenService/Authorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMTokenServiceClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	out := new(RefreshResponse)
	err := c.cc.Invoke(ctx, "/native_iam_token.IAMTokenService/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMTokenServiceClient) TokensForIdentity(ctx context.Context, in *TokensForIdentityRequest, opts ...grpc.CallOption) (IAMTokenService_TokensForIdentityClient, error) {
	stream, err := c.cc.NewStream(ctx, &IAMTokenService_ServiceDesc.Streams[0], "/native_iam_token.IAMTokenService/TokensForIdentity", opts...)
	if err != nil {
		return nil, err
	}
	x := &iAMTokenServiceTokensForIdentityClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IAMTokenService_TokensForIdentityClient interface {
	Recv() (*TokensForIdentityResponse, error)
	grpc.ClientStream
}

type iAMTokenServiceTokensForIdentityClient struct {
	grpc.ClientStream
}

func (x *iAMTokenServiceTokensForIdentityClient) Recv() (*TokensForIdentityResponse, error) {
	m := new(TokensForIdentityResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IAMTokenServiceServer is the server API for IAMTokenService service.
// All implementations must embed UnimplementedIAMTokenServiceServer
// for forward compatibility
type IAMTokenServiceServer interface {
	// Create new token
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Get token data using token UUID (unique identifier)
	GetByUUID(context.Context, *GetByUUIDRequest) (*GetByUUIDResponse, error)
	// Disable token using its unique identifier
	DisableByUUID(context.Context, *DisableByUUIDRequest) (*DisableByUUIDResponse, error)
	// Validates token and gets its scopes
	Authorize(context.Context, *AuthorizeRequest) (*AuthorizeResponse, error)
	// Validates refresh token and create new token based on it. New token will have same scopes
	Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error)
	// Returns list of tokens for specified identity
	TokensForIdentity(*TokensForIdentityRequest, IAMTokenService_TokensForIdentityServer) error
	mustEmbedUnimplementedIAMTokenServiceServer()
}

// UnimplementedIAMTokenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIAMTokenServiceServer struct {
}

func (UnimplementedIAMTokenServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedIAMTokenServiceServer) GetByUUID(context.Context, *GetByUUIDRequest) (*GetByUUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUUID not implemented")
}
func (UnimplementedIAMTokenServiceServer) DisableByUUID(context.Context, *DisableByUUIDRequest) (*DisableByUUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableByUUID not implemented")
}
func (UnimplementedIAMTokenServiceServer) Authorize(context.Context, *AuthorizeRequest) (*AuthorizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedIAMTokenServiceServer) Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedIAMTokenServiceServer) TokensForIdentity(*TokensForIdentityRequest, IAMTokenService_TokensForIdentityServer) error {
	return status.Errorf(codes.Unimplemented, "method TokensForIdentity not implemented")
}
func (UnimplementedIAMTokenServiceServer) mustEmbedUnimplementedIAMTokenServiceServer() {}

// UnsafeIAMTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IAMTokenServiceServer will
// result in compilation errors.
type UnsafeIAMTokenServiceServer interface {
	mustEmbedUnimplementedIAMTokenServiceServer()
}

func RegisterIAMTokenServiceServer(s grpc.ServiceRegistrar, srv IAMTokenServiceServer) {
	s.RegisterService(&IAMTokenService_ServiceDesc, srv)
}

func _IAMTokenService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMTokenServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_token.IAMTokenService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMTokenServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMTokenService_GetByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByUUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMTokenServiceServer).GetByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_token.IAMTokenService/GetByUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMTokenServiceServer).GetByUUID(ctx, req.(*GetByUUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMTokenService_DisableByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableByUUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMTokenServiceServer).DisableByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_token.IAMTokenService/DisableByUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMTokenServiceServer).DisableByUUID(ctx, req.(*DisableByUUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMTokenService_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMTokenServiceServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_token.IAMTokenService/Authorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMTokenServiceServer).Authorize(ctx, req.(*AuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMTokenService_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMTokenServiceServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_token.IAMTokenService/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMTokenServiceServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMTokenService_TokensForIdentity_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TokensForIdentityRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IAMTokenServiceServer).TokensForIdentity(m, &iAMTokenServiceTokensForIdentityServer{stream})
}

type IAMTokenService_TokensForIdentityServer interface {
	Send(*TokensForIdentityResponse) error
	grpc.ServerStream
}

type iAMTokenServiceTokensForIdentityServer struct {
	grpc.ServerStream
}

func (x *iAMTokenServiceTokensForIdentityServer) Send(m *TokensForIdentityResponse) error {
	return x.ServerStream.SendMsg(m)
}

// IAMTokenService_ServiceDesc is the grpc.ServiceDesc for IAMTokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IAMTokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "native_iam_token.IAMTokenService",
	HandlerType: (*IAMTokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _IAMTokenService_Create_Handler,
		},
		{
			MethodName: "GetByUUID",
			Handler:    _IAMTokenService_GetByUUID_Handler,
		},
		{
			MethodName: "DisableByUUID",
			Handler:    _IAMTokenService_DisableByUUID_Handler,
		},
		{
			MethodName: "Authorize",
			Handler:    _IAMTokenService_Authorize_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _IAMTokenService_Refresh_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TokensForIdentity",
			Handler:       _IAMTokenService_TokensForIdentity_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "token.proto",
}
