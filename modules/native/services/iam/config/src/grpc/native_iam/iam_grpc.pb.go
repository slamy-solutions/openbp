// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: iam.proto

package native_iam_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IAMConfigServiceClient is the client API for IAMConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IAMConfigServiceClient interface {
	Get(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigresponse, error)
	Set(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error)
}

type iAMConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIAMConfigServiceClient(cc grpc.ClientConnInterface) IAMConfigServiceClient {
	return &iAMConfigServiceClient{cc}
}

func (c *iAMConfigServiceClient) Get(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigresponse, error) {
	out := new(GetConfigresponse)
	err := c.cc.Invoke(ctx, "/native_iam.IAMConfigService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMConfigServiceClient) Set(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error) {
	out := new(SetConfigResponse)
	err := c.cc.Invoke(ctx, "/native_iam.IAMConfigService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IAMConfigServiceServer is the server API for IAMConfigService service.
// All implementations must embed UnimplementedIAMConfigServiceServer
// for forward compatibility
type IAMConfigServiceServer interface {
	Get(context.Context, *GetConfigRequest) (*GetConfigresponse, error)
	Set(context.Context, *SetConfigRequest) (*SetConfigResponse, error)
	mustEmbedUnimplementedIAMConfigServiceServer()
}

// UnimplementedIAMConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIAMConfigServiceServer struct {
}

func (UnimplementedIAMConfigServiceServer) Get(context.Context, *GetConfigRequest) (*GetConfigresponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedIAMConfigServiceServer) Set(context.Context, *SetConfigRequest) (*SetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedIAMConfigServiceServer) mustEmbedUnimplementedIAMConfigServiceServer() {}

// UnsafeIAMConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IAMConfigServiceServer will
// result in compilation errors.
type UnsafeIAMConfigServiceServer interface {
	mustEmbedUnimplementedIAMConfigServiceServer()
}

func RegisterIAMConfigServiceServer(s grpc.ServiceRegistrar, srv IAMConfigServiceServer) {
	s.RegisterService(&IAMConfigService_ServiceDesc, srv)
}

func _IAMConfigService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMConfigServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam.IAMConfigService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMConfigServiceServer).Get(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam.IAMConfigService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMConfigServiceServer).Set(ctx, req.(*SetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IAMConfigService_ServiceDesc is the grpc.ServiceDesc for IAMConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IAMConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "native_iam.IAMConfigService",
	HandlerType: (*IAMConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _IAMConfigService_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _IAMConfigService_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iam.proto",
}

// IAMUserServiceClient is the client API for IAMUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IAMUserServiceClient interface {
	// Get user
	Get(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
}

type iAMUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIAMUserServiceClient(cc grpc.ClientConnInterface) IAMUserServiceClient {
	return &iAMUserServiceClient{cc}
}

func (c *iAMUserServiceClient) Get(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/native_iam.IAMUserService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IAMUserServiceServer is the server API for IAMUserService service.
// All implementations must embed UnimplementedIAMUserServiceServer
// for forward compatibility
type IAMUserServiceServer interface {
	// Get user
	Get(context.Context, *GetUserRequest) (*GetUserResponse, error)
	mustEmbedUnimplementedIAMUserServiceServer()
}

// UnimplementedIAMUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIAMUserServiceServer struct {
}

func (UnimplementedIAMUserServiceServer) Get(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedIAMUserServiceServer) mustEmbedUnimplementedIAMUserServiceServer() {}

// UnsafeIAMUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IAMUserServiceServer will
// result in compilation errors.
type UnsafeIAMUserServiceServer interface {
	mustEmbedUnimplementedIAMUserServiceServer()
}

func RegisterIAMUserServiceServer(s grpc.ServiceRegistrar, srv IAMUserServiceServer) {
	s.RegisterService(&IAMUserService_ServiceDesc, srv)
}

func _IAMUserService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMUserServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam.IAMUserService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMUserServiceServer).Get(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IAMUserService_ServiceDesc is the grpc.ServiceDesc for IAMUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IAMUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "native_iam.IAMUserService",
	HandlerType: (*IAMUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _IAMUserService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iam.proto",
}

// IAMAuthServiceClient is the client API for IAMAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IAMAuthServiceClient interface {
	// Create access token and refresh token using password. Creates user if not exist
	LoginWithPassword(ctx context.Context, in *LoginWithPasswordRequest, opts ...grpc.CallOption) (*LoginWithPasswordResponse, error)
	// Create access token and refresh token using thrid party OAuth2 provider. Creates user if not exist
	LoginWithOAuth2(ctx context.Context, in *LoginWithOAuth2Request, opts ...grpc.CallOption) (*LoginWithOAuth2Response, error)
	// Create access token and refresh token using SSO (Single Sign On)
	// rpc LoginWithSSO() returns ();
	// Completes started two factor TOTP (Time-based one-time password) authetication and returns actual access asn refresh tokens
	CompleteTwoFactorTOTP(ctx context.Context, in *CompleteTwoFactorTOTPRequest, opts ...grpc.CallOption) (*CompleteTwoFactorTOTPResponse, error)
	// Creates new access token using refresh token
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	// Invalidates pare of access token and refresh tokens
	InvalidateToken(ctx context.Context, in *InvalidateTokenRequest, opts ...grpc.CallOption) (*InvalidateTokenResponse, error)
	// Verifies if token has access to provided resources
	VerifyAccess(ctx context.Context, in *VerifyAccessRequest, opts ...grpc.CallOption) (*VerifyAccessResponse, error)
}

type iAMAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIAMAuthServiceClient(cc grpc.ClientConnInterface) IAMAuthServiceClient {
	return &iAMAuthServiceClient{cc}
}

func (c *iAMAuthServiceClient) LoginWithPassword(ctx context.Context, in *LoginWithPasswordRequest, opts ...grpc.CallOption) (*LoginWithPasswordResponse, error) {
	out := new(LoginWithPasswordResponse)
	err := c.cc.Invoke(ctx, "/native_iam.IAMAuthService/LoginWithPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMAuthServiceClient) LoginWithOAuth2(ctx context.Context, in *LoginWithOAuth2Request, opts ...grpc.CallOption) (*LoginWithOAuth2Response, error) {
	out := new(LoginWithOAuth2Response)
	err := c.cc.Invoke(ctx, "/native_iam.IAMAuthService/LoginWithOAuth2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMAuthServiceClient) CompleteTwoFactorTOTP(ctx context.Context, in *CompleteTwoFactorTOTPRequest, opts ...grpc.CallOption) (*CompleteTwoFactorTOTPResponse, error) {
	out := new(CompleteTwoFactorTOTPResponse)
	err := c.cc.Invoke(ctx, "/native_iam.IAMAuthService/CompleteTwoFactorTOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMAuthServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, "/native_iam.IAMAuthService/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMAuthServiceClient) InvalidateToken(ctx context.Context, in *InvalidateTokenRequest, opts ...grpc.CallOption) (*InvalidateTokenResponse, error) {
	out := new(InvalidateTokenResponse)
	err := c.cc.Invoke(ctx, "/native_iam.IAMAuthService/InvalidateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMAuthServiceClient) VerifyAccess(ctx context.Context, in *VerifyAccessRequest, opts ...grpc.CallOption) (*VerifyAccessResponse, error) {
	out := new(VerifyAccessResponse)
	err := c.cc.Invoke(ctx, "/native_iam.IAMAuthService/VerifyAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IAMAuthServiceServer is the server API for IAMAuthService service.
// All implementations must embed UnimplementedIAMAuthServiceServer
// for forward compatibility
type IAMAuthServiceServer interface {
	// Create access token and refresh token using password. Creates user if not exist
	LoginWithPassword(context.Context, *LoginWithPasswordRequest) (*LoginWithPasswordResponse, error)
	// Create access token and refresh token using thrid party OAuth2 provider. Creates user if not exist
	LoginWithOAuth2(context.Context, *LoginWithOAuth2Request) (*LoginWithOAuth2Response, error)
	// Create access token and refresh token using SSO (Single Sign On)
	// rpc LoginWithSSO() returns ();
	// Completes started two factor TOTP (Time-based one-time password) authetication and returns actual access asn refresh tokens
	CompleteTwoFactorTOTP(context.Context, *CompleteTwoFactorTOTPRequest) (*CompleteTwoFactorTOTPResponse, error)
	// Creates new access token using refresh token
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	// Invalidates pare of access token and refresh tokens
	InvalidateToken(context.Context, *InvalidateTokenRequest) (*InvalidateTokenResponse, error)
	// Verifies if token has access to provided resources
	VerifyAccess(context.Context, *VerifyAccessRequest) (*VerifyAccessResponse, error)
	mustEmbedUnimplementedIAMAuthServiceServer()
}

// UnimplementedIAMAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIAMAuthServiceServer struct {
}

func (UnimplementedIAMAuthServiceServer) LoginWithPassword(context.Context, *LoginWithPasswordRequest) (*LoginWithPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithPassword not implemented")
}
func (UnimplementedIAMAuthServiceServer) LoginWithOAuth2(context.Context, *LoginWithOAuth2Request) (*LoginWithOAuth2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithOAuth2 not implemented")
}
func (UnimplementedIAMAuthServiceServer) CompleteTwoFactorTOTP(context.Context, *CompleteTwoFactorTOTPRequest) (*CompleteTwoFactorTOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteTwoFactorTOTP not implemented")
}
func (UnimplementedIAMAuthServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedIAMAuthServiceServer) InvalidateToken(context.Context, *InvalidateTokenRequest) (*InvalidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateToken not implemented")
}
func (UnimplementedIAMAuthServiceServer) VerifyAccess(context.Context, *VerifyAccessRequest) (*VerifyAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAccess not implemented")
}
func (UnimplementedIAMAuthServiceServer) mustEmbedUnimplementedIAMAuthServiceServer() {}

// UnsafeIAMAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IAMAuthServiceServer will
// result in compilation errors.
type UnsafeIAMAuthServiceServer interface {
	mustEmbedUnimplementedIAMAuthServiceServer()
}

func RegisterIAMAuthServiceServer(s grpc.ServiceRegistrar, srv IAMAuthServiceServer) {
	s.RegisterService(&IAMAuthService_ServiceDesc, srv)
}

func _IAMAuthService_LoginWithPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWithPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthServiceServer).LoginWithPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam.IAMAuthService/LoginWithPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthServiceServer).LoginWithPassword(ctx, req.(*LoginWithPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMAuthService_LoginWithOAuth2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWithOAuth2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthServiceServer).LoginWithOAuth2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam.IAMAuthService/LoginWithOAuth2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthServiceServer).LoginWithOAuth2(ctx, req.(*LoginWithOAuth2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMAuthService_CompleteTwoFactorTOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteTwoFactorTOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthServiceServer).CompleteTwoFactorTOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam.IAMAuthService/CompleteTwoFactorTOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthServiceServer).CompleteTwoFactorTOTP(ctx, req.(*CompleteTwoFactorTOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMAuthService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam.IAMAuthService/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMAuthService_InvalidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthServiceServer).InvalidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam.IAMAuthService/InvalidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthServiceServer).InvalidateToken(ctx, req.(*InvalidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMAuthService_VerifyAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthServiceServer).VerifyAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam.IAMAuthService/VerifyAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthServiceServer).VerifyAccess(ctx, req.(*VerifyAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IAMAuthService_ServiceDesc is the grpc.ServiceDesc for IAMAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IAMAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "native_iam.IAMAuthService",
	HandlerType: (*IAMAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginWithPassword",
			Handler:    _IAMAuthService_LoginWithPassword_Handler,
		},
		{
			MethodName: "LoginWithOAuth2",
			Handler:    _IAMAuthService_LoginWithOAuth2_Handler,
		},
		{
			MethodName: "CompleteTwoFactorTOTP",
			Handler:    _IAMAuthService_CompleteTwoFactorTOTP_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _IAMAuthService_RefreshToken_Handler,
		},
		{
			MethodName: "InvalidateToken",
			Handler:    _IAMAuthService_InvalidateToken_Handler,
		},
		{
			MethodName: "VerifyAccess",
			Handler:    _IAMAuthService_VerifyAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iam.proto",
}
