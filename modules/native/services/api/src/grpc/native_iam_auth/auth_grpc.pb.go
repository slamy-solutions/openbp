// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: auth.proto

package native_iam_auth_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IAMAuthServiceClient is the client API for IAMAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IAMAuthServiceClient interface {
	// Create access token and refresh token using password. Creates identity if not exist
	CreateTokenWithPassword(ctx context.Context, in *CreateTokenWithPasswordRequest, opts ...grpc.CallOption) (*CreateTokenWithPasswordResponse, error)
	// Creates new access token using refresh token
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	// Invalidates pare of access token and refresh tokens
	InvalidateToken(ctx context.Context, in *InvalidateTokenRequest, opts ...grpc.CallOption) (*InvalidateTokenResponse, error)
	// Verifies if token can perform actions on the resources
	VerifyTokenAccess(ctx context.Context, in *VerifyTokenAccessRequest, opts ...grpc.CallOption) (*VerifyTokenAccessResponse, error)
}

type iAMAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIAMAuthServiceClient(cc grpc.ClientConnInterface) IAMAuthServiceClient {
	return &iAMAuthServiceClient{cc}
}

func (c *iAMAuthServiceClient) CreateTokenWithPassword(ctx context.Context, in *CreateTokenWithPasswordRequest, opts ...grpc.CallOption) (*CreateTokenWithPasswordResponse, error) {
	out := new(CreateTokenWithPasswordResponse)
	err := c.cc.Invoke(ctx, "/native_iam_auth.IAMAuthService/CreateTokenWithPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMAuthServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, "/native_iam_auth.IAMAuthService/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMAuthServiceClient) InvalidateToken(ctx context.Context, in *InvalidateTokenRequest, opts ...grpc.CallOption) (*InvalidateTokenResponse, error) {
	out := new(InvalidateTokenResponse)
	err := c.cc.Invoke(ctx, "/native_iam_auth.IAMAuthService/InvalidateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMAuthServiceClient) VerifyTokenAccess(ctx context.Context, in *VerifyTokenAccessRequest, opts ...grpc.CallOption) (*VerifyTokenAccessResponse, error) {
	out := new(VerifyTokenAccessResponse)
	err := c.cc.Invoke(ctx, "/native_iam_auth.IAMAuthService/VerifyTokenAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IAMAuthServiceServer is the server API for IAMAuthService service.
// All implementations must embed UnimplementedIAMAuthServiceServer
// for forward compatibility
type IAMAuthServiceServer interface {
	// Create access token and refresh token using password. Creates identity if not exist
	CreateTokenWithPassword(context.Context, *CreateTokenWithPasswordRequest) (*CreateTokenWithPasswordResponse, error)
	// Creates new access token using refresh token
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	// Invalidates pare of access token and refresh tokens
	InvalidateToken(context.Context, *InvalidateTokenRequest) (*InvalidateTokenResponse, error)
	// Verifies if token can perform actions on the resources
	VerifyTokenAccess(context.Context, *VerifyTokenAccessRequest) (*VerifyTokenAccessResponse, error)
	mustEmbedUnimplementedIAMAuthServiceServer()
}

// UnimplementedIAMAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIAMAuthServiceServer struct {
}

func (UnimplementedIAMAuthServiceServer) CreateTokenWithPassword(context.Context, *CreateTokenWithPasswordRequest) (*CreateTokenWithPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTokenWithPassword not implemented")
}
func (UnimplementedIAMAuthServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedIAMAuthServiceServer) InvalidateToken(context.Context, *InvalidateTokenRequest) (*InvalidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateToken not implemented")
}
func (UnimplementedIAMAuthServiceServer) VerifyTokenAccess(context.Context, *VerifyTokenAccessRequest) (*VerifyTokenAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTokenAccess not implemented")
}
func (UnimplementedIAMAuthServiceServer) mustEmbedUnimplementedIAMAuthServiceServer() {}

// UnsafeIAMAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IAMAuthServiceServer will
// result in compilation errors.
type UnsafeIAMAuthServiceServer interface {
	mustEmbedUnimplementedIAMAuthServiceServer()
}

func RegisterIAMAuthServiceServer(s grpc.ServiceRegistrar, srv IAMAuthServiceServer) {
	s.RegisterService(&IAMAuthService_ServiceDesc, srv)
}

func _IAMAuthService_CreateTokenWithPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenWithPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthServiceServer).CreateTokenWithPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_auth.IAMAuthService/CreateTokenWithPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthServiceServer).CreateTokenWithPassword(ctx, req.(*CreateTokenWithPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMAuthService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_auth.IAMAuthService/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMAuthService_InvalidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthServiceServer).InvalidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_auth.IAMAuthService/InvalidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthServiceServer).InvalidateToken(ctx, req.(*InvalidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMAuthService_VerifyTokenAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMAuthServiceServer).VerifyTokenAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_auth.IAMAuthService/VerifyTokenAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMAuthServiceServer).VerifyTokenAccess(ctx, req.(*VerifyTokenAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IAMAuthService_ServiceDesc is the grpc.ServiceDesc for IAMAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IAMAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "native_iam_auth.IAMAuthService",
	HandlerType: (*IAMAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTokenWithPassword",
			Handler:    _IAMAuthService_CreateTokenWithPassword_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _IAMAuthService_RefreshToken_Handler,
		},
		{
			MethodName: "InvalidateToken",
			Handler:    _IAMAuthService_InvalidateToken_Handler,
		},
		{
			MethodName: "VerifyTokenAccess",
			Handler:    _IAMAuthService_VerifyTokenAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
