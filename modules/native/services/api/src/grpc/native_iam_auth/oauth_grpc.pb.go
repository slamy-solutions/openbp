// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: oauth.proto

package native_iam_oauth_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IAMOAuthServiceClient is the client API for IAMOAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IAMOAuthServiceClient interface {
	// Create access token and refresh token using password
	CreateTokenWithPassword(ctx context.Context, in *CreateTokenWithPasswordRequest, opts ...grpc.CallOption) (*CreateTokenWithPasswordResponse, error)
	// Creates new access token using refresh tokenna
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	// rpc VerifyResoureAccess(VerifyResourceAccessRequest) returns (VerifyResourceAccessResponse);
	// Checks if token is allowed to perform actions from the specified scopes
	CheckAccess(ctx context.Context, in *CheckAccessRequest, opts ...grpc.CallOption) (*CheckAccessResponse, error)
}

type iAMOAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIAMOAuthServiceClient(cc grpc.ClientConnInterface) IAMOAuthServiceClient {
	return &iAMOAuthServiceClient{cc}
}

func (c *iAMOAuthServiceClient) CreateTokenWithPassword(ctx context.Context, in *CreateTokenWithPasswordRequest, opts ...grpc.CallOption) (*CreateTokenWithPasswordResponse, error) {
	out := new(CreateTokenWithPasswordResponse)
	err := c.cc.Invoke(ctx, "/native_iam_oauth.IAMOAuthService/CreateTokenWithPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMOAuthServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, "/native_iam_oauth.IAMOAuthService/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMOAuthServiceClient) CheckAccess(ctx context.Context, in *CheckAccessRequest, opts ...grpc.CallOption) (*CheckAccessResponse, error) {
	out := new(CheckAccessResponse)
	err := c.cc.Invoke(ctx, "/native_iam_oauth.IAMOAuthService/CheckAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IAMOAuthServiceServer is the server API for IAMOAuthService service.
// All implementations must embed UnimplementedIAMOAuthServiceServer
// for forward compatibility
type IAMOAuthServiceServer interface {
	// Create access token and refresh token using password
	CreateTokenWithPassword(context.Context, *CreateTokenWithPasswordRequest) (*CreateTokenWithPasswordResponse, error)
	// Creates new access token using refresh tokenna
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	// rpc VerifyResoureAccess(VerifyResourceAccessRequest) returns (VerifyResourceAccessResponse);
	// Checks if token is allowed to perform actions from the specified scopes
	CheckAccess(context.Context, *CheckAccessRequest) (*CheckAccessResponse, error)
	mustEmbedUnimplementedIAMOAuthServiceServer()
}

// UnimplementedIAMOAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIAMOAuthServiceServer struct {
}

func (UnimplementedIAMOAuthServiceServer) CreateTokenWithPassword(context.Context, *CreateTokenWithPasswordRequest) (*CreateTokenWithPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTokenWithPassword not implemented")
}
func (UnimplementedIAMOAuthServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedIAMOAuthServiceServer) CheckAccess(context.Context, *CheckAccessRequest) (*CheckAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAccess not implemented")
}
func (UnimplementedIAMOAuthServiceServer) mustEmbedUnimplementedIAMOAuthServiceServer() {}

// UnsafeIAMOAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IAMOAuthServiceServer will
// result in compilation errors.
type UnsafeIAMOAuthServiceServer interface {
	mustEmbedUnimplementedIAMOAuthServiceServer()
}

func RegisterIAMOAuthServiceServer(s grpc.ServiceRegistrar, srv IAMOAuthServiceServer) {
	s.RegisterService(&IAMOAuthService_ServiceDesc, srv)
}

func _IAMOAuthService_CreateTokenWithPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenWithPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMOAuthServiceServer).CreateTokenWithPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_oauth.IAMOAuthService/CreateTokenWithPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMOAuthServiceServer).CreateTokenWithPassword(ctx, req.(*CreateTokenWithPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMOAuthService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMOAuthServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_oauth.IAMOAuthService/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMOAuthServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMOAuthService_CheckAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMOAuthServiceServer).CheckAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/native_iam_oauth.IAMOAuthService/CheckAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMOAuthServiceServer).CheckAccess(ctx, req.(*CheckAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IAMOAuthService_ServiceDesc is the grpc.ServiceDesc for IAMOAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IAMOAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "native_iam_oauth.IAMOAuthService",
	HandlerType: (*IAMOAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTokenWithPassword",
			Handler:    _IAMOAuthService_CreateTokenWithPassword_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _IAMOAuthService_RefreshToken_Handler,
		},
		{
			MethodName: "CheckAccess",
			Handler:    _IAMOAuthService_CheckAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oauth.proto",
}
