syntax = "proto3";

package native_keyvalueprstorage;

option go_package = "slamy/openBP/native/native_keyvaluestorage;keyvaluestorage";

message SetRequest {
    // Namespace where to set key. Use empty for global key
    string namespace = 1;
    // Unique key that will be associated with value
    string key = 2;
    // Value to store. Dont use big value (maximum size is 15 mb). Values wich are more than 1mb in size will not be cached.
    bytes value = 3;
}
message SetResponse {}

message SetIfNotExistRequest {
    // Namespace where to set key. Use empty for global key
    string namespace = 1;
    // Unique key that will be associated with value
    string key = 2;
    // Value to store. Dont use big value (maximum size is 15 mb). Values wich are more than 1mb in size will not be cached.
    bytes value = 3;
}
message SetIfNotExistResponse {
    // Indicates if value was seted or not
    bool seted = 1;
}

message GetRequest {
    // Namespace where to get value. Use empty for global value.
    string namespace = 1;
    // Key associated with value
    string key = 2;
    // Use cache or not. Cache may not be valid at very rare conditions (multiple write and read at same time), but will be invalidated after small period of time.
    bool useCache = 3;
}
message GetResponse {
    // Value that was stored under specified namespace and key
    bytes value = 1;
}

message RemoveRequest {
    // Namespace where to remove key
    string namespace = 1;
    // Key to remove
    string key = 2;
}
message RemoveResponse {
    // Indicates if actually removed key (or it wasnt exist in before the request)
    bool removed = 1;
}

message ExistRequest {
    // Namespace where to search for key
    string namespace = 1;
    // Key to search
    string key = 2;
    // Use cache or not. Cache may not be valid at very rare conditions (multiple write and read at same time), but will be invalidated after small period of time.
    bool useCache = 3;
}
message ExistResponse {
    // Indicates if namespace and key exists or not. 
    bool exist = 1;
}

// Provides API for persistent key-value storage. Unlike system redis service it guaratees, that data will not be lost. Uses system_db to store data. Value+key size is limited to 15mb. 
service KeyValueStorageService {
    // Sets value under the key in specified namespace.
    rpc Set(SetRequest) returns (SetResponse);
    // Sets value under the key in specified namespace only if it is not set.
    rpc SetIfNotExist(SetIfNotExistRequest) returns (SetIfNotExistResponse);
    // Gets value for specified key.
    rpc Get(GetRequest) returns (GetResponse);
    // Remove key in specified namespace
    rpc Remove(RemoveRequest) returns (RemoveResponse);
    // Checks if key exists in specified namespace
    rpc Exist(ExistRequest) returns (ExistResponse);
}