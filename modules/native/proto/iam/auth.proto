syntax = "proto3";

package native_iam_auth;

option go_package = "slamy/openCRM/native/iam/auth;native_iam_auth_grpc";

message CreateTokenWithPasswordRequest {
    // Namespace where identity located. May be empty for global identity
    string namespace = 1;
    // Identity UUID
    string identity = 2;
    // Identity password
    string password = 3;
}
message CreateTokenWithPasswordResponse {
    enum Status {
        OK = 0;
        UNAUTHENTICATED = 401;
        UNAUTHORIZED = 403;
    }
    // Status of the token creation
    Status status = 1;
    // Token used for authentication and authorization. If status is not OK - empty string
    string accessToken = 2;
    // Token used for refreshing accessToken. If status is not OK - empty string
    string refreshToken = 3;
}

message CreateTokenWithOAuth2Request {
    // OAuth2 provider
    string provider = 1;
    // Token issued by OAuth2 provider``
    string token = 2;
}
message CreateTokenWithOAuth2Response {
    // Token used for authentication and authorization
    string accessToken = 1;
    // Token used for refreshing accessToken
    string refreshToken = 2;
    // Identity UUID
    string identity = 3;
}

message RefreshTokenRequest {
    string refreshToken = 1;
}
message RefreshTokenResponse {
    // New access token
    string accessToken = 1;
}

message InvalidateTokenRequest {
    // Refresh or access token to invalidate. Both tokens will be invalidated
    string token = 1;
}
message InvalidateTokenResponse {}

message VerifyTokenAccessRequest {
    // Token to verify
    string accessToken = 1;
    // What resources to theck
    repeated string resources = 2;
    // What actions token must be able to perform for resources
    repeated string actions = 3;
}
message VerifyTokenAccessResponse {
    bool hasAccess = 1;
}

// Provides API to verify identity and determine access rights of the identity
service IAMAuthService {
    // Create access token and refresh token using password. Creates identity if not exist
    rpc CreateTokenWithPassword(CreateTokenWithPasswordRequest) returns (CreateTokenWithPasswordResponse);
    // Create access token and refresh token using thrid party OAuth2 provider. Creates identity if not exist
    // rpc CreateTokenWithOAuth2(CreateTokenWithOAuth2Request) returns (CreateTokenWithOAuth2Response);
    // Create access token and refresh token using SSO (Single Sign On) 
    // rpc CreateTokenWithSSO() returns ();

    // Completes started two factor TOTP (Time-based one-time password) authetication and returns actual access asn refresh tokens
    // rpc ExtendTokenWithTOTP(CompleteTwoFactorTOTPRequest) returns (CompleteTwoFactorTOTPResponse);
    
    // Creates new access token using refresh token
    rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);
    // Invalidates pare of access token and refresh tokens
    rpc InvalidateToken(InvalidateTokenRequest) returns (InvalidateTokenResponse);
    // Verifies if token can perform actions on the resources
    rpc VerifyTokenAccess(VerifyTokenAccessRequest) returns (VerifyTokenAccessResponse);
}
