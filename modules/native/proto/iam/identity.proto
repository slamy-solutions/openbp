syntax = "proto3";

import "google/protobuf/timestamp.proto";

package native_iam_identity;

option go_package = "slamy/openBP/native/iam/identity;identity";


// Empty information to indicate that management for this identity is not defined.
message NotManagedData {}

// Information about other identity that manages this identity
message IdentityManagedData {
    // Namespace where identity is located
    string identityNamespace = 1;
    // Identity UUID inside this namespace
    string identityUUID = 2;
}

// Handles information about the service that manages this identity
message ServiceManagedData {
    // Name of the service
    string service = 1;
    // Reason why this service created this identity
    string reason = 2;
    // This is an ID that can be defined by managed service to find this identity. Set to empty string if you dont need this. If this is not empty Service+ID combination is unique.
    string managementId = 3;
}


message Identity {
    // Holds information about specific policy assigned to the identity
    message PolicyReference {
        // Policy namespace. Empty for global policy
        string namespace = 1;
        // Policy uuid (unique identifier) inside namespace
        string uuid = 2;
    }

    // Holds information about specific role assigned to the indentity
    message RoleReference {
        // Role namespace. Empty for global role
        string namespace = 1;
        // Role uuid
        string uuid = 2;
    }

    // Namespaces of the identity. Can be empty for global identities.
    string namespace = 1;
    // Unique identity identifier
    string uuid = 2;
    // Public identity name
    string name = 3;
    // If identity is not active, it will not be able to login and perform any actions.
    bool active = 4;


    /* 
        Indicates if this identity is managed by someone else. 

        This is only a flag to inform everyone that it is managed by third party actor and
        manual interaction with this identity may result in big problems. In order to interact with the identity,
        you should ask someone who manages this identity to do something for you.
    
        There are several possible managements:
        *NotManaged* - there is no clear actor responsible for this identity
        *Identity* - this identity was created by other identity. This other identity is responsible for it
        *Service* - this identity was create by one of the services. This services now manages this identity.
    */
    oneof managed {
        // Identity is not managed
        NotManagedData no = 20;
        // Identity is managed by other identity
        IdentityManagedData identity = 21;
        // Identity is managed by service
        ServiceManagedData service = 22;
    }

    // Security policies assigned to the identity
    repeated PolicyReference policies = 5;

    // Security roles assigned to the identity
    repeated RoleReference roles = 6;

    // When the policy was created
    google.protobuf.Timestamp created = 9;
    // Last time when the policy information was updated.
    google.protobuf.Timestamp updated = 10;
    // Counter that increases after every update of the policy
    uint64 version = 11;
}

message CreateIdentityRequest {
    // Namespace where to create identity
    string namespace = 1;
    // Public name for newly created identity. It may not be unique - this is just human-readable name.
    string name = 2;
    // Should the identity be active on the start or not
    bool initiallyActive = 3;

    /* 
        Indicates if this identity is managed by someone else. 

        This is only a flag to inform everyone that it is managed by third party actor and
        manual interaction with this identity may result in big problems. In order to interact with the identity,
        you should ask someone who manages this identity to do something for you.
    
        There are several possible managements:
        *NotManaged* - there is no clear actor responsible for this identity
        *Identity* - this identity was created by other identity. This other identity is responsible for it
        *Service* - this identity was create by one of the services. This services now manages this identity.
    */
    oneof managed {
        // Identity is not managed
        NotManagedData no = 20;
        // Identity is managed by other identity
        IdentityManagedData identity = 21;
        // Identity is managed by service
        ServiceManagedData service = 22;
    }
}
message CreateIdentityResponse {
    // Created identity
    Identity identity = 1;
}

message GetIdentityRequest {
    // Identity namespace
    string namespace = 1;
    // Identity unique identifier inside namespace
    string uuid = 2;
    // Use cache or not. Cache may not be valid under very rare conditions (simultaniour read and writes). Cache automatically clears after short period of time (30 seconds by default).
    bool useCache = 3;
}
message GetIdentityResponse {
    // Identity information
    Identity identity = 1;
}

message DeleteIdentityRequest {
    // Identity namespace
    string namespace = 1;
    // Identity unique identifier inside namespace
    string uuid = 2;
}
message DeleteIdentityResponse {
    // Indicates if identity existed before request or it was already deleted earlier
    bool existed = 1;
}

message ExistsIdentityRequest {
    // Identity namespace
    string namespace = 1;
    // Identity unique identifier inside namespace
    string uuid = 2;
    // Use cache or not. Cache may not be valid under very rare conditions (simultaniour read and writes). Cache automatically clears after short period of time (30 seconds by default).
    bool useCache = 3;
}
message ExistsIdentityResponse {
    // True if identity exists, false if not
    bool exists = 1;
}

message ListIdentityRequest {
    // Namespace where to get identitites
    string namespace = 1;
    // The returned identities will always be sorted. So you can load them with pagination. Service will not return first "skip" identities. Use "0" if you want to ignore pagination,
    uint64 skip = 2;
    // Limit the number of returned entries. Use "0" to ignore limit.
    uint64 limit = 3;
}
message ListIdentityResponse {
    // One of the founded identities
    Identity identity = 1;
}

message CountIdentityRequest {
    // Namespace where to count identities
    string namespace = 1;
    // Use cache or not. Cache may not be valid under very rare conditions (simultaniour read and writes). Cache automatically clears after short period of time (30 seconds by default).
    bool useCache = 2;
}
message CountIdentityResponse {
    // Number of the identities in the provided namespace
    uint64 count = 1;
}

message GetServiceManagedIdentityRequest {
    // Namespace where to search for identity
    string namespace = 1;
    // Service which manages this identity
    string service = 2;
    // Special ID for this identity defined by this service
    string managedId = 3;
    // Use cache or not. Cache may not be valid under very rare conditions (simultaniour read and writes). Cache automatically clears after short period of time (30 seconds by default).
    bool useCache = 4;
}
message GetServiceManagedIdentityResponse {
    // Founded identity
    Identity identity = 1;
}

message UpdateIdentityRequest {
    // Namespace where identity is located
    string namespace = 1;
    // Unique identifier of the identity
    string uuid = 2;

    // New name
    string newName = 3;
}
message UpdateIdentityResponse {
    // Identity information after update
    Identity identity = 1;
}

message AddPolicyRequest {
    // Identity namespace
    string identityNamespace = 1;
    // Identity identifier inside identity namespace
    string identityUUID = 2;
    // Policy namespace
    string policyNamespace = 3;
    // Policy UUID inside policy namespace
    string policyUUID = 4;
}
message AddPolicyResponse {
    // Updated identity (after adding policy)
    Identity identity = 1;
}

message RemovePolicyRequest {
    // Identity namespace
    string identityNamespace = 1;
    // Identity unique identifier inside identity namespace
    string identityUUID = 2;
    // Policy namespace
    string policyNamespace = 3;
    // Policy UUID inside policy namespace
    string policyUUID = 4;
}
message RemovePolicyResponse {
    // Updated identity (after removing policy)
    Identity identity = 1;
}

message AddRoleRequest {
    // Identity namespace
    string identityNamespace = 1;
    // Identity identifier inside identity namespace
    string identityUUID = 2;
    // Role namespace
    string roleNamespace = 3;
    // Role UUID inside role namespace
    string roleUUID = 4;
}
message AddRoleResponse {
    // Updated identity (after adding role)
    Identity identity = 1;
}

message RemoveRoleRequest {
    // Identity namespace
    string identityNamespace = 1;
    // Identity unique identifier inside identity namespace
    string identityUUID = 2;
    // Role namespace
    string roleNamespace = 3;
    // Role UUID inside role namespace
    string roleUUID = 4;
}
message RemoveRoleResponse {
    // Updated identity (after removing role)
    Identity identity = 1;
}

message SetIdentityActiveRequest {
    // Namespace of the identity
    string namespace = 1;
    // Identity unique identifier inside namespace
    string uuid = 2;
    // Set active or not
    bool active = 3;
}
message SetIdentityActiveResponse {
    // Identity after update
    Identity identity = 1;
}

// Provides API to manage IAM identities 
service IAMIdentityService {
    // Create new identity
    rpc Create(CreateIdentityRequest) returns (CreateIdentityResponse);
    // Get identity 
    rpc Get(GetIdentityRequest) returns (GetIdentityResponse);
    // Delete identity
    rpc Delete(DeleteIdentityRequest) returns (DeleteIdentityResponse);
    // Check if identity exists
    rpc Exists(ExistsIdentityRequest) returns (ExistsIdentityResponse);
    // Get list of the identities
    rpc List(ListIdentityRequest) returns (stream ListIdentityResponse);
    // Get number of the identities in the namespace
    rpc Count(CountIdentityRequest) returns (CountIdentityResponse);

    // Get policy that is managed by service
    rpc GetServiceManagedIdentity(GetServiceManagedIdentityRequest) returns (GetServiceManagedIdentityResponse);

    // Update identity information
    rpc Update(UpdateIdentityRequest) returns (UpdateIdentityResponse);

    // Add policy to the identity. If policy was already added - does nothing.
    rpc AddPolicy(AddPolicyRequest) returns (AddPolicyResponse);
    // Remove policy from the identity. If policy was already removed - does nothing.
    rpc RemovePolicy(RemovePolicyRequest) returns (RemovePolicyResponse);

    // Add role to the identity. If role was already added = does nothing
    rpc AddRole(AddRoleRequest) returns (AddRoleResponse);
    // Remove role from the identity. If role was already removed - does nothing.
    rpc RemoveRole(RemoveRoleRequest) returns (RemoveRoleResponse);

    // Set identity active or not.
    rpc SetActive(SetIdentityActiveRequest) returns (SetIdentityActiveResponse);
}