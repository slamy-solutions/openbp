syntax = "proto3";

import "google/protobuf/timestamp.proto";

package native_namespace;

option go_package = "slamy/openERP/native/namespace;namespace";

message Namespace {
    // Unique name of the namespace
    string name = 1;

    // User-friendly public name of the namespace.
    string fullName = 2;
    // Arbitrary description
    string description = 3;

    // When the namespace was created
    google.protobuf.Timestamp created = 4;
    // Last time when the namespace information was updated.
    google.protobuf.Timestamp updated = 5;
    // Counter that increases after every update of the namespace
    uint64 version = 6;
}

message EnsureNamespaceRequest {
    // Unique name of the namespace. Name must match the regex "[A-Za-z0-9]+$". Max length is 32 symbols.
    string name = 1;
    // User-friendly public name of the namespace. Can be changed in the future. Max length is 128 symbols.
    string fullName = 2;
    // Arbitrary description. Can be changed in the future. Max length is 512 symbols.
    string description = 3;
}
message EnsureNamespaceResponse {
    // Created namespace
    Namespace namespace = 1;
    // If true - new namespace was created
    bool created = 2;
}

message CreateNamespaceRequest {
    // Unique name of the namespace. Name must match the regex "[A-Za-z0-9]+$". Max length is 32 symbols.
    string name = 1;
    // User-friendly public name of the namespace. Can be changed in the future. Max length is 128 symbols.
    string fullName = 2;
    // Arbitrary description. Can be changed in the future. Max length is 512 symbols.
    string description = 3;
}
message CreateNamespaceResponse {
    // Created namespace
    Namespace namespace = 1;
}

message UpdateNamespaceRequest {
    // Unique name of the namespace.
    string name = 1;

    // User-friendly public name of the namespace. May be changed in the future.
    string fullName = 2;
    // Arbitrary description. May be changed in the future.
    string description = 3;
}
message UpdateNamespaceResponse {
    // Created namespace
    Namespace namespace = 1;
}

message DeleteNamespaceRequest {
    // Name of the namespace to delete
    string name = 1;
}
message DeleteNamespaceResponse {
    // Indicates if namespace existed before this operation
    bool existed = 1;
}

message GetNamespaceRequest {
    // Name of the namespace to get
    string name = 1;
    // Use cache or not. Cache have very small chance to be inconsisten on frequent read/writes operations to same namespace. Concurrent reads are safe. Inconsistent cache will be deleted after some period of time.
    bool useCache = 2;
}
message GetNamespaceResponse {
    Namespace namespace = 1;
}

message GetAllNamespacesRequest {
    // Use cache or not. Cache have very small chance to be inconsisten on frequent read/writes operations to any namespace. Concurrent reads are safe. Inconsistent cache will be deleted after some period of time.
    bool useCache = 1;
}
message GetAllNamespacesResponse {
    Namespace namespace = 1;
}

message IsNamespaceExistRequest {
    // Name of the namespace to get
    string name = 1;
    // Use cache or not. Cache have very small chance to be inconsisten on frequent read/writes operations to same namespace. Inconsistent cache will be deleted after some period of time.
    bool useCache = 2;
}
message IsNamespaceExistResponse {
    // True if namespace exist, else - False
    bool exist = 1;
}

message GetNamespaceStatisticsRequest {
    // Name of the namespace to get statistics. Required.
    string name = 1;
    
    /*
        Cached data will be returned faster but may not be realtime.
    */
    bool useCache = 2;
}
message GetNamespaceStatisticsResponse {
    message Db {
        // Number ob objects stored in the database
        uint64 objects = 1;
        // Total size of the raw data stored (without pre-alocated allocated space and indexes)
        uint64 dataSize = 2;
        // Total memory usage of the namespace
        uint64 totalSize = 3;
    }

    // Statistics from the database related to the namespace
    Db db = 1;
}

service NamespaceService {
    // Create new namespace if it doesnt exist. If namespace exist, its data will not be updated.
    rpc Ensure(EnsureNamespaceRequest) returns (EnsureNamespaceResponse) {};
    // Creates new namespace. If namespace already exist, will return error.
    rpc Create(CreateNamespaceRequest) returns (CreateNamespaceResponse);
    // Updates namespace information. If namespace doesnt exist, will return error.
    rpc Update(UpdateNamespaceRequest) returns (UpdateNamespaceResponse);
    // Deletes namespace and all its data
    rpc Delete(DeleteNamespaceRequest) returns (DeleteNamespaceResponse) {};
    // Returns namespace information by its name
    rpc Get(GetNamespaceRequest) returns (GetNamespaceResponse) {};
    // Streams list of all namespaces
    rpc GetAll(GetAllNamespacesRequest) returns (stream GetAllNamespacesResponse) {};
    // Checks if namespace exists
    rpc Exists(IsNamespaceExistRequest) returns (IsNamespaceExistResponse) {};
    // Gets namespace statistics. If namespace doesnt exist, will return error.
    rpc Stat(GetNamespaceStatisticsRequest) returns (GetNamespaceStatisticsResponse);
}