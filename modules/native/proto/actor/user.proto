syntax = "proto3";

import "google/protobuf/timestamp.proto";

package native_actor_user;

option go_package = "slamy/openERP/native/actor/user;user";

message User {
    // Namespace of the user. If namespace is empty, user is global.
    string namespace = 1;
    // Unique identifier
    string uuid = 2;
    // Login unique identifies user (like UUID) but user defined and can be changed.
    string login = 3;
    // Native_iam_identity UUID
    string identity = 4;

    // User-defined name that will be displayed instead of login
    string fullName = 5;
    // Link to the user avatar image
    string avatar = 6;
    // Email address
    string email = 7;

    // When the policy was created
    google.protobuf.Timestamp created = 9;
    // Last time when the policy information was updated.
    google.protobuf.Timestamp updated = 10;
    // Counter that increases after every update of the policy
    uint64 version = 11;
}

message CreateRequest {
    // Namespace where to create user. Empty for global user
    string namespace = 1;
    // User-defined unique identifier
    string login = 2;

    // User-defined name that will be displayed instead of login
    string fullName = 3;
    // Link to the user avatar image
    string avatar = 4;
    // Email address
    string email = 5;
}
message CreateResponse {
    // Created user
    User user = 1;
}

message GetRequest {
    // Namespace where to search for user. Empty for global user.
    string namespace = 1;
    // User unique identifier inside searched namespace
    string uuid = 2;
    // Use cache for this request or not. Cache has a very small chance to be invalid. Invalid cache deletes after small period of time (60 seconds by default)
    bool useCache = 3;
}
message GetResponse {
    // Founded user
    User user = 1;
}

message GetByLoginRequest {
    // Namespace where to search for user. Empty for global user.
    string namespace = 1;
    // Login of the user to search
    string login = 2;
    // Use cache for this request or not. Cache has a very small chance to be invalid. Invalid cache deletes after small period of time (60 seconds by default)
    bool useCache = 3;
}
message GetByLoginResponse {
    // User with specified login
    User user = 1;
}

message GetByIdentityRequest {
    // Namespace where to search for user. Empty for global user.
    string namespace = 1;
    // Search for user which has this identity uuid assigned to it
    string identity = 2;
    // Use cache for this request or not. Cache has a very small chance to be invalid. Invalid cache deletes after small period of time (60 seconds by default)
    bool useCache = 3;
}
message GetByIdentityResponse {
    // User wich has specified identity
    User user = 1;
}

message UpdateRequest {
    // Namespace of the user. Empty for global user.
    string namespace = 1;
    // Unique identifier of user, that will be updated
    string uuid = 2;
    // User-defined unique identifier
    string login = 3;
    // User-defined name that will be displayed instead of login
    string fullName = 4;
    // Link to the user avatar image
    string avatar = 5;
    // Email address
    string email = 6;
}
message UpdateResponse {
    // User after update
    User user = 1;
}

message DeleteRequest {
    // Namespace of the user. Empty for global user.
    string namespace = 1;
    // Unique identifier of user inside namespace
    string uuid = 2;
}
message DeleteResponse {
    // Indicates if user existed before this request or it was already deleted earlier.
    bool existed = 1;
}

message ListRequest {
    // Namespace where to search for users
    string namespace = 1;
}
message ListResponse {
    // Founded user
    User user = 1;
}

message SearchRequest {
    // Namespace where to search for users. Empty for global user.
    string namespace = 1;
    // String to search in the user information
    string match = 2;
    // How much values to return 
    uint64 limit = 3;
}
message SearchResponse {
    // User data
    User user = 1;
}

service ActorUserService {
    // Create new user and assign identity to it.
    rpc Create(CreateRequest) returns (CreateResponse);
    // Get user by its unique identifier
    rpc Get(GetRequest) returns (GetResponse);
    // Get user by its login
    rpc GetByLogin(GetByLoginRequest) returns (GetByLoginResponse);
    // Get user by the identity uuid that was assigned to it
    rpc GetByIdentity(GetByIdentityRequest) returns (GetByIdentityResponse);
    // Update user information
    rpc Update(UpdateRequest) returns (UpdateResponse);
    // Delete user
    rpc Delete(DeleteRequest) returns (DeleteResponse);
    // Get all users in the namespace.
    rpc List(ListRequest) returns (stream ListResponse);

    // Searches for user using some "matching" string. Much faster than find operation. Searches for matches in login/fullName/email.
    // Matches may be not ideal and its not possible to predict how much users matched provided string.
    rpc Search(SearchRequest) returns (stream SearchResponse);
}