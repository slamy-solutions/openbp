syntax = "proto3";

package native_actor_user;

option go_package = "slamy/openERP/native/actor/user;user";

message User {
    // Unique identifier
    string uuid = 1;
    // Login unique identifies user (like UUID) but user defined and can be changed.
    string login = 2;
    // Nnative_iam_identity UUID
    string identity = 3;

    // User-defined name that will be displayed instead of login
    string fullName = 4;
    // Link to the user avatar image
    string avatar = 5;
    // Email address
    string email = 6;
}

message CreateRequest {
    // User-defined unique identifier
    string login = 1;

    // User-defined name that will be displayed instead of login
    string fullName = 2;
    // Link to the user avatar image
    string avatar = 3;
    // Email address
    string email = 4;
}
message CreateResponse {
    // Created user
    User user = 1;
}

message GetRequest {
    // User unique identifier to get
    string uuid = 1;
    // Use cache for this request or not. Cache has a very small chance to be invalid. Invalid cache deletes after small period of time (60 seconds by default)
    bool useCache = 2;
}
message GetResponse {
    // User with specified UUID
    User user = 2;
}

message GetByLoginRequest {
    // Search for user that has this login
    string login = 1;
    // Use cache for this request or not. Cache has a very small chance to be invalid. Invalid cache deletes after small period of time (60 seconds by default)
    bool useCache = 2;
}
message GetByLoginResponse {
    // User with specified login
    User user = 1;
}

message GetByIdentityRequest {
    // Search for user which has this identity uuid assigned to it
    string identity = 1;
    // Use cache for this request or not. Cache has a very small chance to be invalid. Invalid cache deletes after small period of time (60 seconds by default)
    bool useCache = 2;
}
message GetByIdentityResponse {
    // User wich has specified identity
    User user = 1;
}

message UpdateRequest {
    // Unique identifier of user, that will be updated
    string uuid = 1;
    // User-defined unique identifier
    string login = 2;
    // User-defined name that will be displayed instead of login
    string fullName = 3;
    // Link to the user avatar image
    string avatar = 4;
    // Email address
    string email = 5;
}
message UpdateResponse {
    // User after update
    User user = 1;
}

message DeleteRequest {
    // Unique identifier of user to delete
    string uuid = 1;
}
message DeleteResponse {}

/*
message ListRequest {
    // Regex to match login, fullName, email. Leave empty to ignore.
    string match = 1;
    // Maximum number of results to return. Set to 0 if yo want get all the users up to the end.
    uint64 limit = 2;
    // A user UUID. Only return users that signed after this user. This is usefull for paging the result. Set to empty string to ignore this parameter. 
    string since = 3;
}
message ListResponse {
    // Total number of users founded
    uint64 totalCount = 1;
    // User data
    User user = 2;
}
*/

message SearchRequest {
    string match = 1; 
    uint64 limit = 2;
}
message SearchResponse {
    // User data
    User user = 1;
}
/*
message GetUsersForNamespaceRequest {
    // Namespace where to get users
    string namespace = 1;
    // User UUID from which to start return response. Use it for response paging together with limit parameter
    string startFrom = 2;
    // Maximum number of user to return. Use 0 to ignore limit.
    uint32 limit = 3;
}
message GetUsersForNamespaceResponse {
    // User data
    User user = 1;
}

message AddUserToNamespaceRequest {
    // User UUID to add
    string user = 1;
    // Namespace where to add user
    string namespace = 2;
}
message AddUserToNamespaceResponse {}

message RemoveUserFromNamespaceRequest {
    // User UUID to remove
    string user = 1;
    // Namespace where to remove user
    string namespace = 2;
}
message RemoveUserFromNamespaceResponse {}

message GetNamespacesForUserRequest {
    // User UUID for which to get namespaces
    string user = 1;
}
message GetNamespacesForUserResponse {
    // User namespace
    string namespace = 1;
}

message IsUserInTheNamespaceRequest {
    // User UUID to check
    string user = 1;
    // Namespace to check
    string namespace = 2;
}
message IsUserInTheNamespaceResponse {
    // True is user is in the namespace. Otherwise false
    bool isInNamespace = 1;
}*/

service ActorUserService {
    // Create new user and assign identity to it.
    rpc Create(CreateRequest) returns (CreateResponse);
    // Get user by its unique identifier
    rpc Get(GetRequest) returns (GetResponse);
    // Get user by its login
    rpc GetByLogin(GetByLoginRequest) returns (GetByLoginResponse);
    // Get user by the identity uuid that was assigned to it
    rpc GetByIdentity(GetByIdentityRequest) returns (GetByIdentityResponse);
    // Update user information
    rpc Update(UpdateRequest) returns (UpdateResponse);
    // Delete user
    rpc Delete(DeleteRequest) returns (DeleteResponse);
    // Lists all users in the order that they signed up.
    //rpc Find(ListRequest) returns (ListResponse);

    // Searches for user using some "matching" string. Much faster than find operation. Searches for matches in login/fullName/email.
    // Matches may be not ideal and its not possible to predict how much users matched provided string.
    rpc Search(SearchRequest) returns (stream SearchResponse);
}
/*
service ActorUserNamespaceService {
    // Get list of users inside namespace
    rpc GetUsersForNamespace(GetUsersForNamespaceRequest) returns (stream GetUsersForNamespaceResponse);
    // Add user to the namespace. User can have multiple namespaces
    rpc AddUserToNamespace(AddUserToNamespaceRequest) returns (AddUserToNamespaceResponse);
    // Remove user from the namespace. If there where no user inside namespaces - does nothing
    rpc RemoveUserFromNamespace(RemoveUserFromNamespaceRequest) returns (RemoveUserFromNamespaceResponse);
    // Get all the namespaces for the user
    rpc GetNamespacesForUser(GetNamespacesForUserRequest) returns (GetNamespacesForUserResponse);
    // Check if user is inside namespace or not
    rpc IsUserInTheNamespace(IsUserInTheNamespaceRequest) returns (IsUserInTheNamespaceResponse);

    //rpc GetNamespacesByLogin() returns ();
    //rpc GetNamespacesByIdentity() returns ();
}
*/