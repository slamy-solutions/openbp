{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"docs/overview.en/","title":"OpenBP - Open Business platform","text":""},{"location":"docs/overview.en/#capabilities","title":"Capabilities","text":"<p>Here's what OpenBP offers out of the box for developers, implementation companies and business:</p>"},{"location":"docs/overview.en/#developers","title":"Developers","text":"<ul> <li>Created by developers for developers. We want this to be as easy and beautifulll as possible. </li> <li>Developer-friendly version-controlled environment (with GIT) to create custom configurations.</li> <li>CI/CD pipelines for easy deployments and support</li> <li>OpenTelemetry tracing to debug</li> <li>Intense set of highly detailed documentation</li> <li>gRPC interservice communication. Use whatever language you want :)</li> <li>There are no limit in what you can create. Just create one more microservice and OpenBP will handle everything.</li> <li>Use of state-of-the-art technologies and practices: MongoDB, RedisDB cahing, Hashicorp Vault, RabbitMQ messaging and task manager, Docker, k3s, OpenAPI3.0, gRPC ....</li> </ul>"},{"location":"docs/overview.en/#implementation-companies","title":"Implementation companies","text":"<ul> <li>SaaS-enabled by default. One place for all customers</li> <li>Multitenant and multi namespace system capable to manage multiple clients with non-standard/modified configurations.</li> <li>Dynamic workflow managing, resource sharing, and workload redistribution. All customers are using same resources and are working on the same cluster. Very efficient and easy to maintain.</li> <li>Advanced SaaS tools for managing customers and their deployments.</li> <li>Traceability dashboards with current system status, logs, events, and errors.</li> <li>Automatic billing based on resource usage</li> </ul>"},{"location":"docs/overview.en/#business","title":"Business","text":"<ul> <li>Open source and free</li> <li>Unlimited scalability by default. Dont think about the scale of your bisness and ammount of data. This system will handle everything.</li> <li>Hight-availability option to ensure 99.9% uptime.</li> <li>On-the-fly updates that will not stop your critical workflows.</li> <li>Industrial grade security environment complied with ISO/IEC 27001 requirements.</li> <li>GDPR complied storage system and data flow.</li> <li>Hightly flexible and extendable.</li> <li>Integrated with edge computing and device management.</li> <li>Includes set of the solutions: ERP, CRM, Edge computing, ....</li> </ul> <p>Thats not all ;). Please, check Architectual vision if you want to know more.</p>"},{"location":"docs/overview.en/#partners","title":"Partners","text":""},{"location":"docs/overview.en/#license","title":"License","text":"<p>OpenBP is free and open source. It is distributed under AGPL3 license. If you need an Enterprise license - contact us. More about license HERE</p>"},{"location":"docs/architecture/architecture_vision/","title":"The goal of the project","text":"<p>The goal of the project is to create a competitive high-tech platform capable of solving modern business problems. OBP allows the creation of an ecosystem with ERP/CRM/Edge computing/etc solutions for businesses.</p> <p>The bird-eye view of the project is presented in the diagram below.</p> <p>The project focuses on delivering a structure capable of handling business solutions. Also, the project provides basic modules with the most usable services.</p> <p>Solutions that will be delivered at the end of the project include:</p> <p>Solutions that will be delivered at the end of the project include: - Multitenant and multi namespace system capable to manage multiple clients with non-standard/modified configurations using the same SaaS environment. - The system with unlimited Horizontal and Vertical scalability by default. - Hight-availability option to ensure 99.9% uptime. - A system capable of dynamic workflow managing, resource sharing, and workload redistribution - Industrial grade security environment complied with ISO/IEC 27001 requirements - GDPR complied storage system and data flow - Developer-friendly version-controlled environment (with GIT) to create custom configurations. - CI/CD pipelines for easy deployments and support - Advanced SaaS tools for managing customers and their deployments. - Traceability dashboards with current system status, logs, events, and errors. - Ready to use \u201csystem\u201d services for the developers:     - DB - multi-cluster, scalable, highly available database     - Cache - highly available in-memory key-value storage cluster designed for \u201ccache\u201d with LRU cache eviction strategy.     - BigCache -  highly available in-memory key-value storage cluster designed for \u201ccache\u201d with LRU cache eviction strategy. Can be used to efficiently store big cache entries (like binary files).     - Vault - highly available secrets storage engine with HSM capabilities and implementing  ISO/IEC 27001 requirements.      - AMQP - distributed queue service with AMQP communication protocol.     - Entrypoint - high available reverse proxy with load balancing, dynamic paths configuration, and automatic SSL certificates.     - OTEL - OpenTelemetry scraper service - Ready to use \u201cnative\u201d services for the developers:     - Namespace - managing the multi-tenant environment     - IAm - a group of services to manage authentication and authorization; implementing authentication methods using OAuth2, SSO, X509 certificates, etc; managing identity policies.     - KeyValueStorage - persistent and reliable key-value storage for internal uses.     - File - s3-like storage for storing big chunks of data.     - Lambda - a group of services for serverless computing.     - Configuration - a group of services to manage/update/apply configurations for namespaces.     - API - default, build-in native API.     - BFF - dynamic API used by configurations to implement BFF (backend for frontend) pattern     - Cron - task scheduler     - Backup - managing backups and data snapshots - Intense set of highly detailed documentation and courses for developers.</p>"},{"location":"docs/architecture/architecture_vision/#selected-quality-attributes","title":"Selected quality attributes","text":"<p>Selected quality attributes, which will be implemented by the OpenERP, originate from best practices for creating IT systems. They were selected based on the reference list ISO 25000 of quality attributes: - Interoperability (Compatibility) - business automation solutions exist for a long period of time. They are a lot of already working components and mechanisms that can not be replaced or their replacement is too costly. That means a new solution has to be able to easily adapt and use third-party business components. However, compatibility has not to be forced at the price of cutting functionality or complicating workflow. The solution uses a \u201cnew-first\u201d approach to adapt to the new market needs and in some cases drops compatibility with redundant business patterns. - Learnability (Usability) - this is one of the key factors that will distinguish the product from its competitors. The product will try to make the learning curve as smooth as possible. The system will ensure the best possible level of effectiveness, efficiency, freedom from risk, and satisfaction by default. The automatic level of ensuring the quality of the processes will only be bounded and limited by other quality attributes. Learnability has less priority than other quality attributes in all conflicting situations. - Operability (Usability) - the system has to only use the libraries and tools that are well known to the developers and have a big community. Creating solutions based on this platform has to have the same workflow/or as close as possible to the workflow with ordinary solutions (like using GIT,CI/CD,....). With the support of a multi-tenant environment, the number of managed namespaces can grow dramatically. Same for the complexity of the overall system. That means the solution has to provide a full set of tools to easily work with SaaS infrastructure. The platform also provides traceability tools for developers to make it easier to handle edge cases and complex scenarios. - User error protection (Usability) - the system provides error protection by creating clearer structure and simpler usage patterns. Error protection is guaranteed inside module services by validating inputs that can hurt internal structure. On other hand, the system doesn't guarantee error protection while communicating between modules services. That was done in order to maintain a clearer structure of the system. - Availability (Reliability) - product has to have the option to work with 99.9% uptime. Those requirements are dictated by the scale of clients and their 24/7 workflows, which cannot be terminated, or termination is more costly than the cost of maintaining a high-available setup. - Recoverability (Reliability) - platform potentially handles critical business information and workflows. The system has to be able to automatically recover critical failures as fast as possible and notify operators about incidents. Business data recoverability has to be guaranteed. The end user can decide what level of recoverability he wants and at what cost. - Confidentiality (Security) - product provides an extensive set of authorization and authentication tools to ensure a high level of security. The solution has to use best practices from the ISO/IEC 27001 specification - Modularity (Maintainability) - system work in a highly dynamic environment that ofter differs from client to client. That means, the system has to be highly modular so those modules can be adjusted to client needs with minimal impact on other components.</p>"},{"location":"docs/architecture/architecture_vision/#selected-functional-attributes","title":"Selected functional attributes","text":"<p>The proposed functional attributes focus on material aspects and benefits that give the product the ability to perform its intended task better and more efficiently than others, thus providing measurable value for consumers. Attributes are separated into categories in order to make a clearer overall view.</p>"},{"location":"docs/architecture/architecture_vision/#native-services","title":"Native services","text":""},{"location":"docs/architecture/architecture_vision/#namespace","title":"Namespace","text":"<ul> <li>Create new namespaces</li> <li>Get a namespace by name</li> <li>Delete namespace</li> <li>List/Search namespaces</li> </ul>"},{"location":"docs/architecture/architecture_vision/#iam","title":"IAm","text":"<p>Manages authentication and authorization information for identities. Provides API for other services to protect them from unauthorized usage.</p>"},{"location":"docs/architecture/architecture_vision/#configuration","title":"Configuration","text":"<ul> <li>Securely store OAuth2 provider secrets</li> <li>Store custom configuration parameters for IAm services</li> </ul>"},{"location":"docs/architecture/architecture_vision/#policy","title":"Policy","text":"<ul> <li>Create global policies and policies in a specified namespace. The policy must contain information about what resources can be accessed by policy and what actions can be performed on those resources.</li> <li>Get an existing policy by its unique identifier and namespace</li> <li>Change policy resources and actions at runtime</li> <li>Delete policies at runtime</li> <li>List/Search for policies</li> </ul>"},{"location":"docs/architecture/architecture_vision/#identity","title":"Identity","text":"<ul> <li>Ability to create new global identities and identities for the specified namespace. Identity must contain information about what policies are assigned to this identity</li> <li>Get existing identity by its unique identifier and namespace</li> <li>Change policies assigned to the identity at runtime</li> <li>Block/Unblock identities at runtime</li> <li>List/Search for identities</li> </ul>"},{"location":"docs/architecture/architecture_vision/#auth","title":"Auth","text":"<ul> <li>Create an access token using authentication and authorization mechanisms</li> <li>Use login/password as one of the authentication mechanism</li> <li>Use OAuth2 as one of the authentication mechanisms. Use github.com, google.com, facebook.com, and gitlab.com as possible authentication providers.</li> <li>Use SSO as one of the authentication mechanisms.</li> <li>Add the ability to use two-factor authentication mechanisms.</li> <li>Add TOTP two-factor authentication mechanism.</li> <li>Provide authorization mechanisms for other services</li> </ul>"},{"location":"docs/architecture/architecture_vision/#keyvaluestorage","title":"KeyValueStorage","text":"<ul> <li>Reliably create key-value pairs and store them in persistent storage</li> <li>Get existing values by the corresponding keys</li> <li>Remove keys</li> </ul>"},{"location":"docs/architecture/architecture_vision/#file","title":"File","text":"<ul> <li>Create and upload arbitrary binary data (as file) to the persistent storage</li> <li>Get file by unique identifier supporting reading from the middle</li> <li>Get file statistics (size, hash sum, name, metadata)</li> <li>Delete files</li> </ul>"},{"location":"docs/architecture/architecture_vision/#lambda","title":"Lambda","text":""},{"location":"docs/architecture/architecture_vision/#manager","title":"Manager","text":"<ul> <li>CRUD operations for global lambdas and lambdas in namespaces</li> </ul>"},{"location":"docs/architecture/architecture_vision/#entrypoint","title":"Entrypoint","text":"<ul> <li>Call lambda without waiting for the response</li> <li>Execute lambda and get a response</li> <li>Stream data to lambda and wait for the response</li> <li>Execute lambda and read stream response</li> <li>Bidirectional stream with lambda execution</li> </ul>"},{"location":"docs/architecture/architecture_vision/#configuration_1","title":"Configuration","text":"<ul> <li>CRUD operations for configurations</li> <li>Apply configuration to namespace</li> <li>Get the list of configurations applied to the namespace</li> </ul>"},{"location":"docs/architecture/architecture_vision/#api","title":"API","text":"<p>Provide REST API for the native services</p>"},{"location":"docs/architecture/architecture_vision/#bff","title":"BFF","text":"<ul> <li>CRUD user-defined APIs</li> <li>Show OpenAPI specification for defined APIs if possible</li> </ul>"},{"location":"docs/architecture/architecture_vision/#cron","title":"Cron","text":"<ul> <li>Schedule one-time task</li> <li>Schedule repeatable task</li> <li>Check task results/statistics/errors</li> </ul>"},{"location":"docs/architecture/architecture_vision/#backup","title":"Backup","text":"<ul> <li>Create namespace data snapshots</li> <li>Delete old snapshots</li> <li>Download snapshots</li> <li>Apply data snapshot to the namespace</li> </ul>"},{"location":"docs/architecture/architecture_vision/#technical-architecture","title":"Technical architecture","text":""},{"location":"docs/concepts/IaC.en/","title":"Infrastructure as a code","text":"<p>Bug</p> <p>Not Implemented</p>"},{"location":"docs/concepts/cicd.en/","title":"Continuos integration / continuos development","text":"<p>Bug</p> <p>Not Implemented</p>"},{"location":"docs/concepts/languageYouWant.en/","title":"Use the language you want","text":""},{"location":"docs/concepts/security/","title":"Security","text":"<p>Scheme</p>"},{"location":"docs/getting-started/dev.en/","title":"Deploy for development","text":"<p>This deployment will be extremely useful for you if you want to develop core modules and services of the OpenBP.</p> <p>Tip</p> <p>If you want to create an external module or configuration, it's better to use docker-compose production installation.</p>"},{"location":"docs/getting-started/dev.en/#prepare-the-environment","title":"Prepare the environment","text":"<ol> <li>Install Docker and docker-compose.</li> <li>Clone project using  <code>git clone https://github.com/slamy-solutions/openbp.git</code></li> <li></li> </ol>"},{"location":"docs/getting-started/prod/compose.en/","title":"Deploy for production using docker-compose","text":"<p>This is recommended way to go with small installations that don't require high availability. Some of the key features of this type of deployment are:</p> <ul> <li>Easy to deploy/maintain/update</li> <li>Backup is just copying a folder with data.</li> <li>You will need to stop the deployment for 30-60 seconds on every update.</li> <li>Not scalable. Everything is on one server.</li> <li>If a machine (VPS or physical) is down - the entire deployment is down.</li> <li>It doesn't have data redundancy - if you do not backup regularly, you can lose all your data.</li> </ul>"},{"location":"docs/getting-started/prod/compose.en/#deploy","title":"Deploy","text":"<p>Before starting, please make sure your system has minimal requirements:</p> Requirement Minimal Recommended OS Linux/Windows Linux Arch linux/amd64, linux/arm64/v8, windows/amd64 linux/amd64, linux/arm64/v8 CPU 1 vCPU 4 vCPU RAM 1GB (more with Windows) 4GB <p>Info</p> <p>We suggest using Linux operating system. Windows installation may use much more resources and not be stable (as far as Docker for Windows is not stable).</p> <ol> <li>Install Docker and docker-compose</li> <li>Get the <code>docker-compose.all-in-one.yml</code> file from the repository</li> <li>Start OpenBP using <code>docker-compose -f docker-compose.all-in-one.yml up -d</code> command.</li> <li>Open http://localhost:80. The system will ask you several questions to initialize (like root user login and password). You can omit this step by initializing the system through the env variables in docker-compose ( see Configuring ).</li> </ol> All-in-one script for Linux <pre><code>echo \"Installing docker\"\ncurl -s https://get.docker.io | bash -s\nsudo groupadd docker\nsudo usermod -aG docker $USER\nnewgrp docker\n\necho \"Installing docker-compose using python3\"\npython3 -m pip install docker-compose\n\necho \"Getting docker-compose.yml file\"\nmkdir openbp\ncd openbp\ncurl -s https://github.com/slamy-solutions/openbp/blob/master/scripts/compose/docker-compose.all-in-one.yml &gt;&gt; docker-compose.all-in-one.yml\n\necho \"Starting OpenBP\"\ndocker-compose -f docker-compose.all-in-one.yml up -d\n</code></pre> <p>After startup, OpenBP will create folder <code>data</code> near the <code>docker-compose.all-in-one.yml</code> file. This is folder, where OpenBP will persist all its data.</p>"},{"location":"docs/getting-started/prod/compose.en/#configuring","title":"Configuring","text":""},{"location":"docs/getting-started/prod/compose.en/#selecting-the-version","title":"Selecting the version","text":"<p>If you don't have a version selected, the OpenBP will run with the latest possible. If you want a specific version, first of all, download it from the branch with <code>tag</code>. Use the environment variable or <code>docker-compose</code> .env file to set a value for <code>OPENBP_VERSION</code> with the version you want.</p>"},{"location":"docs/getting-started/prod/compose.en/#update","title":"Update","text":"<p>The system will not be available for ~20-30 seconds during the update. If you want high availability, consider using Kubernetes Deployment. </p> <p>First of all, you have to update <code>docker-compose.*.yml</code> files. Go to the repository, select <code>tag</code> with the version you want and download files with the newer version.</p> <p>Set the environment variable with the selected version: <pre><code>export OPENBP_VERSION=v1.0.13\n</code></pre></p> <p>Hint</p> <p>You can also put the version into the <code>docker-compose</code> .env file.</p> <p>Update deployment by pulling newer versions of the <code>docker</code> containers. <pre><code>docker-compose -f docker-compose.all-in-one.yml pull\ndocker-compose -f docker-compose.all-in-one.yml down\ndocker-compose -f docker-compose.all-in-one.yml up -d\n</code></pre></p>"},{"location":"docs/getting-started/prod/compose.en/#partial-deployment","title":"Partial deployment","text":"<p>You can find more <code>docker-compose</code> files in the compose scripts repository.</p> <p>If you just want to install all the modules and use all features, use <code>docker-compose.all-in-one.yml</code>, but if you don't need all the functionalities, you can combine modules using standard <code>docker-compose</code> syntax. </p> <p>Example</p> <p><code>docker-compose up -f docker-compose.yml -f docker-compose.system.yml -f docker-compose.native.yml up</code> will start up only the <code>system</code> and <code>native</code> modules.</p> <p>Table with specifications for every file you can find below:</p> File Description Dependencies docker-compose.all-in-one.yml Run all the modules and features - docker-compose.yml Create internal network and data volume - docker-compose.system.yml Run only <code>system</code> module docker-compose.yml docker-compose.native.yml Run only <code>native</code> module docker-compose.yml, docker-compose.system.yml docker-compose.tools.yml Run only <code>tools</code> module docker-compose.yml, docker-compose.system.yml, docker-compose.native.yml"},{"location":"docs/getting-started/prod/compose.en/#backup","title":"Backup","text":"<p>All the data of the application is located in the <code>data</code> folder (near the <code>docker-compose.*.yml</code> files). You can back up data by doing a copy of the folder.</p>"},{"location":"docs/getting-started/prod/rpi.en/","title":"Deploy for production using Raspberry Pi","text":"<p>OpenBP has natively compiled containers for the <code>linux/arm64/v8</code> architecture which is used in Raspberry Pi boards. You can use docker-compose or Kubernetes to run OpenBP on Raspberry Pi. </p> <p>Hint</p> <p>If you want to do this with Kubernetes, use K3S instead of full Kubernetes installation. K3S uses only 500mb of RAM and runs perfectly on ARM. You don't need full Kubernetes installation.</p>"},{"location":"docs/getting-started/prod/rpi.en/#preparing-the-os","title":"Preparing the OS","text":"<p>The only thing you need to do for Raspberry Pi is to make file system ReadOnly and use external storage for the data.</p> <p>Normal SD cards connected to the RPI will stop working after several months of usage. Flash will last longer, but it is also not reliable enough for storing database data with intense I/O operations.</p>"},{"location":"docs/modules/overview.en/","title":"Modules","text":"<p>\"Module\" is a top-level abstraction that distinguishes resources within the OpenBP system. Here are the key aspects of a module:</p> <ul> <li>A module can be enabled or disabled; there is no partial state.</li> <li>The same module cannot be enabled multiple times.</li> <li>Modules can be either internal or external. Internal modules refer to those developed within the OpenBP repository.</li> <li>Modules form the core of the system. There are no security checks enforced between modules, allowing all modules to access each other freely.</li> </ul>"},{"location":"docs/modules/overview.en/#internal-modules","title":"Internal modules","text":"<p>Here is the list of available internal modules:</p> Service Description <code>System</code> Provides low-level functionalities such as database management, security, caching, message queues ... <code>Native</code> Provides extensive collection of services and tools that will most likely be used in every module or solution. For example: authorization, namespacing, ..."},{"location":"docs/modules/native/keyvaluestorage.en/","title":"Key-value-storage service","text":"<p>The main task of this server is to persistently store key-value entries. The main reason for creating this server to keep values in such a way that at the moment of the write, they are 100% have been written to the disk. So when you are setting the value, you are guaranteed that this value is persisted on the disk.</p> <p>This service is very useful for storing configurations and user preferences.</p>"},{"location":"docs/modules/native/keyvaluestorage.en/#api","title":"API","text":"<p>Communication with the service is possible using gRPC interface. The native <code>keyvaluestorage</code> module provides definitions of the interface (proto file).</p> rpc Set(SetRequest) returns (SetResponse); <p>Sets the value for the specified key. Value is guaranteed to be stored persistently. If the key already holds some value, this operation will overwrite the value for this key.</p> RequestOK Parameter name Type Description namespace string Namespace where to store the key-value pair. It can be empty for a global key. key string Unique key inside namespace to set value value bytes Value to store. It cannot be larger than 15MB. Values that have more than one Mb in size will not be cached. <p>Value was successfully seted or updated.</p> rpc Get(GetRequest) returns (GetResponse); <p>Gets value for key.</p> RequestOKNOT_FOUND Parameter name Type Description namespace string Namespace where to search for the key-value pair. It can be empty for a global key. key string Unique key inside namespace to get value useCache bool Use cache to get value or not. The cache may not be valid under rare conditions (simultaneous reads and writes). The cache is automatically cleared every 60 seconds. <p>Value was successfully founded and returned. | Property name | Type  | Description  | | ------------- | ----- | ------------ | | value         | bytes | Stored value |</p> <p>Namespace doesn't exist or there is no such key inside namespace </p>"},{"location":"docs/modules/native/keyvaluestorage.en/#configuration","title":"Configuration","text":"<p>This service is controlled by environment variables.</p> Env default description SYSTEM_DB_URL mongodb://root:example@system_db/admin Mongo DB URL SYSTEM_CACHE_URL redis://system_cache System_cache redis connection URL SYSTEM_TELEMETRY_EXPORTER_ENDPOINT system_telemetry:55680 OTEL connector endpoint"},{"location":"docs/modules/native/namespace.en/","title":"Namespace service","text":"<p>The <code>native_namespace</code> is a service for managing namespaces in the entire platform ecosystem. Namespace provides logical separation of the data for modules and services. They can be used, for example, to distinguish customers in the application. After the creation of the namespace, the <code>native_namespace</code> service creates a new <code>openpb_namespace_&lt;name&gt;</code> database so that every new namespace data can be placed in a separate database. On <code>namespace</code> deletion, the service will delete its database, and all the data will be lost.</p>"},{"location":"docs/modules/native/namespace.en/#interaction-examples","title":"Interaction examples","text":"<p>Those are several examples of how you can interact with the system from other kernel systems or modules.</p> Basic communication <p>In this example we will create new namespace. Then we will check if created namespace exists</p> GO <pre><code>package main\n\nimport (\n\"context\"\n\nnative \"github.com/slamy-solutions/openbp/modules/native/libs/golang\"\n\"github.com/slamy-solutions/openbp/modules/native/libs/golang/namespace\"\n)\n\nconst NATIVE_NAMESPACE_URL = \"native_namespace:80\"\n\nfunc main() {\n// Connect to the namespace service\nnativeStub := native.NewNativeStub(native.NewStubConfig().WithNamespaceService())\nnativeStub.Connect()\ndefer nativeStub.Close()\n\n// Create new namespace\nnativeStub.Services.Namespace.Create(context.TODO(), &amp;namespace.EnsureNamespaceRequest{\nName: \"mynamespace\",\nFullName: \"My new namespace :)\",\nDescriptions: \"I created this namespace just for fun XD\"\n})\n\n// Check if namespace was created\nresponse, _ := nativeStub.Services.Namespace.Exists(context.TODO(), &amp;namespace.IsNamespaceExistRequest{\nName:     \"mynamespace\",\nUseCache: true,\n})\n\nprint(response.Exist)\n}\n</code></pre> Listen for events <p>In this example, we will listen for events on the namespace service</p> GO <pre><code>package main\n\nimport (\n\"context\"\n\"fmt\"\n\n\"github.com/nats-io/nats.go\"\nnative \"github.com/slamy-solutions/openbp/modules/native/libs/golang\"\nsystem \"github.com/slamy-solutions/openbp/modules/system/libs/golang\"\n\"github.com/slamy-solutions/openbp/modules/native/libs/golang/namespace\"\n)\n\n\nfunc main() {\n// Connect to the namespace service\nnativeStub := native.NewNativeStub(native.NewStubConfig().WithNamespaceService())\nnativeStub.Connect()\ndefer nativeStub.Close()\n\n// Connect to NATS\nsystemStub := system.NewSystemStub(system.NewSystemStubConfig().WithNats())\nsystemStub.Connect()\ndefer systemStub.Close()\n\n// Start listen for namespace creation events\njet, _ := systemStub.Nats.JetStream()\nconsumer, _ := jet.AddConsumer(\"native.namespace.event\", &amp;nats.ConsumerConfig{FilterSubject: \"native.namespace.event.created\", Name: \"mymodule.myservice.namespace_consumer\"})\nsub, _ := jet.SubscribeSync(\"\", nats.Bind(consumer.Stream, consumer.Name))\n\n// Create new namespace\nnativeStub.Services.Namespace.Ensure(context.TODO(), &amp;namespace.EnsureNamespaceRequest{\nName: \"mynamespace\",\n})\n\n// Receive event with created namespace\nmsg, _ := sub.NextMsg(5 * time.Second)\nvar namespaceData namespace.Namespace\nproto.Unmarshal(msg.Data, &amp;namespaceData)\nfmt.Printf(\"Created [%s] namespace\\n\", namespaceData.Name)\nmsg.Ack()\n}\n</code></pre> <p>Info</p> <p>You can connect to the system using other languages than those provided in this example. You will have to manually compile protobuf definitions of this service in the language you want. For more information, please have a look at Use the language you want concept.</p>"},{"location":"docs/modules/native/namespace.en/#schema","title":"Schema","text":"<p>The schema of the namespace is defined using <code>protobuf</code>. Definitions are provided by the <code>native</code> module.</p> <p><code>Namespace</code> schema:</p> Property Type Description name string Unique short name. fullName string Full, public name. description string Arbitrary description. created timestamp Timestamp when namespace was created updated timestamp Timestamp when namespace was updated last time version uint64 Counter that increases on every update of the namespace information"},{"location":"docs/modules/native/namespace.en/#api","title":"API","text":"<p>Communication with the system is possible using the gRPC interface. Definitions of the interface (proto file) are provided by the <code>native</code> module.</p> rpc Create(CreateNamespaceRequest) returns (CreateNamespaceResponse) {}; <p>Creates new namespace. Returns error if the namespace with same name already exists.</p> RequestOKALREADY_EXISTSIVALID_ARGUMENT Parameter name Type Description Required Format name string Unique name of the namespace. Can't be changed later True Regex <code>^[A-Za-z0-9]+$</code>. Maximum 32 characters fullName string Full, public name. Can be changed later. False Maximum 128 characters description string Arbitrary description. Can be changed later. False Maximum 512 characters <p>Namespace and the new <code>openbp_namespace_&lt;name&gt;</code> database were successfully created.</p> Response value Type Description namespace Namespace Newly created namespace <p>Info</p> <p>This response will raise the event on the <code>system_nats</code>. Check the Events section and the specific event for the namespace creation.</p> <p>Namespace with the same name already exists.</p> <p>At least one of the parameters has a bad format.</p> rpc Ensure(EnsureNamespaceRequest) returns (EnsureNamespaceResponse) {}; <p>Creates new namespace if it doesn't exist. Does nothing if the namespace already exists.</p> RequestOKIVALID_ARGUMENT Parameter name Type Description Required Format name string Unique name of the namespace. Can't be changed later True Regex <code>^[A-Za-z0-9]+$</code>. Maximum 32 characters fullName string Full, public name. Can be changed later. False Maximum 128 characters description string Arbitrary description. Can be changed later. False Maximum 512 characters <p>Namespace was successfully created (or it existed before request). Service created new <code>openbp_namespace_&lt;name&gt;</code> database.</p> Response value Type Description namespace Namespace Newly created namespace created bool Indicates if namespace was created or it already existed before this request <p>Info</p> <p>This response will raise the event on the <code>system_nats</code>. Check the Events section and the specific event for the namespace creation.</p> <p>At least one of the parameters has a bad format.</p> rpc Update(UpdateNamespaceRequest) returns (UpdateNamespaceResponse) {}; <p>Updates information of the existing namespace.</p> RequestOKNOT_FOUNDIVALID_ARGUMENT Parameter name Type Description Required Format name string Name of the namespace to update True - fullName string New full, public name False Maximum 128 characters description string New description. False Maximum 512 characters <p>Namespace was successfully updated.</p> Response value Type Description namespace Namespace Namespace information after the update <p>Info</p> <p>This response will raise the event on the <code>system_nats</code>. Check the Events section and the specific event for the namespace update.</p> <p>Namespace with this name wasn't founded.</p> <p>At least one of the parameters has a bad format.</p> rpc Delete(DeleteNamespaceRequest) returns (DeleteNamespaceResponse) {}; <p>Deletes namespace and corresponding database.</p> <p>Danger</p> <p>This is very danger operation. Service will delete the entire database and all data of all other services.</p> RequestOK Parameter name Type Description name string Unique name of the namespace to be deleted <p>Namespace was successfully deleted or wasn't exist. Service has removed the entry from the <code>openbp_global</code> database and deleted <code>openbp_namespace_&lt;name&gt;</code> database.</p> Response value Type Description existed bool Indicates if namespace existed before this operation or not <p>Info</p> <p>This response will raise an event on the <code>system_nats</code>. Check the Events section and specific events raised on namespace deletion.</p> rpc Get(GetNamespaceRequest) returns (GetNamespaceResponse) {}; <p>Returns namespace information by its name</p> RequestOKNOT_FOUND Parameter name Type Description name string Unique name of the namespace to get useCache bool Tell services if it can use cache in order to optimize response speed. <p>Tip</p> <p>Using cache greatly reduces response times. The cache may not be valid under rare conditions. Cache may not be valid only when there are a lot of read/write operations on namespace information simultaneously. In the real system, <code>namespace</code> probably will never change, so it's excellent practice to use cache wherever you can. The invalid cache deletes after some time (60 seconds by default). The system tries to keep the cache up to date, but it cants ensure its validity all the time.</p> <p>Namespace was founded, and its data was successfully returned.</p> Response value Type Description namespace Namespace Namespace information <p>Service can't find this namespaces. Probably, it doesn't exist.</p> rpc GetAll(GetAllNamespacesRequest) returns (stream GetAllNamespacesResponse) {}; <p>Gets stream of all namespaces</p> RequestOK <p>Request doesn't has parameters. It just returns all the namespaces.</p> <p>Successfully got a stream of the namespaces.</p> Response value Type Description namespace Namespace Namespace information rpc Exists(IsNamespaceExistRequest) returns (IsNamespaceExistResponse) {}; <p>Checks if namespace with provided name exists</p> RequestOK Parameter name Type Description Required name string Unique name of the namespace to check True useCache bool Tell services if it can use cache in order to optimize response speed. True <p>Tip</p> <p>Using cache greatly reduces response times. Assuming you will delete the namespace only once, it is an outstanding practice to use cache whenever possible. The invalid cache will be deleted after a short time (default is 60 seconds).</p> <p>Successfully checked if namespace exists.</p> Response value Type Description exist bool Namespace exist or not rpc Stat(GetNamespaceStatisticsRequest) returns (GetNamespaceStatisticsResponse) {}; <p>Get namespace statistics.</p> RequestOKNOT_FOUND Parameter name Type Description name string Unique name of the namespace to get useCache bool Tell services if it can use cache in order to optimize response speed. DB statistic Type Description objects uint64 Number ob objects stored in the database dataSize uint64 Total size of the raw data stored (without pre-alocated allocated space and indexes) totalSize uint64 Total memory usage of the namespace Response value Type Description db DB statistics Information about the database usage of this namespace <p>Namespace wasnt founded. Probably, it doesn't exist.</p>"},{"location":"docs/modules/native/namespace.en/#events","title":"Events","text":"<p>This service raises events on the <code>system_nats</code> service.</p> stream subject scheme conditions native_namespace_event native.namespace.event.created Namespace (protobuf) Namespace was created native_namespace_event native.namespace.event.updated Namespace (protobuf) Namespace was updated native_namespace_event native.namespace.event.deleted Namespace (protobuf) Namespace was deleted"},{"location":"docs/modules/native/namespace.en/#configuration","title":"Configuration","text":"<p>This service is controlled by environment variables.</p> Env default description SYSTEM_DB_URL mongodb://root:example@system_db/admin Mongo DB URL SYSTEM_CACHE_URL redis://system_cache System_cache redis connection URL SYSTEM_TELEMETRY_EXPORTER_ENDPOINT system_telemetry:55680 OTEL connector endpoint SYSTEM_NATS_URL nats://system_nats Nats endpoint"},{"location":"docs/modules/native/overview.en/","title":"Native module","text":"<p>The <code>native</code> module is an extensive collection of services and tools that will most likely be used in every module or solution. The services found here do not have any specifics of use and are inert to the final product (that is, they do not have dependencies and the context of what exactly will be done).</p> <p>Note</p> <p>For example, a whole subgroup of \"IAm\" services is responsible for authorization and authentication. Such services are likely to be used in any final solution or module.</p> <p>Therefore, we can say that this module is a collection of <code>meta-services</code> that are most often used as tools for other modules or solutions.</p> <p>Warning</p> <p>There is a big difference between the <code>system</code> and <code>native</code> modules. Services of <code>native</code> module arent external solutions (entire code is inside this repository).</p> <p>To summarize, those attributes service must have to be in the <code>native</code> module:</p> <ul> <li>Abstract. Doesn't depend on the final solution. Applicable to everything.</li> <li>Internal. The entire code is located in this repository.</li> <li>Dependency-less. The only dependency is the <code>system</code> module.</li> </ul>"},{"location":"docs/modules/native/iam/auth.en/","title":"OAuth service","text":"<p>The <code>native_iam_oauth</code> is a meta-service, that connects most of the <code>native_iam</code> services to deliver OAuth capabilities.</p>"},{"location":"docs/modules/native/iam/auth.en/#api","title":"API","text":"<p>Communication with the service is possible using the gRPC interface. Definitions of the interface (proto file) are provided by the <code>native</code> module.</p> rpc CreateTokenWithPassword(CreateTokenWithPasswordRequest) returns (CreateTokenWithPasswordResponse); <p>Creates new <code>native_iam_token</code> token using <code>native_iam_authentication_password</code> password authentication method.</p> RequestOK Parameter name Type Description namespace string <code>native_iam_namespace</code> namespace where <code>native_iam_identity</code> identity located. May be null for global identity. identity string <code>native_iam_identity</code> identity unique identifier password string <code>native_iam_authentication_password</code> password metadata string Arbitrary metadata. For example MAC/IP/information of the actor/application/browser/machine that makes this request. The exact format of metadata is not defined, but JSON is suggested. It will be added to the created <code>native_iam_token</code> token. scopes <code>native_iam_token</code> Scope Scopes of the created <code>native_iam_token</code> token. Empty for creating token with all possible scopes for identity. Property Type Description status Status Status of the <code>native_iam_identity</code> identity authentication and authorization accessToken string <code>native_iam_token</code> token used for authentication and authorization. If status is not OK - empty string refreshToken string <code>native_iam_token</code> token used for refreshing accessToken. If status is not OK - empty string <p>Where status is:</p> Status Description OK Everything is ok. Access and refresh tokens were successfully created CREDENTIALS_INVALID <code>native_iam_identity</code> identity or <code>native_iam_authentication_password</code> password is not valid. Maybe password authentication is not enabled for identity or the password doesn't match IDENTITY_NOT_ACTIVE <code>native_iam_identity</code> identity was manually disabled UNAUTHORIZED Not enough privileges to create <code>native_iam_token</code> token with specified scopes rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse); <p>Creates new OAuth access token using refresh token.</p> RequestOK Parameter name Type Description refreshToken string <code>native_iam_token</code> refresh token Property Type Description status Status Status of the <code>native_iam_token</code> token and <code>native_iam_identity</code> identity reauthorization accessToken string <code>native_iam_token</code> token used for authentication and authorization. If status is not OK - empty string <p>Where status is:</p> Status Description OK Everything is ok. New <code>native_iam_token</code> access token was successfully created TOKEN_INVALID Received <code>native_iam_token</code> token has bad format or its signature doesnt match TOKEN_NOT_FOUND Most probably <code>native_iam_token</code> token was deleted after its creation TOKEN_DISABLED <code>native_iam_token</code> token was manually disabled TOKEN_EXPIRED <code>native_iam_token</code> token expired TOKEN_IS_NOT_REFRESH_TOKEN Provided <code>native_iam_token</code> token was recognized but most probably it is ordinary access token (not refresh one) IDENTITY_NOT_FOUND <code>native_iam_identity</code> identity wasn't founded. Most probably it was deleted after token creation IDENTITY_NOT_ACTIVE <code>native_iam_identity</code> identity was manually disabled. IDENTITY_UNAUTHENTICATED Most probably <code>native_iam_identity</code> identity <code>native_iam_policy</code> policies changed and now it's not possible to create <code>native_iam_token</code> tokens with same scopes rpc CheckAccess(CheckAccessRequest) returns (CheckAccessResponse); <p>Checks if a token is allowed to perform actions from the specified scopes</p> RequestOK Parameter name Type Description accessToken string Token to check scopes Scope Scopes for with to check access Property Type Description status Status Status of the check message string Details of the status, that can be safelly returned and displayed to the user <p>Where status is:</p> Status Description OK Everything is ok. The provided token allows to access scopes. TOKEN_INVALID Received <code>native_iam_token</code> token has bad format or its signature doesnt match TOKEN_NOT_FOUND Most probably <code>native_iam_token</code> token was deleted after its creation TOKEN_DISABLED <code>native_iam_token</code> token was manually disabled TOKEN_EXPIRED <code>native_iam_token</code> token expired UNAUTHORIZED <code>native_iam_token</code> token has not enough privileges to access specified scopes"},{"location":"docs/modules/native/iam/auth.en/#configuration","title":"Configuration","text":"<p>This service is controlled by environment variables.</p> Env default description SYSTEM_DB_URL mongodb://root:example@system_db/admin Mongo DB URL SYSTEM_CACHE_URL redis://system_cache System_cache redis connection URL SYSTEM_TELEMETRY_EXPORTER_ENDPOINT system_telemetry:55680 OTEL connector endpoint NATIVE_IAM_POLICY_URL native_iam_policy:80 Native_iam_policy server gRPC URL NATIVE_IAM_TOKEN_URL native_iam_token:80 Native_iam_token server gRPC URL NATIVE_IAM_IDENTITY_URL native_iam_identity:80 Native_iam_identity server gRPC URL NATIVE_IAM_AUTHENTICATION_PASSWORD_URL native_iam_authentication_password:80 Native_iam_authentication_password server gRPC URL"},{"location":"docs/modules/native/iam/iam.en/","title":"Identity and Access Management services","text":"<p>With this group of services, you can specify who and what can access services in the OpenBP.</p> <p>Here you can find the bird-eye view of how data flows between services: </p> <p>To be short, the main point of interaction is <code>OAuth</code> service.</p>"},{"location":"docs/modules/native/iam/identity.en/","title":"IAM Identity service","text":"<p>The <code>native_iam_identity</code> is service for managing authentication identities. Its mainly used by other actors (users/applications/servers) as a way to outsource identification capabilities. For example, in OpenBP, users don't have a login/password/security key. They have one-to-one binding with <code>native_iam_identity</code> identity instead.</p> <p>Identity implements authentification capabilities using <code>native_iam_authentication</code> methods (like <code>native_iam_authentication_password</code> to authenticate using a secret password).</p> <p>Authorization implemented using <code>native_iam_policy</code> policies. Policies can be added and removed from the identity. One identity can have many policies assigned.</p>"},{"location":"docs/modules/native/iam/identity.en/#schema","title":"Schema","text":"<p>The schema of the identity is defined using <code>protobuf</code>. Definitions are provided by the <code>native</code> module.</p> <p><code>Identity</code> schema:</p> Property Type Description namespace string Namespaces of the identity. Can be empty for global identities. uuid string Unique identity identifier inside namespace. Assigned automatically by service name string User-defined public name active bool If identity is not active, it will not be able to login and perform any actions. policies PolicyReference[] <code>native_iam_policy</code> policies assigned to the identity <p><code>PolicyReference</code> schema:</p> Property Type Description namespace string Namespace where policy located uuid string Unique identifier of policy inside namespace Example <p>This is an example of identity that belongs to the admin user. </p> <p>Assume you have defined <code>native_iam_policy</code> policy with \"542c2b97bac0595474108125\" uuid that grants access to all resources.</p> <pre><code>    {\n\"namespace\": \"\",\n\"uuid\": \"142c2b97bac0595474173823\",\n\"name\": \"User admin\",\n\"active\": true,\n\"policies\": [\n{\n\"namespace\": \"\",\n\"uuid\": \"542c2b97bac0595474108125\"\n}\n]\n}\n</code></pre>"},{"location":"docs/modules/native/iam/identity.en/#api","title":"API","text":"<p>Communication with the service is possible using the gRPC interface. Definitions of the interface (proto file) are provided by the <code>native</code> module.</p> rpc Create(CreateIdentityRequest) returns (CreateIdentityResponse); <p>Creates new identity</p> RequestOKFAILED_PRECONDITION Parameter name Type Description namespace string Namespace where identity will be located name string Public name for newly created identity. It may not be unique - this is just a human-readable name. initiallyActive bool Should the identity be active at the start or not <p>The identity was successfully created. Returns newly created identity with all the data and assigned UUID.</p> <p>Info</p> <p>This response will raise the event on the amqp. Check the Events section and the specific event for identity creation.</p> <p>Namespace doesn't exist</p> rpc Get(GetIdentityRequest) returns (GetIdentityResponse); <p>Gets identity by its namespace and UUID</p> RequestOKNOT_FOUNDINVALID_ARGUMENT Parameter name Type Description namespace string Namespace of the identity uuid string Unique identifier of the identity inside namespace useCache bool Use cache for this request or not. The cache may not be valid in rare circumstances. The invalid cache automatically deletes after a short period of time (30 seconds by default). <p>Returns identity. See Schema.</p> <p>The namespace doesn't exist, or there is no identity with a specified UUID inside the namespace.</p> <p>UUID has a bad format</p> rpc Delete(DeleteIdentityRequest) returns (DeleteIdentityResponse); <p>Deletes identity by its namespace and UUID</p> RequestOK Parameter name Type Description namespace string Namespace of the identity uuid string Unique identifier of the identity inside namespace <p>Identity doesn't exist in the system. It was deleted during this operation or earlier. The service also cleared all the cache related to this identity.</p> <p>Info</p> <p>This response will raise the event on the amqp. Check the Events section and the specific event for identity deletion.</p> rpc AddPolicy(AddPolicyRequest) returns (AddPolicyResponse); <p>Adds policy to the identity. If identity already has this policy attached - it does nothing. So you can use this method to ensure identity has the policies you need.</p> RequestOKINVALID_PRECONDITIONNOT_FOUNDINVALID_ARGUMENT Parameter name Type Description identityNamespace string Namespace of the identity identityUUID string Unique identifier of the identity inside namespace policyNamespace string Namespace of the <code>native_iam_policy</code> policy policyUUID string Unique identifier of the <code>native_iam_policy</code> policy <p>The policy was successfully assigned to the identity.</p> <p>Info</p> <p>This response will raise the event on the amqp. Check the Events section and the specific event for identity policies changes.</p> <p>Policy doesnt exist</p> <p>The identity namespace doesn't exist, or there is no identity with a specified UUID inside the namespace.</p> <p>Identity UUID has bad format</p> rpc RemovePolicy(RemovePolicyRequest) returns (RemovePolicyResponse); <p>Removes policy from the identity. If identity doesn't have an assigned policy - it does nothing.</p> RequestOKNOT_FOUNDINVALID_ARGUMENT Parameter name Type Description identityNamespace string Namespace of the identity identityUUID string Unique identifier of the identity inside namespace policyNamespace string Namespace of the <code>native_iam_policy</code> policy policyUUID string Unique identifier of the <code>native_iam_policy</code> policy <p>The policy was successfully removed from to the identity.</p> <p>Info</p> <p>This response will raise the event on the amqp. Check the Events section and the specific event for identity policies changes.</p> <p>The identity namespace doesn't exist, or there is no identity with a specified UUID inside the namespace.</p> <p>Identity UUID has bad format</p> rpc SetActive(SetIdentityActiveRequest) returns (SetIdentityActiveResponse); <p>Set identity active or not.</p> RequestOKNOT_FOUNDINVALID_ARGUMENT Parameter name Type Description namespace string Namespace of the identity uuid string Unique identifier of the identity inside namespace active bool Setactive or not <p>Active state of the identity was successfully changed.</p> <p>Info</p> <p>This response will raise the event on the amqp. Check the Events section and the specific event for identity active state changes.</p> <p>The identity namespace doesn't exist, or there is no identity with a specified UUID inside the namespace.</p> <p>Identity UUID has bad format</p>"},{"location":"docs/modules/native/iam/identity.en/#events","title":"Events","text":"<p>Bug</p> <p>This feature is NOT IMPLEMENTED</p> system_amqp exchange routing key scheme conditions native_iam_identity_events created Created identity (protobuf) Identity was created native_iam_identity_events updated ? Identity was updated native_iam_identity_events deteled ? Identity was deleted"},{"location":"docs/modules/native/iam/identity.en/#configuration","title":"Configuration","text":"<p>This service is controlled by environment variables.</p> Env default description SYSTEM_DB_URL mongodb://root:example@system_db/admin Mongo DB URL SYSTEM_CACHE_URL redis://system_cache System_cache redis connection URL SYSTEM_TELEMETRY_EXPORTER_ENDPOINT system_telemetry:55680 OTEL connector endpoint NATIVE_NAMESPACE_URL native_namespace:80 Native_namespace server gRPC URL NATIVE_IAM_POLICY_URL native_iam_policy:80 Native_iam_policy server gRPC URL"},{"location":"docs/modules/native/iam/policy.en/","title":"IAM Policy service","text":"<p>The <code>native_iam_policy</code> is a service for managing user-defined authorization policies. Those policies can be assigned to the <code>native_identity</code> identity. The policy specifies what resources identity can access and what actions it can perform on those resources.</p>"},{"location":"docs/modules/native/iam/policy.en/#schema","title":"Schema","text":"<p>The schema is defined using <code>protobuf</code>. Definitions are provided by the <code>native</code> module.</p> Property Type Description uuid string Unique identifier. Service will automatically assign it to the policy. name string User-defined name. It can be whatever you want. It is just for you to distinguish them namespace string <code>native_namespace</code> namespace where policy is defined. Policies are valid only inside theirs namespaces. If the namespace is empty, the policy is \"global.\" Global policies are working and granting access to all namespaces. resources string[] List of the resources that this policy can access. actions string[] List of activities that can be performed on specified resources by this policy. <p>Tip</p> <p>Resources and actions can be defined with wildcards to grant access to the group of targets. Use the <code>*</code> symbol at the end of the resource or action to make it a wildcard.</p>"},{"location":"docs/modules/native/iam/policy.en/#examples","title":"Examples","text":"<p>Those are several examples of defined policies in JSON format:</p> Root access to entire system <pre><code>    {\n\"name\": \"Root access\",\n\"uuid\": \"542c2b97bac0595474108123\",\n\"namespace\": \"\",\n\"resources\": [\"*\"],\n\"actions\": [\"*\"]\n}\n</code></pre> Strict access to specific resource <pre><code>    {\n\"name\": \"Read access to my service\",\n\"uuid\": \"542c2b97bac0595474108124\",\n\"namespace\": \"somenamespace\",\n\"resources\": [\"mycompany.myproject.someservice.resource1\"],\n\"actions\": [\"mycompany.myproject.someservice.get\", \"mycompany.myproject.someservice.list\"]\n}\n</code></pre> Wildcard access to the group of the resources <pre><code>    {\n\"name\": \"Full access for my service\",\n\"uuid\": \"542c2b97bac0595474108125\",\n\"namespace\": \"somenamespace\",\n\"resources\": [\"mycompany.myproject.someservice.*\"],\n\"actions\": [\"mycompany.myproject.someservice.*\"]\n}\n</code></pre> <p>Info</p> <p>There is no strict structure for the resource and action names, but it's recommended to use <code>&lt;companyname&gt;.&lt;project/module&gt;.&lt;service&gt;.&lt;......&gt;</code> prefix. This way, all the resources and actions will be unique and will not have unwanted collisions.</p>"},{"location":"docs/modules/native/iam/policy.en/#api","title":"API","text":"<p>Communication with the service is possible using the gRPC interface. Definitions of the interface (proto file) are provided by the <code>native</code> module.</p> rpc Create(CreatePolicyRequest) returns (CreatePolicyResponse); <p>This endpoint allows you to create new policy.</p> RequestOKFAILED_PRECONDITION Parameter name Type Description namespace string Namespace where policy will be located name string User-defined name resources array of string Resources that can be accessed by this policy actions array of string Actions that can be performed on the resources <p>The policy was successfully created. Returns newly created policy with all the data and assigned UUID.</p> <p>Info</p> <p>This response will raise the event on the amqp. Check the Events section and the specific event for policy creation.</p> <p>Namespace doesn't exist</p> rpc Get(GetPolicyRequest) returns (GetPolicyResponse); <p>Gets policy using its UUID and namespace.</p> RequestOKNOT_FOUNDINVALID_ARGUMENT Parameter name Type Description namespace string Namespace where policy located uuid string Unique identifier of policy inside namespace useCache bool Use cache for this request or not. Cache may be invalid under rare circumstances <p>Returns policy data. See Schema.</p> <p>Namespace doesn't exist, or there is no policy with a specified UUID in this namespace</p> <p>UUID has a bad format</p> rpc Exist(ExistPolicyRequest) returns (ExistPolicyResponse); <p>Checks if policy with specified UUID exist in namespace</p> RequestOK Parameter name Type Description namespace string Namespace where policy located uuid string Unique identifier of policy inside namespace useCache bool Use cache for this request or not. Cache may be invalid under rare circumstances Parameter name Type Description exist bool Policy exist or not rpc Update(UpdatePolicyRequest) returns (UpdatePolicyResponse); <p>Updates policy information</p> RequestOKNOT_FOUNDINVALID_ARGUMENT Parameter name Type Description namespace string Namespace where policy located uuid string Unique identifier of the policy name string User-defined name resources array of string Resources that can be accessed by this policy actions array of string Actions that can be performed on the resources <p>Information was successfully updated. Returns updated information as a response to this request. See Schema. The service also cleared all the cache related to this policy.</p> <p>Info</p> <p>This response will raise the event on the amqp. Check the Events section and the specific event for policy updates.</p> <p>Namespace doesn't exist, or there is no policy with a specified UUID in this namespace</p> <p>UUID has a bad format</p> rpc Delete(DeletePolicyRequest) returns (DeletePolicyResponse); <p>Deletes policy</p> RequestOK Parameter name Type Description namespace string Namespace where policy located uuid string Unique identifier of the policy <p>The policy was successfully deleted. The service also cleared all the cache related to this policy.</p> <p>Info</p> <p>This response will raise the event on the amqp. Check the Events section and the specific event for policy deletion.</p> rpc List(ListPoliciesRequest) returns (stream ListPoliciesResponse); <p>Streams list of policies in namespace. See Schema.</p> Request Parameter name Type Description namespace string Namespace where to search policies skip unsigned int How many entries to skip before returning actual policies limit unsigned int Maximum number of policies to return. 0 to ignore the limit"},{"location":"docs/modules/native/iam/policy.en/#events","title":"Events","text":"<p>Bug</p> <p>This feature is NOT IMPLEMENTED</p> system_amqp exchange routing key scheme conditions native_iam_policy_events created Created policy (protobuf) Policy was created native_iam_policy_events updated New version of policy (protobuf) Policy was updated native_iam_policy_events deteled ? Policy was deleted"},{"location":"docs/modules/native/iam/policy.en/#configuration","title":"Configuration","text":"<p>This service is controlled by environment variables.</p> Env default description SYSTEM_DB_URL mongodb://root:example@system_db/admin Mongo DB URL SYSTEM_CACHE_URL redis://system_cache System_cache redis connection URL SYSTEM_TELEMETRY_EXPORTER_ENDPOINT system_telemetry:55680 OTEL connector endpoint NATIVE_NAMESPACE_URL native_namespace:80 Native_namespace server gRPC URL"},{"location":"docs/modules/native/iam/token.en/","title":"IAM Token service","text":"<p>The <code>native_iam_token</code> is a service for managing authorization tokens.</p>"},{"location":"docs/modules/native/iam/token.en/#schema","title":"Schema","text":"<p>The schema is defined using <code>protobuf</code>. Definitions are provided by the <code>native</code> module.</p> <p><code>Token</code> schema:</p> Property Type Description namespace string <code>native_namespace</code> namespace where token and identity are located. Epmty for global token (without namespace) uuid string Token unique identifier inside namespace. It is assigned automatically by service identity string <code>native_iam_identity</code> identity unique identifier inside namespace disabled string Identifies if token was manually disabled. Disabled token always fails on authorization and can not be re-enabled expiresAt DateTime Date and time after with token will not be valid and will fail on Refresh and Authorize attempts scopes Scope[] List of token scopes. Describes what actions can token perform on what resources createdAt DateTime Date and time when token was created creationMetadata string Arbitrary metadata added on token creation. For example MAC/IP/information of the actor/application/browser/machine that created this token. The exact format of metadata is not defined, but JSON is suggested. <p><code>Scope</code> schema:</p> Property Type Description namespace string <code>native_namespace</code> namespace to which scope is bounded. Empty string if the scope is not bounded to any namespace (is global) resources string[] Resources that can be accessed using this token actions string[] Actions that can be performed on accessible resources Example <p>This example shows a token created by admin user. Using this token, you can access all the resources and perform all possible actions on them.</p> <pre><code>    {\n\"namespace\": \"\",\n\"uuid\": \"542c2b97bac0595474108125\",\n\"identity\": \"734c2b97bac0595474108526\",\n\"disabled\": false,\n\"expiresAt\": \"2022-10-20T20:20:39.945Z\",\n\"scopes\": [\n{\n\"namespace\": \"\",\n\"resources\": [\"*\"],\n\"actions\": [\"*\"]\n}\n],\n\"createAt\": \"2022-10-19T20:20:39.945Z\",\n\"creationMetadata\": {\"ip\": \"32.43.12.123\", \"mac\": \"2C:54:91:88:C2:E4\", \"user-agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4942.12 Safari/536.45\"}\n}\n</code></pre>"},{"location":"docs/modules/native/iam/token.en/#api","title":"API","text":"<p>Communication with the service is possible using the gRPC interface. Definitions of the interface (proto file) are provided by the <code>native</code> module.</p> rpc Create(CreateRequest) returns (CreateResponse); <p>Create new token</p> RequestOKFAILED_PRECONDITION Parameter Type Description namespace string <code>native_namespace</code> namespace where the token will be located and where is related <code>native_iam_identity</code> identity located identity string Unique identifier of the identity scopes Scope[] Scopes that will be applied to the token metadata string Actions that can be performed on the resources <p>The token was successfully created.</p> Property Type Description token string Actual access token formated to the string. refreshToken string Refreshtoken is used to refresh access token tokenData Token Token data <p>Info</p> <p>This response will raise the event on the amqp. Check the Events section and the specific event for token creation.</p> <p><code>native_namespace</code> namespace doesn't exist</p> rpc Get(GetRequest) returns (GetResponse); <p>Get token data using its unique identifier</p> RequestOKNOT_FOUNDINVALID_ARGUMENT Parameter Type Description namespace string <code>native_namespace</code> namespace of the token uuid string Unique identifier of the token useCache bool Use cache for this request or not. Cache may be invalid. The invalid cache automatically deletes after short period of time (30 seconds by default) <p>Returns token data. See Schema.</p> <p>The token <code>native_namespace</code> namespace doesn't exist, or there is no token with a specified UUID inside the namespace.</p> <p>UUID has a bad format</p> rpc RawGet(RawGetRequest) returns (RawGetResponse); <p>Get token data using token in string format</p> RequestOKNOT_FOUNDINVALID_ARGUMENT Parameter Type Description token string Refresh or access token useCache bool Use cache for this request or not. Cache may be invalid. The invalid cache automatically deletes after short period of time (30 seconds by default) <p>Returns token data. See Schema.</p> <p>The token is valid, but it wasn't founded. Maybe <code>native_namespace</code> namespace or token was deleted.</p> <p>The token has a bad format</p> rpc Delete(DeleteRequest) returns (DeleteResponse); <p>Delete token. If the token doesn't exist - it does nothing.</p> RequestOKINVALID_ARGUMENT Parameter Type Description namespace string <code>native_namespace</code> namespace of the token uuid string Unique identifier of the token <p>The token was deleted. All the cache for this token was cleared.</p> <p>Info</p> <p>This response will raise the event on the amqp. Check the Events section and the specific event for token deletion.</p> <p>The token has a bad format</p> rpc Disable(DisableRequest) returns (DisableResponse); <p>Disable token using its unique identifier. The disabled token can not be used for authorization and authentication. The token cannot be re-enabled.</p> RequestOKNOT_FOUNDINVALID_ARGUMENT Parameter Type Description namespace string <code>native_namespace</code> namespace of the token uuid string Unique identifier of the token <p>The token was disabled</p> <p>Info</p> <p>This response will raise the event on the amqp. Check the Events section and the specific event for token disabling.</p> <p>The token wasn't founded. Maybe <code>native_namespace</code> namespace or token was deleted.</p> <p>The token has a bad format</p> rpc Validate(ValidateRequest) returns (ValidateResponse); <p>Check if token:</p> <ol> <li>has valid format</li> <li>was signed by this service</li> <li>not expired</li> <li>exists (there is information about this token in service)</li> <li>active (wasn't manually disabled)</li> </ol> RequestOK Parameter Type Description token string Token to validate useCache bool Use cache for faster validation or not. Cache has a very low chance to not be valid. If cache is not valid it will be deleted after short period of time (30 seconds by default) <p>As the response you will receive:</p> Property Type Description status Status Validation status tokenData Token Token data. See Schema for token. It will only be returned if the status is OK. <p>Where <code>Status</code> is:</p> Status Description OK Everything is ok. The token is valid. INVALID The token has a bad format or invalid signature NOT_FOUND The token wasn't founded. Most probably, it was deleted. DISABLED The token was manually disabled. EXPIRED The token expired. rpc Refresh(RefreshRequest) returns (RefreshResponse); <p>Validate refresh token and create new token based on it.</p> RequestOK Parameter Type Description refreshToken string Refresh token, based on which new token will be generated <p>As the response you will receive:</p> Property Type Description status Status Validation and refresh status token string New token. It will only be returned if the status is OK. tokenData Token Token data. See Schema for token. It will only be returned if the status is OK. <p>Where <code>Status</code> is:</p> Status Description OK Everything is ok. INVALID The token has a bad format or invalid signature NOT_FOUND The token wasn't founded. Most probably, it was deleted. DISABLED The token was manually disabled. EXPIRED The token expired. NOT_REFRESH_TOKEN This token was founded, and it is valid, but this is not a refresh token. rpc GetTokensForIdentity(GetTokensForIdentityRequest) returns (stream GetTokensForIdentityResponse); <p>Get tokens for specified <code>native_iam_identity</code> identity</p> RequestOK Parameter Type Description namespace string <code>native_namespace</code> namespace of the tokens and <code>native_iam_identity</code> identities identity string Unique identifier of the <code>native_iam_identity</code> identity activeFilter ActiveFilter How to filter on \"active\" property of the token. See schema below. skip uint32 Skip of results before returning actual tokens. Set to 0 in order not to skip limit uint32 Limit of the returned results. Set to 0 in order to remove the limit and return all possible results up to the end. <p>Where <code>ActiveFilter</code> is:</p> ActiveFilter Description ALL Don't filter. Get all tokens. ONLY_ACTIVE Only get tokens that weren't disabled and not expired ONLY_NOT_ACTIVE Only get tokens that are disabled or expired <p>The service will stream list of tokens. See Schema for token data to be returned.</p> <p>Tokens are ordered using their creation time. The service will return newly created tokens first.</p>"},{"location":"docs/modules/native/iam/token.en/#events","title":"Events","text":"<p>Bug</p> <p>This feature is NOT IMPLEMENTED</p> system_amqp exchange routing key scheme conditions native_iam_token_events created Created token (protobuf) Token was created native_iam_token_events updated ? Token was updated native_iam_token_events deteled ? Token was deleted"},{"location":"docs/modules/native/iam/token.en/#configuration","title":"Configuration","text":"<p>This service is controlled by environment variables.</p> Env default description SYSTEM_DB_URL mongodb://root:example@system_db/admin Mongo DB URL SYSTEM_CACHE_URL redis://system_cache System_cache redis connection URL SYSTEM_TELEMETRY_EXPORTER_ENDPOINT system_telemetry:55680 OTEL connector endpoint NATIVE_NAMESPACE_URL native_namespace:80 Native_namespace server gRPC URL"},{"location":"docs/modules/system/cache/","title":"System cache service","text":"<p>System cache is a Redis server for dealing with the cache. It is configured to have max available memory and LRU keys eviction policy. Check Redis caching manual.</p>"},{"location":"docs/modules/system/cache/#usage","title":"Usage","text":"<p>The cache service can be directly accessed through Redis client libraries, ensuring high speed and utilizing built-in Redis load balancing features. Furthermore, OpenBP offers libraries that encapsulate Redis communication logic and provide a clearer interface with OTel integration.</p>"},{"location":"docs/modules/system/cache/#configuration","title":"Configuration","text":"<p>This service is controlled by a built-in configuration that consists of various environment variables:</p> env range default description MAXMEMORY 0mb - Xmb 512mb Maximum ammount of memory that can be used by cache instance. After reaching this limit, service will start to drop keys"},{"location":"docs/modules/system/cache/#keys","title":"Keys","text":"<p>To ensure unique cache keys throughout the entire system, it is crucial to use the <code>external_&lt;developer&gt;_&lt;whatever + namespace&gt;</code>format. Dont forget to include namespace name to the key. Here are some examples:</p> <ul> <li>external_scribesystems_rcp_integrator_devices_list_customnamespace</li> <li>external_scribesystems_rcp_integrator_devices_data_customnamespace_84529</li> <li>external_litesolutions_workload_participant_customnamespace_381204</li> </ul> <p>For native modules, the names differ and start with the prefix \"native\". Examples:</p> <ul> <li>native_namespace_list_customnamespace</li> <li>native_namespace_data_customnamespace_testing</li> <li>native_cognito_users_list_customnamespace</li> </ul> <p>By following this naming convention, collisions between modules installed by different developers can be avoided, and the cache access remains shared appropriately.</p>"},{"location":"docs/modules/system/cache/#values","title":"Values","text":"<p>It is important not to store large values in this cache as the service is optimized for small values. Storing big files can result in the eviction of hundreds of thousands of entries. Remember that smaller values are preferred for optimal performance.</p> <p>When storing values in this service, it is recommended to compress them using a suitable algorithm to reduce memory footprint. Compression should be implemented on the client side. The recommended approach is to use LZO as it provides fast decompression speeds. If you primarily store JSON or text data, you may also consider using Brotli compression.</p>"},{"location":"docs/modules/system/cache/#commands","title":"Commands","text":"<p>You are free to use all Redis commands that directly modify data in the cache. However, please keep in mind that the value associated with a key can be removed at any time.</p> <p>Avoid using Redis commands that are not related to data manipulation, such as configuration or options settings. Stick to the commands that interact with and modify the stored data.</p>"},{"location":"docs/modules/system/cache/#security","title":"Security","text":"<p>The cache is accessible by every service, and it serves as a centralized storage for data from all services. It is crucial to ensure that services do not allow direct access to keys by callers. Each service carries the responsibility of ensuring that it never reads or retrieves keys that belong to other services, under any circumstances. Implement proper access controls and safeguards within each service to maintain data isolation and prevent unauthorized access to keys belonging to other services.</p>"},{"location":"docs/modules/system/cache/#versions-and-compatibility","title":"Versions and compatibility","text":"<p>The system cache is designed to ensure reverse compatibility of key formats. This means that you don't have to refer to the documentation for every new version to verify the key format. The introduction of new formats and key prefixes will not break compatibility with the old ones, and it will not cause collisions with existing keys.</p> <p>You can rely on the system cache to handle key format changes seamlessly, allowing you to update and evolve your application without worrying about compatibility issues or key collisions.</p>"},{"location":"docs/modules/system/cache/#contributing","title":"Contributing","text":"<p>Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.</p>"},{"location":"docs/modules/system/db/","title":"System db service","text":"<p>The <code>system_db</code> is a MongoDB service designed to serve as a general-purpose database for various functionalities within the OpenBP project. It acts as the main persistence provider, ensuring data durability and availability. The container of the MongoDB is used as is to ensure, that the license is not violated. We suggest checking MongoDB Enterprise because it has a lot of features that you would probably want to incorporate into your project.</p>"},{"location":"docs/modules/system/db/#resource-naming-convention","title":"Resource naming convention","text":"<p>To ensure that developers' resources do not overlap, it is important to establish a naming convention.</p> <p>The service utilizes two types of databases:</p> <ul> <li>Namespaced: As OpenBP implements multitenancy, the service divides information between each tenant. This allows for easy understanding of the database usage by each tenant. The naming convention for these databases is <code>openbp_namespace_&lt;namespace name&gt;</code>.</li> <li>Global: There is only one global database per installation, which contains information relevant to all tenants. The name of this database is <code>openbp_global</code>.</li> </ul> <p>While you have the freedom to create additional databases, it is advised to exercise caution, as this may negatively impact other services within OpenBP, particularly those related to technical aspects such as statistics and backup.</p> <p>To prevent overlaps with other developers, it is important to use the <code>external_&lt;org name&gt;_&lt;project name&gt;_</code> prefix for collections within the databases. This ensures that collections are unique to each developer. However, it's worth noting that OpenBP internal collections will have a shorter name starting with the module name, but they will never begin with the <code>external_ prefix</code>.</p>"},{"location":"docs/modules/system/nats/","title":"System nats service","text":"<p>The <code>system_nats</code> service is a managed service that leverages NATS, a versatile messaging system. The service is preconfigured with default settings and utilizes unmodified NATS containers. Moreover, it incorporates the JetStream extension to enable data persistency.</p>"},{"location":"docs/modules/system/nats/#resource-naming-convention","title":"Resource naming convention","text":"<p>To ensure proper resource management and prevent overlapping resource names within the shared <code>system_nats</code> service, it is crucial to establish a consistent naming convention. This convention becomes particularly important when developing your own modules and services.</p> <p>For your organization's modules and services, it is recommended to use the <code>external_&lt;your org name&gt;_&lt;project name&gt;_</code> prefix for all the resource names. This prefix helps clearly identify and differentiate your resources from others, minimizing the risk of conflicts. By incorporating your organization and project names into the prefix, you create a unique namespace within the NATS system.</p> <p>On the other hand, resource names generated by OpenBP modules will have a shorter format and will directly start with the module name. However, these resources will never begin with the <code>external_</code> prefix.</p>"},{"location":"docs/modules/system/overview/","title":"System module","text":"<p>This module consists of services that provide low-level functionalities such as database management, security, caching, message queues ...</p> <p>The system services include:</p> Service Description DB NoSQL database - main storage of all the information. Driven by MongoDB. Cache In memory key-value DB for cache with automatic keys-eviction. Driven by Redis. NATS NATS service for distributed messages and queues. Redis General purpose, key-value, in memory Redis database. Vault Security service with HSM (hardware security module) integration for state of the art secrets protection, certificates management, encryption, signing and more."},{"location":"docs/modules/system/overview/#licensing","title":"Licensing","text":"<p>Most of these services are used as-is, without any modifications, to ensure that their licenses are not violated. The majority of them have Enterprise licenses with additional features. If you require additional functionalities, the enterprise services should integrate with OpenBP without any problems. These projects are open-source, so if you genuinely appreciate what OpenBP brings to the table, don't forget to support each of them separately.</p>"},{"location":"docs/modules/system/redis/","title":"System redis service","text":"<p>The <code>system_redis</code> service is a managed Redis database designed for general-purpose use. This service utilizes plain Redis containers without any modifications and comes with a default configuration.</p> <p>Warning</p> <p>This service is not intended for storing large amounts of data persistently due to the limited RAM capacity of the Redis service. If you require long-term persistent storage, it is recommended to utilize the <code>system_db</code>. service instead.</p>"},{"location":"docs/modules/system/redis/#keys-naming-convention","title":"Keys naming convention","text":"<p>To ensure proper key management and prevent overlapping keys within the shared <code>system_redis</code> service, it is crucial to establish a consistent naming convention. This convention becomes particularly important when developing your own modules and services.</p> <p>For your organization's modules and services, it is recommended to use the <code>external_&lt;your org name&gt;_&lt;project name&gt;_</code> prefix for all the keys. This prefix helps clearly identify and differentiate your keys from others, minimizing the risk of conflicts. By incorporating your organization and project names into the prefix, you create a unique namespace within the Redis database.</p> <p>On the other hand, keys generated by OpenBP modules will have a shorter format and will directly start with the module name. However, these keys will never begin with the <code>external_</code> prefix.</p>"},{"location":"docs/modules/system/vault/","title":"System vault service","text":"<p>The <code>system_vault</code> service is a crucial component responsible for robust security management within the OpenBP system. Its primary function is to establish communication with the Hardware Security Module (HSM) through PKCS interfaces. It offers a user-friendly API that enables seamless integration with other services.</p> <p>By leveraging the capabilities of the HSM and implementing PKCS interfaces, the <code>system_vault</code> service ensures a high level of security for managing critical information within the OpenBP system. Its user-friendly API further facilitates seamless interaction with other services, making it an essential component for secure and efficient operations.</p>"},{"location":"docs/modules/system/vault/#seal-unseal","title":"Seal / Unseal","text":"<p>Upon system startup, the vault enters a <code>sealed</code> state, which means that communication with the service is not possible. To make effective use of the service, the vault needs to be manually <code>unsealed</code> using a password. It is crucial to keep this password secure as losing it would render the service inaccessible and result in permanent loss of all stored secrets.</p> <p>Warning</p> <p>By default, the service comes with a predefined unsealing password, which it attempts to use during startup. However, it is highly recommended to change this password to enhance security. This can be achieved through appropriate API request within the service.</p>"},{"location":"docs/modules/system/vault/#usage-examples","title":"Usage examples","text":"<p>Info</p> <p>Those examples are only for external developers. If you are contributor to the OpenBP project, remember to change imports so they are pointing from the inside of the OpenBP repository.</p> Encrypt/Decrypt arbitrary data <p>In this example we will encrypt and decrypt string using vaults HSM.</p> GO <pre><code>package main\n\nimport (\n\"bytes\"\n\"context\"\n\"fmt\"\n\nopenbp \"github.com/slamy-solutions/openbp-go\"\n\"github.com/slamy-solutions/openbp-go/modules\"\n\"github.com/slamy-solutions/openbp-go/modules/system\"\n\"github.com/slamy-solutions/openbp-go/modules/system/proto/vault\"\n)\n\nfunc main() {\nctx := context.TODO()\n\nobp, err := openbp.ConnectToModules(ctx, modules.NewStubConfig().\nWithSystemModule(system.NewSystemStubConfig().WithVault()),\n)\nif err != nil {\npanic(err)\n}\n\ndata := []byte(\"Hello OpenBP\")\n\n// Encrypt data\nencryptClient, _ := obp.System.Vault.EncryptStream(ctx)\nencryptClient.Send(&amp;vault.EncryptStreamRequest{\nPlainData: data,\n})\nencryptClient.CloseSend()\n\nencryptResponse, _ := encryptClient.Recv()\nencryptedData := encryptResponse.EncryptedData\n\n// Decrypt data\ndecryptClient, _ := obp.System.Vault.DecryptStream(ctx)\ndecryptClient.Send(&amp;vault.DecryptStreamRequest{\nEncryptedData: encryptedData,\n})\ndecryptClient.CloseSend()\n\ndecryptResponse, _ := decryptClient.Recv()\n\n// Compare to original data\nfmt.Printf(\"Data restored correctly: %t\", bytes.Equal(data, decryptResponse.PlainData))\n}\n</code></pre> Generate signature (HMAC) <p>In this example, we will generate HMAC using vaults HSM</p> GO <pre><code>package main\n\nimport (\n\"context\"\n\"encoding/base64\"\n\"fmt\"\n\nopenbp \"github.com/slamy-solutions/openbp-go\"\n\"github.com/slamy-solutions/openbp-go/modules\"\n\"github.com/slamy-solutions/openbp-go/modules/system\"\n\"github.com/slamy-solutions/openbp-go/modules/system/proto/vault\"\n)\n\nfunc main() {\nctx := context.TODO()\n\nobp, err := openbp.ConnectToModules(ctx, modules.NewStubConfig().\nWithSystemModule(system.NewSystemStubConfig().WithVault()),\n)\nif err != nil {\npanic(err)\n}\n\ndata := []byte(\"Hello OpenBP\")\n\nresponse, _ := obp.System.Vault.HMACSign(ctx, &amp;vault.HMACSignRequest{\nData: data,\n})\n\nsignature := base64.URLEncoding.EncodeToString(response.Signature)\nfmt.Println(\"Signature: \" + signature)\n}\n</code></pre> Generate RSA and sign message with it <p>In this example, we will sign message with RSA key-pair using vaults HSM</p> GO <pre><code>package main\n\nimport (\n\"context\"\n\"encoding/base64\"\n\"fmt\"\n\nopenbp \"github.com/slamy-solutions/openbp-go\"\n\"github.com/slamy-solutions/openbp-go/modules\"\n\"github.com/slamy-solutions/openbp-go/modules/system\"\n\"github.com/slamy-solutions/openbp-go/modules/system/proto/vault\"\n)\n\nfunc main() {\nctx := context.TODO()\n\nobp, err := openbp.ConnectToModules(ctx, modules.NewStubConfig().\nWithSystemModule(system.NewSystemStubConfig().WithVault()),\n)\nif err != nil {\npanic(err)\n}\n\nkeyName := \"my-super-rsa-key-pair\"\ndata := []byte(\"Hello OpenBP\")\n\nobp.System.Vault.EnsureRSAKeyPair(ctx, &amp;vault.EnsureRSAKeyPairRequest{\nKeyName: keyName,\n})\n\nresponse, _ := obp.System.Vault.RSASign(ctx, &amp;vault.RSASignRequest{\nKeyName: keyName,\nData:    data,\n})\n\nsignature := base64.URLEncoding.EncodeToString(response.Signature)\nfmt.Println(\"Signature: \" + signature)\n}\n</code></pre>"},{"location":"docs/modules/system/vault/#communication-api","title":"Communication API","text":"<p>The system offers communication capabilities with the service through the gRPC interface. The interface definitions, specified in the proto file, are provided by the <code>system</code> module. This allows clients to interact with the <code>system_vault</code> service seamlessly using gRPC-based communication protocols.</p>"},{"location":"docs/modules/system/vault/#general","title":"General","text":"rpc Seal(SealRequest) returns (SealResponse) {}; <p>Close and encrypt vault. After sealing, most of the operations will not be accessible.</p> RequestOK <p>The request doesn't have parameters         </p> <p>The response will always be positive, even when the vault is already sealed</p> rpc Unseal(UnsealRequest) returns (UnsealResponse) {}; <p>Decrypt and open vault. Must be done before most of the operations with vault secrets.</p> RequestOK Parameter Type Description secret string Password to decrypt the vault Response value Type Description success bool Indicates if vault was unsealed or not rpc UpdateSealSecret(UpdateSealSecretRequest) returns (UpdateSealSecretResponse) {}; <p>Set up new seal secret and reincrypt vault. The vault must be unsealed before this operation. You don't need to unseal vault after this operation.</p> RequestOKNOT_AUTHORIZED <p>This operation requires you to have administrator access to the HSM. Check PKCS11 spec. If you are using emulated HSM (by default) this will be the same as the seal/unseal secret by default. Change it.</p> Parameter Type Description Default currentAdminPassword string Current administrator password. \"12345678\" newPassword string New administrator password. - newSecret string New seal/unseal secret. - <p>The seal/unseal secret was successfully updated. The administrator password was updated.</p> <p>Bad administrator password</p> rpc GetStatus(GetStatusRequest) returns (GetStatusResponse) {}; <p>Get current status of the vault.</p> RequestOK <p>The request doesn't have parameters</p> Response value Type Description sealed bool Is vault sealed or not"},{"location":"docs/modules/system/vault/#rsa","title":"RSA","text":"<p>The <code>system_vault</code> service plays a crucial role in securely managing RSA key-pairs. It employs a highly secure approach where the private key is never exposed outside of the Hardware Security Module (HSM) and cannot be extracted from it. On the other hand, the public key, which is intended to be shared and accessible to all, can be retrieved.</p> <p>Info</p> <p>To ensure the utmost security, all operations involving the private key are performed exclusively within the HSM. This means that any cryptographic operations, such as signing or decryption, utilize the private key directly within the HSM's protected environment. This approach significantly reduces the risk of private key compromise or unauthorized access.</p> <p>By securely managing RSA key-pairs within the <code>system_vault</code> service and relying on the protection provided by the HSM, the confidentiality and integrity of the private key are maintained while allowing the public key to be widely accessible for encryption, verification, or other public operations.</p> rpc EnsureRSAKeyPair(EnsureRSAKeyPairRequest) returns (EnsureRSAKeyPairResponse) {}; <p>Create RSA key pair if it doesnt exist. The private key never leaves the HSM.</p> RequestOKFAILED_PRECONDITION Parameter Type Description keyName string Unique name of the key-pair <p>The key-pair was created or already existed before this operation.</p> <p>The vault is sealed.</p> rpc GetRSAPublicKey(GetRSAPublicKeyRequest) returns (GetRSAPublicKeyResponse) {}; <p>Get public key of the RSA key-pair.</p> RequestOKNOT_FOUNDFAILED_PRECONDITION Parameter Type Description keyName string Unique name of the key-pair Response value Type Description publicKey bytes Public key in the PKCS #1, ASN.1 DER format <p>Key-pair with provided name doesn't exist</p> <p>The vault is sealed.</p> rpc RSASignStream(stream RSASignStreamRequest) returns (RSASignStreamResponse) {}; <p>Sign message stream with RSA private key. It will use SHA512_RSA_PKCS (RS512) algorithm to sign the message.</p> <p>Tip</p> <p>If your data is short (maximum several kilobytes) - use <code>RSASign</code> instead. It will be faster and use less resources.</p> RequestOKNOT_FOUNDFAILED_PRECONDITION Parameter Type Description keyName string Unique name of the key-pair data bytes Data chunk to sign Response value Type Description signature bytes Signature of the provided data <p>Key-pair with provided name doesn't exist</p> <p>The vault is sealed.</p> rpc RSAVerifyStream(stream RSAVerifyStreamRequest) returns (RSAVerifyStreamResponse) {}; <p>Validate signature of the message stream using RSA key-pairs public key. It will use SHA512_RSA_PKCS (RS512) algorithm to verify the message.</p> <p>Tip</p> <p>If your data is short (maximum several kilobytes) - use <code>RSAVerify</code> instead. It will be faster and use less resources.</p> RequestOKNOT_FOUNDFAILED_PRECONDITION Parameter Type Description keyName string Unique name of the key-pair data bytes Data chunk to validate signature bytes Signature to validate Response value Type Description valid bool True if and only if provided data and its signature matches provided key-pair <p>Key-pair with provided name doesn't exist</p> <p>The vault is sealed.</p> rpc RSASign(RSASignRequest) returns (RSASignResponse) {}; <p>Sign message with RSA. It will use SHA512_RSA_PKCS (RS512) algorithm to sign the message.</p> <p>Warning</p> <p>The data must be short (max several kilobytes). If it is longer - use <code>RSASignStream</code> instead.</p> RequestOKNOT_FOUNDFAILED_PRECONDITION Parameter Type Description keyName string Unique name of the key-pair data bytes Data to sign Response value Type Description signature bytes Signature of the provided data <p>Key-pair with provided name doesn't exist</p> <p>The vault is sealed.</p> rpc RSAVerify(RSAVerifyRequest) returns (RSAVerifyResponse) {}; <p>Validate signature of the message using RSA key-pairs public key. It will use SHA512_RSA_PKCS (RS512) algorithm to verify the message.</p> <p>Warning</p> <p>The data must be short (max several kilobytes). If it is longer - use <code>RSAVerifyStream</code> instead.</p> RequestOKNOT_FOUNDFAILED_PRECONDITION Parameter Type Description keyName string Unique name of the key-pair data bytes Data to validate signature bytes Signature to validate Response value Type Description valid bool True if and only if provided data and its signature matches provided key-pair <p>Key-pair with provided name doesn't exist</p> <p>The vault is sealed.</p>"},{"location":"docs/modules/system/vault/#hmac","title":"HMAC","text":"<p>The <code>system_vault</code> service offers the capability to generate HMAC (Hash-based Message Authentication Code) for data. One of the key security measures in this process is that the HMAC secret, which is utilized in generating the HMAC, never leaves the HSM.</p> <p>Info</p> <p>To ensure the utmost security, all operations involving HMAC are performed exclusively within the HSM.</p> rpc HMACSignStream(stream HMACSignStreamRequest) returns (HMACSignStreamResponse) {}; <p>Calculate HMAC signature for input data stream. HMAC secret never leaves the HSM (hardware security module). It automatically uses the best available HMAC algorithm for currently used HSM.</p> <p>Tip</p> <p>If your data is short (maximum several kilobytes) - use <code>HMACSign</code> instead. It will be faster and use less resources.</p> RequestOKFAILED_PRECONDITION Parameter Type Description data bytes Data chunk to sign Response value Type Description signature bytes Signature of the provided data <p>The vault is sealed.</p> rpc HMACVerifyStream(stream HMACVerifyStreamRequest) returns (HMACVerifyStreamResponse) {}; <p>Verify HMAC signature of the data stream.</p> <p>Tip</p> <p>If your data is short (maximum several kilobytes) - use <code>HMACVerify</code> instead. It will be faster and use less resources.</p> RequestOKFAILED_PRECONDITION Parameter Type Description data bytes Data chunk to validate signature bytes Signature to validate Response value Type Description valid bool True if and only if provided data and its signature matches <p>The vault is sealed.</p> rpc HMACSign(HMACSignRequest) returns (HMACSignResponse) {}; <p>Calculate HMAC signature for input data. HMAC secret never leaves the HSM (hardware security module). It automatically uses the best available HMAC algorithm for currently used HSM.</p> <p>Warning</p> <p>The data must be short (max several kilobytes). If it is longer - use <code>HMACSignStream</code> instead.</p> RequestOKFAILED_PRECONDITION Parameter Type Description data bytes Data to sign Response value Type Description signature bytes Signature of the provided data <p>The vault is sealed.</p> rpc HMACVerify(HMACVerifyRequest) returns (HMACVerifyResponse) {}; <p>Verifiy HMAC signature of the data. </p> <p>Warning</p> <p>The data must be short (max several kilobytes). If it is longer - use <code>HMACVerifyStream</code> instead.</p> RequestOKFAILED_PRECONDITION Parameter Type Description data bytes Data to validate signature bytes Signature to validate Response value Type Description valid bool True if and only if provided data and its signature matches <p>The vault is sealed.</p>"},{"location":"docs/modules/system/vault/#encryption","title":"Encryption","text":"<p>The <code>system_vault</code> service includes the capability to encrypt data, adding an extra layer of security to sensitive information. The encryption key used for this process is securely managed and protected within the HSM, safeguarding it from potential threats.</p> rpc HMACSignStream(stream HMACSignStreamRequest) returns (HMACSignStreamResponse) {}; <p>Encrypt data stream. Encryption secret never leaves the HSM (hardware security module). It automatically uses the best available encryption algorithm for currently used HSM. It will only select the algorithm that is capable of decrypting from the middle of the whole data (partial decryption).</p> <p>Tip</p> <p>If your data is short (maximum several kilobytes) - use <code>HMACSign</code> instead. It will be faster and use less resources.</p> RequestOKFAILED_PRECONDITION Parameter Type Description plainData bytes Data chunk to encrypt Response value Type Description encryptedData bytes Encrypted chunk of data <p>The vault is sealed.</p> rpc HMACVerifyStream(stream HMACVerifyStreamRequest) returns (HMACVerifyStreamResponse) {}; <p>Decrypt data stream. If you want to decrypt part of the information from the middle of the whole data - ensure, that the first chunk of the data, that you are sending is padded by 2048 bit.</p> <p>Tip</p> <p>If your data is short (maximum several kilobytes) - use <code>HMACVerify</code> instead. It will be faster and use less resources.</p> RequestOKFAILED_PRECONDITION Parameter Type Description encryptedData bytes Encrypted chunk of the data Response value Type Description plainData bytes Decrypted chunk of the data <p>The vault is sealed.</p>"},{"location":"docs/modules/system/vault/#hsm","title":"HSM","text":"<p>The system_vault service offers the flexibility to work with multiple Hardware Security Module (HSM) providers, allowing users to configure their preferred provider before the initial startup of the system. This capability enables seamless integration with different HSM technologies based on specific requirements or preferences.</p> <p>To select a particular HSM provider, you can set the <code>HSM_PROVIDER</code> environment variable. The following providers are currently supported:</p> <ul> <li><code>softhsm2</code>: This is the default provider that emulates an HSM using the SoftHSM2 library.</li> <li><code>dynamic</code>: This provider offers a dynamic interface, allowing potential connections with various PKCS11 client libraries. It provides flexibility for utilizing different HSM implementations.</li> </ul> <p>Warning</p> <p>It is worth mentioning that due to the nature of making secrets non-extractable for security reasons, switching HSM providers at runtime may not be possible. Therefore, it is recommended to configure the desired provider before the initial startup of the system.</p> <p>Furthermore, the system is designed to accommodate additional HSM providers in the future. Contributions to expand the range of supported providers are highly appreciated, ensuring ongoing enhancement and versatility in choosing the most suitable HSM solution.</p>"},{"location":"docs/modules/system/vault/#softhsm2","title":"SoftHSM2","text":"<p>The SoftHSM2 provider does not require any additional configuration. It comes preconfigured with optimal settings that adhere to best practices, alleviating any concerns or need for manual adjustments on your part.</p>"},{"location":"docs/modules/system/vault/#dynamic-hsm-provider","title":"Dynamic HSM provider","text":"<p>To ensure the proper functioning of the dynamic provider, you need to follow a few steps. First, run OpenBP and it will create a volume for the <code>system_vault</code> service at <code>./data/system/vault/</code>pkcs (depending on what setup you are using). In this folder, copy your PKCS11 library and name it <code>pkcs.so</code>.</p> <p>Additionally, you need to define the slot by setting the <code>DYNAMIC_PKCS11_SLOT</code> environment variable. This variable specifies the slot that the service should attempt to open when loading the PKCS11 library.</p> <p>By configuring the environment variable and placing the PKCS11 library in the designated folder, the <code>system_vault</code> service will automatically load the library and try to open the provided slot during its startup process.</p> <p>Start OpenBP and check the logs. You will receive a message if everything is ok.</p>"},{"location":"license/acknowledgements.en/","title":"Licenses of sub-components","text":"<p>OpenBP copyright info: Copyright 2022 Slamy Solutions. All rights reserved. Released under AGPL</p> <p>OpenBP uses the following amazing open-source projects:</p> Project License go BSD 3-Clause octicons MIT nats-js Apache-2.0 nats-go Apache-2.0"},{"location":"license/faq.en/","title":"Frequently asked questions","text":"Can I offer OpenBP as a SaaS for my clients? <p>Yes, you can do this. But you must release all the related work in source code form under the AGPL license.</p> I'm using OpenBP in my company for my internal business processes. I'm modifying it and adjusting it to my needs. Am I obligated to release the source code of my modifications? <p>No. You must release source code only if you are distributing or offering software using the network.</p>"},{"location":"license/license.en/","title":"License","text":"<p>OpenBP is free and open source. It is distributed under AGPL license.</p> <p>That means that a user of the OpenBP code must:</p> <ul> <li>Include a copy of the full license text and the original copyright notice</li> <li>State all significant changes made to the original software</li> <li>Make available the source code when you distribute any works based on the licensed software</li> <li>Include any installation information necessary to update and reinstall the software if the program is being used as part of a consumer device</li> <li>If you make access to modified software available to users over a network, you must make your source code available to those users.</li> </ul> <p>The AGPL License permits users of the licensed code to:</p> <ul> <li>Use the code for commercial purposes. The AGPL imposes no conditions on using the code in software that\u2019s sold commercially.</li> <li>Modify the code. If users distribute these changes/modifications in any public way (including over a server), they must release these updates in source code form under the AGPL license.</li> <li>Distribute copies or modified/updated versions of the code as long as these modifications are also released under the GNU AGPL</li> <li>Place warranty</li> </ul> <p>Check the FAQ page, where we interpret the license and answer the most frequent questions.</p>"},{"location":"license/license.en/#enterprise-license","title":"Enterprise license","text":"<p>If you are not satisfied with AGPL license, you can request an Enterprise license by contacting us. The Enterprise license may also include additional benefits discussed individually.</p>"}]}